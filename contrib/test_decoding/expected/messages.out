-- predictability
SET synchronous_commit = on;
SELECT 'init' FROM pg_create_logical_replication_slot('regression_slot', 'test_decoding');
 ?column? 
----------
 init
(1 row)

SELECT 'msg1' FROM pg_logical_emit_message(true, 'test', 'msg1');
 ?column? 
----------
 msg1
(1 row)

SELECT 'msg2' FROM pg_logical_emit_message(false, 'test', 'msg2');
 ?column? 
----------
 msg2
(1 row)

BEGIN;
SELECT 'msg3' FROM pg_logical_emit_message(true, 'test', 'msg3');
 ?column? 
----------
 msg3
(1 row)

SELECT 'msg4' FROM pg_logical_emit_message(false, 'test', 'msg4');
 ?column? 
----------
 msg4
(1 row)

ROLLBACK;
BEGIN;
SELECT 'msg5' FROM pg_logical_emit_message(true, 'test', 'msg5');
 ?column? 
----------
 msg5
(1 row)

SELECT 'msg6' FROM pg_logical_emit_message(false, 'test', 'msg6');
 ?column? 
----------
 msg6
(1 row)

SELECT 'msg7' FROM pg_logical_emit_message(true, 'test', 'msg7');
 ?column? 
----------
 msg7
(1 row)

COMMIT;
SELECT 'ignorethis' FROM pg_logical_emit_message(true, 'test', 'czechtastic');
  ?column?  
------------
 ignorethis
(1 row)

SELECT data FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL, 'force-binary', '0', 'skip-empty-xacts', '1', 'include-xids', '0');
                                data                                
--------------------------------------------------------------------
 BEGIN
 message: transactional: 1 prefix: test, sz: 4 content:msg1
 COMMIT
 message: transactional: 0 prefix: test, sz: 4 content:msg2
 message: transactional: 0 prefix: test, sz: 4 content:msg4
 message: transactional: 0 prefix: test, sz: 4 content:msg6
 BEGIN
 message: transactional: 1 prefix: test, sz: 4 content:msg5
 message: transactional: 1 prefix: test, sz: 4 content:msg7
 COMMIT
 BEGIN
 message: transactional: 1 prefix: test, sz: 11 content:czechtastic
 COMMIT
(13 rows)

-- test db filtering
\set prevdb :DBNAME
\c template1
SELECT 'otherdb1' FROM pg_logical_emit_message(false, 'test', 'otherdb1');
 ?column? 
----------
 otherdb1
(1 row)

SELECT 'otherdb2' FROM pg_logical_emit_message(true, 'test', 'otherdb2');
 ?column? 
----------
 otherdb2
(1 row)

\c :prevdb
SELECT data FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL, 'force-binary', '0', 'skip-empty-xacts', '1');
 data 
------
(0 rows)

SELECT 'cleanup' FROM pg_drop_replication_slot('regression_slot');
 ?column? 
----------
 cleanup
(1 row)

