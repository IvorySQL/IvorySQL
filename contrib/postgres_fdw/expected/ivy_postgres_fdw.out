-- ===================================================================
-- create FDW objects
-- ===================================================================
CREATE EXTENSION postgres_fdw;
SET ivorysql.identifier_case_switch = normal;
\set EXECUTE_RUN_PREPARE on
CREATE SERVER testserver1 FOREIGN DATA WRAPPER postgres_fdw;
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER loopback FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('ivorysql.port')||$$'
            )$$;
        EXECUTE $$CREATE SERVER loopback2 FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('ivorysql.port')||$$'
            )$$;
        EXECUTE $$CREATE SERVER loopback3 FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('ivorysql.port')||$$'
            )$$;
    END;
$d$;
CREATE USER MAPPING FOR public SERVER testserver1
	OPTIONS (user 'value', password 'value');
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback;
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback2;
CREATE USER MAPPING FOR public SERVER loopback3;
-- ===================================================================
-- create objects used through FDW loopback server
-- ===================================================================
CREATE TYPE user_enum AS ENUM ('foo', 'bar', 'buz');
CREATE SCHEMA "S 1";
CREATE TABLE "S 1"."T 1" (
	"C 1" number(38,0) NOT NULL,
	c2 number(38,0) NOT NULL,
	c3 varchar2(1024),
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10),
	c8 user_enum,
	CONSTRAINT t1_pkey PRIMARY KEY ("C 1")
);
CREATE TABLE "S 1"."T 2" (
	c1 number(38,0) NOT NULL,
	c2 varchar2(1024),
	CONSTRAINT t2_pkey PRIMARY KEY (c1)
);
CREATE TABLE "S 1"."T 3" (
	c1 number(38,0) NOT NULL,
	c2 number(38,0) NOT NULL,
	c3 varchar2(1024),
	CONSTRAINT t3_pkey PRIMARY KEY (c1)
);
CREATE TABLE "S 1"."T 4" (
	c1 number(38,0) NOT NULL,
	c2 number(38,0) NOT NULL,
	c3 varchar2(1024),
	CONSTRAINT t4_pkey PRIMARY KEY (c1)
);
-- Disable autovacuum for these tables to avoid unexpected effects of that
ALTER TABLE "S 1"."T 1" SET (autovacuum_enabled = 'false');
ALTER TABLE "S 1"."T 2" SET (autovacuum_enabled = 'false');
ALTER TABLE "S 1"."T 3" SET (autovacuum_enabled = 'false');
ALTER TABLE "S 1"."T 4" SET (autovacuum_enabled = 'false');
INSERT INTO "S 1"."T 1"
	SELECT id,
	       id % 10,
	       to_char(id, 'FM00000'),
	       '1970-01-01'::timestamptz + ((id % 100) || ' days')::pg_catalog.interval,
	       '1970-01-01'::timestamp + ((id % 100) || ' days')::pg_catalog.interval,
	       id % 10,
	       id % 10,
	       'foo'::user_enum
	FROM generate_series(1, 1000) id;
INSERT INTO "S 1"."T 2"
	SELECT id,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
INSERT INTO "S 1"."T 3"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
DELETE FROM "S 1"."T 3" WHERE c1 % 2 != 0;	-- delete for outer join tests
INSERT INTO "S 1"."T 4"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
DELETE FROM "S 1"."T 4" WHERE c1 % 3 != 0;	-- delete for outer join tests
ANALYZE "S 1"."T 1";
ANALYZE "S 1"."T 2";
ANALYZE "S 1"."T 3";
ANALYZE "S 1"."T 4";
-- ===================================================================
-- create foreign tables
-- ===================================================================
CREATE FOREIGN TABLE ft1 (
	c0 number(38,0),
	c1 number(38,0) NOT NULL,
	c2 number(38,0) NOT NULL,
	c3 varchar2(1024),
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum
) SERVER loopback;
ALTER FOREIGN TABLE ft1 DROP COLUMN c0;
CREATE FOREIGN TABLE ft2 (
	c1 number(38,0) NOT NULL,
	c2 number(38,0) NOT NULL,
	cx number(38,0),
	c3 varchar2(1024),
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 user_enum
) SERVER loopback;
ALTER FOREIGN TABLE ft2 DROP COLUMN cx;
CREATE FOREIGN TABLE ft4 (
	c1 number(38,0) NOT NULL,
	c2 number(38,0) NOT NULL,
	c3 varchar2(1024)
) SERVER loopback OPTIONS (schema_name 'S 1', table_name 'T 3');
CREATE FOREIGN TABLE ft5 (
	c1 number(38,0) NOT NULL,
	c2 number(38,0) NOT NULL,
	c3 varchar2(1024)
) SERVER loopback OPTIONS (schema_name 'S 1', table_name 'T 4');
CREATE FOREIGN TABLE ft6 (
	c1 number(38,0) NOT NULL,
	c2 number(38,0) NOT NULL,
	c3 varchar2(1024)
) SERVER loopback2 OPTIONS (schema_name 'S 1', table_name 'T 4');
CREATE FOREIGN TABLE ft7 (
	c1 number(38,0) NOT NULL,
	c2 number(38,0) NOT NULL,
	c3 varchar2(1024)
) SERVER loopback3 OPTIONS (schema_name 'S 1', table_name 'T 4');
-- ===================================================================
-- tests inteval
-- ===================================================================
CREATE TABLE "S 1".test_interval (
    candidate_id NUMBER,
    first_name VARCHAR2(50 byte) NOT NULL,
    last_name VARCHAR2(50 byte) NOT NULL,
    title VARCHAR2(255 char) NOT NULL,
    year_of_exper INTERVAL YEAR TO MONTH,
    second_of_exper INTERVAL day TO SECOND
);
INSERT INTO "S 1".test_interval (
    candidate_id,
    first_name,
    last_name,
    title,
    year_of_exper,
    second_of_exper
    )
VALUES (
    1,
    'test1',
    'test2',
    'test Manager',
    INTERVAL '10-2' YEAR TO MONTH,
    INTERVAL '11 10:09:08.555' DAY TO SECOND
    );
select * from "S 1".test_interval;
 candidate_id | first_name | last_name |    title     | year_of_exper |   second_of_exper   
--------------+------------+-----------+--------------+---------------+---------------------
 1            | test1      | test2     | test Manager | +10-02        | +11 10:09:08.555000
(1 row)

CREATE FOREIGN TABLE test_interval_foreige (
    candidate_id NUMBER,
    first_name VARCHAR2(50 byte) NOT NULL,
    last_name VARCHAR2(50 byte) NOT NULL,
    title VARCHAR2(255 char) NOT NULL,
    year_of_exper INTERVAL YEAR TO MONTH,
    second_of_exper INTERVAL day TO SECOND
)SERVER loopback3 OPTIONS (schema_name 'S 1', table_name 'test_interval');
INSERT INTO test_interval_foreige (
    candidate_id,
    first_name,
    last_name,
    title,
    year_of_exper,
    second_of_exper
    )
VALUES (
    1,
    'test3',
    'test4',
    'test3 Manager',
    INTERVAL '10-2' YEAR TO MONTH,
    INTERVAL '11 10:09:08.555' DAY TO SECOND
    );
select * from test_interval_foreige;
 candidate_id | first_name | last_name |     title     | year_of_exper |   second_of_exper   
--------------+------------+-----------+---------------+---------------+---------------------
 1            | test1      | test2     | test Manager  | +10-02        | +11 10:09:08.555000
 1            | test3      | test4     | test3 Manager | +10-02        | +11 10:09:08.555000
(2 rows)

DROP FOREIGN TABLE test_interval_foreige;
DROP TABLE "S 1".test_interval;
-- ===================================================================
-- tests for validator
-- ===================================================================
-- requiressl and some other parameters are omitted because
-- valid values for them depend on configure options
ALTER SERVER testserver1 OPTIONS (
	use_remote_estimate 'false',
	updatable 'true',
	fdw_startup_cost '123.456',
	fdw_tuple_cost '0.123',
	service 'value',
	connect_timeout 'value',
	dbname 'value',
	host 'value',
	hostaddr 'value',
	port 'value',
	--client_encoding 'value',
	application_name 'value',
	--fallback_application_name 'value',
	keepalives 'value',
	keepalives_idle 'value',
	keepalives_interval 'value',
	tcp_user_timeout 'value',
	-- requiressl 'value',
	sslcompression 'value',
	sslmode 'value',
	sslcert 'value',
	sslkey 'value',
	sslrootcert 'value',
	sslcrl 'value',
	--requirepeer 'value',
	krbsrvname 'value',
	gsslib 'value',
	gssdelegation 'value'
	--replication 'value'
);
-- Error, invalid list syntax
ALTER SERVER testserver1 OPTIONS (ADD extensions 'foo; bar');
ERROR:  parameter "extensions" must be a list of extension names
-- OK but gets a warning
ALTER SERVER testserver1 OPTIONS (ADD extensions 'foo, bar');
WARNING:  extension "foo" is not installed
WARNING:  extension "bar" is not installed
ALTER SERVER testserver1 OPTIONS (DROP extensions);
ALTER USER MAPPING FOR public SERVER testserver1
	OPTIONS (DROP user, DROP password);
-- Attempt to add a valid option that's not allowed in a user mapping
ALTER USER MAPPING FOR public SERVER testserver1
	OPTIONS (ADD sslmode 'require');
ERROR:  invalid option "sslmode"
-- But we can add valid ones fine
ALTER USER MAPPING FOR public SERVER testserver1
	OPTIONS (ADD sslpassword 'dummy');
-- Ensure valid options we haven't used in a user mapping yet are
-- permitted to check validation.
ALTER USER MAPPING FOR public SERVER testserver1
	OPTIONS (ADD sslkey 'value', ADD sslcert 'value');
ALTER FOREIGN TABLE ft1 OPTIONS (schema_name 'S 1', table_name 'T 1');
ALTER FOREIGN TABLE ft2 OPTIONS (schema_name 'S 1', table_name 'T 1');
ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
ALTER FOREIGN TABLE ft2 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
\det+
                              List of foreign tables
 Schema | Table |  Server   |              FDW options              | Description 
--------+-------+-----------+---------------------------------------+-------------
 public | ft1   | loopback  | (schema_name 'S 1', table_name 'T 1') | 
 public | ft2   | loopback  | (schema_name 'S 1', table_name 'T 1') | 
 public | ft4   | loopback  | (schema_name 'S 1', table_name 'T 3') | 
 public | ft5   | loopback  | (schema_name 'S 1', table_name 'T 4') | 
 public | ft6   | loopback2 | (schema_name 'S 1', table_name 'T 4') | 
 public | ft7   | loopback3 | (schema_name 'S 1', table_name 'T 4') | 
(6 rows)

-- Test that alteration of server options causes reconnection
-- Remote's errors might be non-English, so hide them to ensure stable results
\set VERBOSITY terse
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |                c4                 
-------+-----------------------------------
 00001 | 1970-01-02 00:00:00.000000 -08:00
(1 row)

ALTER SERVER loopback OPTIONS (SET dbname 'no such database');
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  could not connect to server "loopback"
DO $d$
    BEGIN
        EXECUTE $$ALTER SERVER loopback
            OPTIONS (SET dbname '$$||current_database()||$$')$$;
    END;
$d$;
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |                c4                 
-------+-----------------------------------
 00001 | 1970-01-02 00:00:00.000000 -08:00
(1 row)

-- Test that alteration of user mapping options causes reconnection
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback
  OPTIONS (ADD user 'no such user');
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  could not connect to server "loopback"
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback
  OPTIONS (DROP user);
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |                c4                 
-------+-----------------------------------
 00001 | 1970-01-02 00:00:00.000000 -08:00
(1 row)

\set VERBOSITY default
-- Now we should be able to run ANALYZE.
-- To exercise multiple code paths, we use local stats on ft1
-- and remote-estimate mode on ft2.
ANALYZE ft1;
ALTER FOREIGN TABLE ft2 OPTIONS (use_remote_estimate 'true');
-- ===================================================================
-- test error case for create publication on foreign table
-- ===================================================================
CREATE PUBLICATION testpub_ftbl FOR TABLE ft1;  -- should fail
ERROR:  cannot add relation "ft1" to publication
DETAIL:  This operation is not supported for foreign tables.
-- ===================================================================
-- simple queries
-- ===================================================================
-- single table without alias
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
           QUERY PLAN            
---------------------------------
 Limit
   ->  Sort
         Sort Key: c3, c1
         ->  Foreign Scan on ft1
(4 rows)

SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
-----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 101 | 1  | 00101 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
 102 | 2  | 00102 | 1970-01-03 00:00:00.000000 -08:00 | 1970-01-03 00:00:00.000000 | 2  | 2          | foo
 103 | 3  | 00103 | 1970-01-04 00:00:00.000000 -08:00 | 1970-01-04 00:00:00.000000 | 3  | 3          | foo
 104 | 4  | 00104 | 1970-01-05 00:00:00.000000 -08:00 | 1970-01-05 00:00:00.000000 | 4  | 4          | foo
 105 | 5  | 00105 | 1970-01-06 00:00:00.000000 -08:00 | 1970-01-06 00:00:00.000000 | 5  | 5          | foo
 106 | 6  | 00106 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 107 | 7  | 00107 | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 108 | 8  | 00108 | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 109 | 9  | 00109 | 1970-01-10 00:00:00.000000 -08:00 | 1970-01-10 00:00:00.000000 | 9  | 9          | foo
 110 | 0  | 00110 | 1970-01-11 00:00:00.000000 -08:00 | 1970-01-11 00:00:00.000000 | 0  | 0          | foo
(10 rows)

-- single table with alias - also test that tableoid sort is not pushed to remote side
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
         Sort Key: t1.c3, t1.c1, t1.tableoid
         ->  Foreign Scan on public.ft1 t1
               Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
-----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 101 | 1  | 00101 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
 102 | 2  | 00102 | 1970-01-03 00:00:00.000000 -08:00 | 1970-01-03 00:00:00.000000 | 2  | 2          | foo
 103 | 3  | 00103 | 1970-01-04 00:00:00.000000 -08:00 | 1970-01-04 00:00:00.000000 | 3  | 3          | foo
 104 | 4  | 00104 | 1970-01-05 00:00:00.000000 -08:00 | 1970-01-05 00:00:00.000000 | 4  | 4          | foo
 105 | 5  | 00105 | 1970-01-06 00:00:00.000000 -08:00 | 1970-01-06 00:00:00.000000 | 5  | 5          | foo
 106 | 6  | 00106 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 107 | 7  | 00107 | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 108 | 8  | 00108 | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 109 | 9  | 00109 | 1970-01-10 00:00:00.000000 -08:00 | 1970-01-10 00:00:00.000000 | 9  | 9          | foo
 110 | 0  | 00110 | 1970-01-11 00:00:00.000000 -08:00 | 1970-01-11 00:00:00.000000 | 0  | 0          | foo
(10 rows)

-- whole-row reference
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Limit
   Output: t1.*, c3, c1
   ->  Sort
         Output: t1.*, c3, c1
         Sort Key: t1.c3, t1.c1
         ->  Foreign Scan on public.ft1 t1
               Output: t1.*, c3, c1
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                t1                                                 
---------------------------------------------------------------------------------------------------
 (101,1,00101,"1970-01-02 00:00:00.000000 -08:00","1970-01-02 00:00:00.000000",1,"1         ",foo)
 (102,2,00102,"1970-01-03 00:00:00.000000 -08:00","1970-01-03 00:00:00.000000",2,"2         ",foo)
 (103,3,00103,"1970-01-04 00:00:00.000000 -08:00","1970-01-04 00:00:00.000000",3,"3         ",foo)
 (104,4,00104,"1970-01-05 00:00:00.000000 -08:00","1970-01-05 00:00:00.000000",4,"4         ",foo)
 (105,5,00105,"1970-01-06 00:00:00.000000 -08:00","1970-01-06 00:00:00.000000",5,"5         ",foo)
 (106,6,00106,"1970-01-07 00:00:00.000000 -08:00","1970-01-07 00:00:00.000000",6,"6         ",foo)
 (107,7,00107,"1970-01-08 00:00:00.000000 -08:00","1970-01-08 00:00:00.000000",7,"7         ",foo)
 (108,8,00108,"1970-01-09 00:00:00.000000 -08:00","1970-01-09 00:00:00.000000",8,"8         ",foo)
 (109,9,00109,"1970-01-10 00:00:00.000000 -08:00","1970-01-10 00:00:00.000000",9,"9         ",foo)
 (110,0,00110,"1970-01-11 00:00:00.000000 -08:00","1970-01-11 00:00:00.000000",0,"0         ",foo)
(10 rows)

-- empty result
SELECT * FROM ft1 WHERE false;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 
----+----+----+----+----+----+----+----
(0 rows)

-- with WHERE clause
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: ((t1.c7 >= '1'::oracharbyte) AND (t1.c1 = '101'::number) AND (t1.c6 = '1'::varchar2))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
 c1  | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
-----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 101 | 1  | 00101 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

-- with FOR UPDATE/SHARE
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, t1.*
   Filter: (t1.c1 = '101'::number)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" FOR UPDATE
(4 rows)

SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
 c1  | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
-----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 101 | 1  | 00101 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, t1.*
   Filter: (t1.c1 = '102'::number)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" FOR SHARE
(4 rows)

SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
 c1  | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
-----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 102 | 2  | 00102 | 1970-01-03 00:00:00.000000 -08:00 | 1970-01-03 00:00:00.000000 | 2  | 2          | foo
(1 row)

-- aggregate
SELECT COUNT(*) FROM ft1 t1;
 count 
-------
  1000
(1 row)

-- subquery
SELECT * FROM ft1 t1 WHERE t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 <= 10) ORDER BY c1;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
 2  | 2  | 00002 | 1970-01-03 00:00:00.000000 -08:00 | 1970-01-03 00:00:00.000000 | 2  | 2          | foo
 3  | 3  | 00003 | 1970-01-04 00:00:00.000000 -08:00 | 1970-01-04 00:00:00.000000 | 3  | 3          | foo
 4  | 4  | 00004 | 1970-01-05 00:00:00.000000 -08:00 | 1970-01-05 00:00:00.000000 | 4  | 4          | foo
 5  | 5  | 00005 | 1970-01-06 00:00:00.000000 -08:00 | 1970-01-06 00:00:00.000000 | 5  | 5          | foo
 6  | 6  | 00006 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 7  | 7  | 00007 | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 8  | 8  | 00008 | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 9  | 9  | 00009 | 1970-01-10 00:00:00.000000 -08:00 | 1970-01-10 00:00:00.000000 | 9  | 9          | foo
 10 | 0  | 00010 | 1970-01-11 00:00:00.000000 -08:00 | 1970-01-11 00:00:00.000000 | 0  | 0          | foo
(10 rows)

-- subquery+MAX
SELECT * FROM ft1 t1 WHERE t1.c3 = (SELECT MAX(c3) FROM ft2 t2) ORDER BY c1;
  c1  | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
------+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1000 | 0  | 01000 | 1970-01-01 00:00:00.000000 -08:00 | 1970-01-01 00:00:00.000000 | 0  | 0          | foo
(1 row)

-- used in CTE
WITH t1 AS (SELECT * FROM ft1 WHERE c1 <= 10) SELECT t2.c1, t2.c2, t2.c3, t2.c4 FROM t1, ft2 t2 WHERE t1.c1 = t2.c1 ORDER BY t1.c1;
 c1 | c2 |  c3   |                c4                 
----+----+-------+-----------------------------------
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00
 2  | 2  | 00002 | 1970-01-03 00:00:00.000000 -08:00
 3  | 3  | 00003 | 1970-01-04 00:00:00.000000 -08:00
 4  | 4  | 00004 | 1970-01-05 00:00:00.000000 -08:00
 5  | 5  | 00005 | 1970-01-06 00:00:00.000000 -08:00
 6  | 6  | 00006 | 1970-01-07 00:00:00.000000 -08:00
 7  | 7  | 00007 | 1970-01-08 00:00:00.000000 -08:00
 8  | 8  | 00008 | 1970-01-09 00:00:00.000000 -08:00
 9  | 9  | 00009 | 1970-01-10 00:00:00.000000 -08:00
 10 | 0  | 00010 | 1970-01-11 00:00:00.000000 -08:00
(10 rows)

-- fixed values
SELECT 'fixed', NULL FROM ft1 t1 WHERE c1 = 1;
 ?column? | ?column? 
----------+----------
 fixed    | 
(1 row)

-- Test forcing the remote server to produce sorted data for a merge join.
SET enable_hashjoin TO false;
SET enable_nestloop TO false;
-- inner join; expressions in the clauses appear in the equivalence class list
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C 1"
   ->  Merge Join
         Output: t1.c1, t2."C 1"
         Merge Cond: (t2."C 1" = t1.c1)
         ->  Index Only Scan using t1_pkey on "S 1"."T 1" t2
               Output: t2."C 1"
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(13 rows)

SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
 c1  | C 1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
                          QUERY PLAN                           
---------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C 1"
   ->  Merge Right Join
         Output: t1.c1, t2."C 1"
         Merge Cond: (t2."C 1" = t1.c1)
         ->  Index Only Scan using t1_pkey on "S 1"."T 1" t2
               Output: t2."C 1"
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(13 rows)

SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
 c1  | C 1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- A join between local table and foreign join. ORDER BY clause is added to the
-- foreign join so that the local table can be joined using merge join strategy.
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: t1."C 1"
   ->  Merge Right Join
         Output: t1."C 1"
         Inner Unique: true
         Merge Cond: (t3.c1 = t1."C 1")
         ->  Merge Join
               Output: t3.c1
               Merge Cond: (t2.c1 = t3.c1)
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft1 t2
                           Output: t2.c1
                           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Sort
                     Output: t3.c1
                     Sort Key: t3.c1
                     ->  Foreign Scan on public.ft2 t3
                           Output: t3.c1
                           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
               Output: t1."C 1"
(23 rows)

SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- Test similar to above, except that the full join prevents any equivalence
-- classes from being merged. This produces single relation equivalence classes
-- included in join restrictions.
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: t1."C 1", t2.c1, t3.c1
   ->  Merge Right Join
         Output: t1."C 1", t2.c1, t3.c1
         Inner Unique: true
         Merge Cond: (t3.c1 = t1."C 1")
         ->  Merge Left Join
               Output: t3.c1, t2.c1
               Merge Cond: (t3.c1 = t2.c1)
               ->  Sort
                     Output: t3.c1
                     Sort Key: t3.c1
                     ->  Foreign Scan on public.ft2 t3
                           Output: t3.c1
                           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft1 t2
                           Output: t2.c1
                           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
               Output: t1."C 1"
(23 rows)

SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

-- Test similar to above with all full outer joins
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1."C 1", t2.c1, t3.c1
   ->  Merge Full Join
         Output: t1."C 1", t2.c1, t3.c1
         Merge Cond: (t1."C 1" = t3.c1)
         ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
               Output: t1."C 1"
         ->  Sort
               Output: t2.c1, t3.c1
               Sort Key: t3.c1
               ->  Merge Full Join
                     Output: t2.c1, t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(25 rows)

SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
-- Test executing assertion in estimate_path_cost_size() that makes sure that
-- retrieved_rows for foreign rel re-used to cost pre-sorted foreign paths is
-- a sensible value even when the rel has tuples=0
CREATE TABLE loct_empty (c1 number(38,0) NOT NULL, c2 varchar2(1024));
CREATE FOREIGN TABLE ft_empty (c1 number(38,0) NOT NULL, c2 varchar2(1024))
  SERVER loopback OPTIONS (table_name 'loct_empty');
INSERT INTO loct_empty
  SELECT id, 'AAA' || to_char(id, 'FM000') FROM generate_series(1, 100) id;
DELETE FROM loct_empty;
ANALYZE ft_empty;
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft_empty ORDER BY c1;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Output: c1, c2
   Sort Key: ft_empty.c1
   ->  Foreign Scan on public.ft_empty
         Output: c1, c2
         Remote SQL: SELECT c1, c2 FROM public.loct_empty
(6 rows)

-- ===================================================================
-- WHERE with remotely-executable conditions
-- ===================================================================
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 1;         -- Var, OpExpr(b), Const
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = '1'::number)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: ((t1.c1 = '100'::number) AND (t1.c2 = '0'::number))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NULL))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NOT NULL))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (round((abs((t1.c1)::pg_catalog.float8))::pg_catalog.numeric, 0) = '1'::pg_catalog.numeric)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = (- t1.c1))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((("C 1" IS NOT NULL) IS DISTINCT FROM ("C 1" IS NOT NULL)))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = ANY (ARRAY[t1.c2, '1'::number, (t1.c1 + '0'::number)]))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- SubscriptingRef
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = (ARRAY[t1.c1, t1.c2, '3'::number])[1])
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c6 = 'foo''s\bar'::varchar2)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c8 = 'foo'::user_enum)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

-- parameterized remote path for foreign table
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM "S 1"."T 1" a, ft2 b WHERE a."C 1" = 47 AND b.c1 = a.c2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8
   Inner Unique: true
   Hash Cond: (b.c1 = a.c2)
   ->  Foreign Scan on public.ft2 b
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
   ->  Hash
         Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
         ->  Index Scan using t1_pkey on "S 1"."T 1" a
               Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
               Index Cond: (a."C 1" = '47'::number)
(12 rows)

SELECT * FROM ft2 a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  | c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----+----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 47 | 7  | 00047 | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo | 7  | 7  | 00007 | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
(1 row)

-- check both safe and unsafe join conditions
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft2 a, ft2 b
  WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8
   Hash Cond: ((b.c1 = a.c1) AND ((b.c7)::text = upper((a.c7)::text)))
   ->  Foreign Scan on public.ft2 b
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
   ->  Hash
         Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
         ->  Foreign Scan on public.ft2 a
               Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
               Filter: ((a.c2 = '6'::number) AND (a.c8 = 'foo'::user_enum))
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(12 rows)

SELECT * FROM ft2 a, ft2 b
WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
 c1  | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  | c1  | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
-----+----+-------+-----------------------------------+----------------------------+----+------------+-----+-----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 6   | 6  | 00006 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 6   | 6  | 00006 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 16  | 6  | 00016 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 16  | 6  | 00016 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
 26  | 6  | 00026 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 26  | 6  | 00026 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo
 36  | 6  | 00036 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 36  | 6  | 00036 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo
 46  | 6  | 00046 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 46  | 6  | 00046 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo
 56  | 6  | 00056 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 56  | 6  | 00056 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo
 66  | 6  | 00066 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 66  | 6  | 00066 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo
 76  | 6  | 00076 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 76  | 6  | 00076 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo
 86  | 6  | 00086 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 86  | 6  | 00086 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo
 96  | 6  | 00096 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 96  | 6  | 00096 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo
 106 | 6  | 00106 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 106 | 6  | 00106 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 116 | 6  | 00116 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 116 | 6  | 00116 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
 126 | 6  | 00126 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 126 | 6  | 00126 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo
 136 | 6  | 00136 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 136 | 6  | 00136 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo
 146 | 6  | 00146 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 146 | 6  | 00146 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo
 156 | 6  | 00156 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 156 | 6  | 00156 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo
 166 | 6  | 00166 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 166 | 6  | 00166 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo
 176 | 6  | 00176 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 176 | 6  | 00176 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo
 186 | 6  | 00186 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 186 | 6  | 00186 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo
 196 | 6  | 00196 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 196 | 6  | 00196 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo
 206 | 6  | 00206 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 206 | 6  | 00206 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 216 | 6  | 00216 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 216 | 6  | 00216 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
 226 | 6  | 00226 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 226 | 6  | 00226 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo
 236 | 6  | 00236 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 236 | 6  | 00236 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo
 246 | 6  | 00246 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 246 | 6  | 00246 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo
 256 | 6  | 00256 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 256 | 6  | 00256 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo
 266 | 6  | 00266 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 266 | 6  | 00266 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo
 276 | 6  | 00276 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 276 | 6  | 00276 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo
 286 | 6  | 00286 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 286 | 6  | 00286 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo
 296 | 6  | 00296 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 296 | 6  | 00296 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo
 306 | 6  | 00306 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 306 | 6  | 00306 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 316 | 6  | 00316 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 316 | 6  | 00316 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
 326 | 6  | 00326 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 326 | 6  | 00326 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo
 336 | 6  | 00336 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 336 | 6  | 00336 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo
 346 | 6  | 00346 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 346 | 6  | 00346 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo
 356 | 6  | 00356 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 356 | 6  | 00356 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo
 366 | 6  | 00366 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 366 | 6  | 00366 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo
 376 | 6  | 00376 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 376 | 6  | 00376 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo
 386 | 6  | 00386 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 386 | 6  | 00386 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo
 396 | 6  | 00396 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 396 | 6  | 00396 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo
 406 | 6  | 00406 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 406 | 6  | 00406 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 416 | 6  | 00416 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 416 | 6  | 00416 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
 426 | 6  | 00426 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 426 | 6  | 00426 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo
 436 | 6  | 00436 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 436 | 6  | 00436 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo
 446 | 6  | 00446 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 446 | 6  | 00446 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo
 456 | 6  | 00456 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 456 | 6  | 00456 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo
 466 | 6  | 00466 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 466 | 6  | 00466 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo
 476 | 6  | 00476 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 476 | 6  | 00476 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo
 486 | 6  | 00486 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 486 | 6  | 00486 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo
 496 | 6  | 00496 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 496 | 6  | 00496 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo
 506 | 6  | 00506 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 506 | 6  | 00506 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 516 | 6  | 00516 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 516 | 6  | 00516 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
 526 | 6  | 00526 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 526 | 6  | 00526 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo
 536 | 6  | 00536 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 536 | 6  | 00536 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo
 546 | 6  | 00546 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 546 | 6  | 00546 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo
 556 | 6  | 00556 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 556 | 6  | 00556 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo
 566 | 6  | 00566 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 566 | 6  | 00566 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo
 576 | 6  | 00576 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 576 | 6  | 00576 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo
 586 | 6  | 00586 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 586 | 6  | 00586 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo
 596 | 6  | 00596 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 596 | 6  | 00596 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo
 606 | 6  | 00606 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 606 | 6  | 00606 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 616 | 6  | 00616 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 616 | 6  | 00616 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
 626 | 6  | 00626 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 626 | 6  | 00626 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo
 636 | 6  | 00636 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 636 | 6  | 00636 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo
 646 | 6  | 00646 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 646 | 6  | 00646 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo
 656 | 6  | 00656 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 656 | 6  | 00656 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo
 666 | 6  | 00666 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 666 | 6  | 00666 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo
 676 | 6  | 00676 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 676 | 6  | 00676 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo
 686 | 6  | 00686 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 686 | 6  | 00686 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo
 696 | 6  | 00696 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 696 | 6  | 00696 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo
 706 | 6  | 00706 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 706 | 6  | 00706 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 716 | 6  | 00716 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 716 | 6  | 00716 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
 726 | 6  | 00726 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 726 | 6  | 00726 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo
 736 | 6  | 00736 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 736 | 6  | 00736 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo
 746 | 6  | 00746 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 746 | 6  | 00746 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo
 756 | 6  | 00756 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 756 | 6  | 00756 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo
 766 | 6  | 00766 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 766 | 6  | 00766 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo
 776 | 6  | 00776 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 776 | 6  | 00776 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo
 786 | 6  | 00786 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 786 | 6  | 00786 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo
 796 | 6  | 00796 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 796 | 6  | 00796 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo
 806 | 6  | 00806 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 806 | 6  | 00806 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 816 | 6  | 00816 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 816 | 6  | 00816 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
 826 | 6  | 00826 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 826 | 6  | 00826 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo
 836 | 6  | 00836 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 836 | 6  | 00836 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo
 846 | 6  | 00846 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 846 | 6  | 00846 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo
 856 | 6  | 00856 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 856 | 6  | 00856 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo
 866 | 6  | 00866 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 866 | 6  | 00866 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo
 876 | 6  | 00876 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 876 | 6  | 00876 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo
 886 | 6  | 00886 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 886 | 6  | 00886 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo
 896 | 6  | 00896 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 896 | 6  | 00896 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo
 906 | 6  | 00906 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 906 | 6  | 00906 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 916 | 6  | 00916 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 916 | 6  | 00916 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
 926 | 6  | 00926 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 926 | 6  | 00926 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo
 936 | 6  | 00936 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 936 | 6  | 00936 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo
 946 | 6  | 00946 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 946 | 6  | 00946 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo
 956 | 6  | 00956 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 956 | 6  | 00956 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo
 966 | 6  | 00966 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 966 | 6  | 00966 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo
 976 | 6  | 00976 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 976 | 6  | 00976 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo
 986 | 6  | 00986 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 986 | 6  | 00986 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo
 996 | 6  | 00996 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 996 | 6  | 00996 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo
(100 rows)

-- bug before 9.3.5 due to sloppy handling of remote-estimate parameters
SELECT * FROM ft1 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft2 WHERE c1 < 5));
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
 2  | 2  | 00002 | 1970-01-03 00:00:00.000000 -08:00 | 1970-01-03 00:00:00.000000 | 2  | 2          | foo
 3  | 3  | 00003 | 1970-01-04 00:00:00.000000 -08:00 | 1970-01-04 00:00:00.000000 | 3  | 3          | foo
 4  | 4  | 00004 | 1970-01-05 00:00:00.000000 -08:00 | 1970-01-05 00:00:00.000000 | 4  | 4          | foo
(4 rows)

SELECT * FROM ft2 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft1 WHERE c1 < 5));
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
 2  | 2  | 00002 | 1970-01-03 00:00:00.000000 -08:00 | 1970-01-03 00:00:00.000000 | 2  | 2          | foo
 3  | 3  | 00003 | 1970-01-04 00:00:00.000000 -08:00 | 1970-01-04 00:00:00.000000 | 3  | 3          | foo
 4  | 4  | 00004 | 1970-01-05 00:00:00.000000 -08:00 | 1970-01-05 00:00:00.000000 | 4  | 4          | foo
(4 rows)

-- we should not push order by clause with volatile expressions or unsafe
-- collations
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, random();
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8, (random())
   Sort Key: ft2.c1, (random())
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8, random()
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(6 rows)

EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8, ((c3)::varchar2(1024))
   Sort Key: ft2.c1, ft2.c3 COLLATE "C"
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8, c3
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(6 rows)

-- user-defined operator/function
CREATE FUNCTION postgres_fdw_abs(number(38,0)) RETURNS int AS $$
BEGIN
RETURN abs($1);
END
$$ LANGUAGE plpgsql IMMUTABLE;
/
CREATE OPERATOR === (
    LEFTARG = number(38,0),
    RIGHTARG = number(38,0),
    PROCEDURE = sys.number_eq,
    COMMUTATOR = ===
);
-- built-in operators and functions can be shipped for remote execution
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: ((t1.c1)::binary_double = (abs((t1.c2)::pg_catalog.float8))::binary_double)
         Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
 count 
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = t1.c2)
         Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
 count 
-------
     9
(1 row)

-- by default, user-defined ones cannot
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = (postgres_fdw_abs(t1.c2))::number)
         Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- ORDER BY can be shipped, though
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8
         Sort Key: t1.c2
         ->  Foreign Scan on public.ft1 t1
               Output: c1, c2, c3, c4, c5, c6, c7, c8
               Filter: (t1.c1 === t1.c2)
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(9 rows)

SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

-- but let's put them in an extension ...
ALTER EXTENSION postgres_fdw ADD FUNCTION postgres_fdw_abs(number(38,0));
ALTER EXTENSION postgres_fdw ADD OPERATOR === (number(38,0), number(38,0));
ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- ... now they can be shipped
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = (postgres_fdw_abs(t1.c2))::number)
         Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Relations: Aggregate on (public.ft1 t1)
   Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
(4 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- and both ORDER BY and LIMIT can be shipped
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8
         Sort Key: t1.c2
         ->  Foreign Scan on public.ft1 t1
               Output: c1, c2, c3, c4, c5, c6, c7, c8
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
(8 rows)

SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

-- Test CASE pushdown
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1,c2,c3 FROM ft2 WHERE CASE WHEN c1 > 990 THEN c1 END < 1000 ORDER BY c1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3
   Sort Key: ft2.c1
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3
         Filter: (CASE WHEN (ft2.c1 > '990'::number) THEN ft2.c1 ELSE NULL::number END < '1000'::number)
         Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

SELECT c1,c2,c3 FROM ft2 WHERE CASE WHEN c1 > 990 THEN c1 END < 1000 ORDER BY c1;
 c1  | c2 |  c3   
-----+----+-------
 991 | 1  | 00991
 992 | 2  | 00992
 993 | 3  | 00993
 994 | 4  | 00994
 995 | 5  | 00995
 996 | 6  | 00996
 997 | 7  | 00997
 998 | 8  | 00998
 999 | 9  | 00999
(9 rows)

-- Nested CASE
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1,c2,c3 FROM ft2 WHERE CASE CASE WHEN c2 > 0 THEN c2 END WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END > 600 ORDER BY c1;
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3
   Sort Key: ft2.c1
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3
         Filter: (CASE CASE WHEN (ft2.c2 > '0'::number) THEN ft2.c2 ELSE NULL::number END WHEN '100'::number THEN '601'::number WHEN ft2.c2 THEN ft2.c2 ELSE '0'::number END > '600'::number)
         Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

SELECT c1,c2,c3 FROM ft2 WHERE CASE CASE WHEN c2 > 0 THEN c2 END WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END > 600 ORDER BY c1;
 c1 | c2 | c3 
----+----+----
(0 rows)

-- CASE arg WHEN
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE c1 > (CASE mod(c1, 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END);
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (ft1.c1 > (CASE mod((ft1.c1)::pg_catalog.numeric, '4'::pg_catalog.numeric) WHEN '0'::pg_catalog.numeric THEN 1 WHEN '2'::pg_catalog.numeric THEN 50 ELSE 100 END)::number)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

-- CASE cannot be pushed down because of unshippable arg clause
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE c1 > (CASE random()::integer WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (ft1.c1 > (CASE (random())::pg_catalog.int4 WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END)::number)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

-- these are shippable
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE CASE c6 WHEN 'foo' THEN true ELSE c3 < 'bar' END;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: CASE ft1.c6 WHEN 'foo'::varchar2 THEN true ELSE (ft1.c3 < 'bar'::varchar2) END
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE CASE c3 WHEN c6 THEN true ELSE c3 < 'bar' END;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: CASE ft1.c3 WHEN ft1.c6 THEN true ELSE (ft1.c3 < 'bar'::varchar2) END
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

-- but this is not because of collation
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE CASE c3 COLLATE "C" WHEN c6 THEN true ELSE c3 < 'bar' END;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: CASE (ft1.c3)::varchar2(1024) WHEN ft1.c6 THEN true ELSE (ft1.c3 < 'bar'::varchar2) END
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

-- a regconfig constant referring to this text search configuration
-- is initially unshippable
CREATE TEXT SEARCH CONFIGURATION public.custom_search
  (COPY = pg_catalog.english);
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, to_tsvector('custom_search'::regconfig, (c3)::text)
   Filter: ((ft1.c1 = '642'::number) AND (length(to_tsvector('custom_search'::regconfig, (ft1.c3)::text)) > 0))
   Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
(4 rows)

SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
 c1  | to_tsvector 
-----+-------------
 642 | '00642':1
(1 row)

-- but if it's in a shippable extension, it can be shipped
ALTER EXTENSION postgres_fdw ADD TEXT SEARCH CONFIGURATION public.custom_search;
-- however, that doesn't flush the shippability cache, so do a quick reconnect
\c -
EXPLAIN (VERBOSE, COSTS OFF)
SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1
   Output: c1, to_tsvector('custom_search'::regconfig, (c3)::text)
   Filter: (ft1.c1 = '642'::number)
   Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1" WHERE ((length(to_tsvector('public.custom_search'::regconfig, c3)) > 0))
(4 rows)

SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
 c1  | to_tsvector 
-----+-------------
 642 | '00642':1
(1 row)

-- ===================================================================
-- JOIN queries
-- ===================================================================
-- Analyze ft4 and ft5 so that we have better statistics. These tables do not
-- have use_remote_estimate set.
ANALYZE ft4;
ANALYZE ft5;
-- join two tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3
                           Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
(16 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.c1, t2.c2, t3.c3, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
               ->  Hash
                     Output: t1.c1, t1.c3, t3.c3, t3.c1
                     ->  Hash Join
                           Output: t1.c1, t1.c3, t3.c3, t3.c1
                           Hash Cond: (t1.c1 = t3.c1)
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3
                                 Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
                           ->  Hash
                                 Output: t3.c3, t3.c1
                                 ->  Foreign Scan on public.ft4 t3
                                       Output: t3.c3, t3.c1
                                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(24 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 | 2  | AAA022
 24 | 4  | AAA024
 26 | 6  | AAA026
 28 | 8  | AAA028
 30 | 0  | AAA030
 32 | 2  | AAA032
 34 | 4  | AAA034
 36 | 6  | AAA036
 38 | 8  | AAA038
 40 | 0  | AAA040
(10 rows)

-- left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Left Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft4 t1
                     Output: t1.c1, t1.c2, t1.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 22 | 
 24 | 24
 26 | 
 28 | 
 30 | 30
 32 | 
 34 | 
 36 | 36
 38 | 
 40 | 
(10 rows)

-- left outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Right Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t1.c1)
         ->  Hash Left Join
               Output: t2.c2, t2.c1, t3.c3
               Hash Cond: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
               ->  Hash
                     Output: t3.c3, t3.c1
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.c3, t3.c1
                           Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
         ->  Hash
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 | 1  | 
 12 | 2  | AAA012
 13 | 3  | 
 14 | 4  | AAA014
 15 | 5  | 
 16 | 6  | AAA016
 17 | 7  | 
 18 | 8  | AAA018
 19 | 9  | 
 20 | 0  | AAA020
(10 rows)

-- left outer join + placement of clauses.
-- clauses within the nullable side are not pulled up, but top level clause on
-- non-nullable side is pushed into non-nullable side
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Join Filter: (t1.c1 = ft5.c1)
   ->  Foreign Scan on public.ft4 t1
         Output: t1.c1, t1.c2, t1.c3
         Filter: (t1.c1 < '10'::number)
         Remote SQL: SELECT c1, c2 FROM "S 1"."T 3"
   ->  Materialize
         Output: ft5.c1, ft5.c2
         ->  Foreign Scan on public.ft5
               Output: ft5.c1, ft5.c2
               Filter: (ft5.c1 < '10'::number)
               Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(13 rows)

SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
 2  | 3  |    | 
 4  | 5  |    | 
 6  | 7  | 6  | 7
 8  | 9  |    | 
(4 rows)

-- clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
                        QUERY PLAN                        
----------------------------------------------------------
 Nested Loop Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Join Filter: (t1.c1 = ft5.c1)
   Filter: ((ft5.c1 < '10'::number) OR (ft5.c1 IS NULL))
   ->  Foreign Scan on public.ft4 t1
         Output: t1.c1, t1.c2, t1.c3
         Filter: (t1.c1 < '10'::number)
         Remote SQL: SELECT c1, c2 FROM "S 1"."T 3"
   ->  Materialize
         Output: ft5.c1, ft5.c2
         ->  Foreign Scan on public.ft5
               Output: ft5.c1, ft5.c2
               Filter: (ft5.c1 < '10'::number)
               Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(14 rows)

SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
 2  | 3  |    | 
 4  | 5  |    | 
 6  | 7  | 6  | 7
 8  | 9  |    | 
(4 rows)

-- right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t2.c1, t1.c1
         ->  Hash Left Join
               Output: t1.c1, t2.c1
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft4 t2
                     Output: t2.c1, t2.c2, t2.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: t1.c1
                     ->  Foreign Scan on public.ft5 t1
                           Output: t1.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
    | 22
 24 | 24
    | 26
    | 28
 30 | 30
    | 32
    | 34
 36 | 36
    | 38
    | 40
(10 rows)

-- right outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Right Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft2 t1
               Output: t1.c1
               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t2.c2, t2.c1
               ->  Hash Right Join
                     Output: t3.c3, t2.c2, t2.c1
                     Hash Cond: (t2.c1 = t3.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
                     ->  Hash
                           Output: t3.c3, t3.c1
                           ->  Foreign Scan on public.ft4 t3
                                 Output: t3.c3, t3.c1
                                 Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 | 2  | AAA022
 24 | 4  | AAA024
 26 | 6  | AAA026
 28 | 8  | AAA028
 30 | 0  | AAA030
 32 | 2  | AAA032
 34 | 4  | AAA034
 36 | 6  | AAA036
 38 | 8  | AAA038
 40 | 0  | AAA040
(10 rows)

-- full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft4 t1
                     Output: t1.c1, t1.c2, t1.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
 c1  | c1 
-----+----
 92  | 
 94  | 
 96  | 96
 98  | 
 100 | 
     | 3
     | 9
     | 15
     | 21
     | 27
(10 rows)

-- full outer join with restrictions on the joining relations
-- a. the joining relations are both base relations
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft5.c1
   Sort Key: ft4.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1, ft4.c2, ft4.c3
               Filter: ((ft4.c1 >= '50'::number) AND (ft4.c1 <= '60'::number))
               Remote SQL: SELECT c1 FROM "S 1"."T 3"
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1
                     Filter: ((ft5.c1 >= '50'::number) AND (ft5.c1 <= '60'::number))
                     Remote SQL: SELECT c1 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
 50 | 
 52 | 
 54 | 54
 56 | 
 58 | 
 60 | 60
    | 51
    | 57
(8 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Limit
   Output: 1
   ->  Merge Full Join
         Output: 1
         ->  Foreign Scan on public.ft4
               Output: ft4.c1, ft4.c2, ft4.c3
               Filter: ((ft4.c1 >= '50'::number) AND (ft4.c1 <= '60'::number))
               Remote SQL: SELECT c1 FROM "S 1"."T 3"
         ->  Materialize
               Output: ft5.c1, ft5.c2, ft5.c3
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1, ft5.c2, ft5.c3
                     Filter: ((ft5.c1 >= '50'::number) AND (ft5.c1 <= '60'::number))
                     Remote SQL: SELECT c1 FROM "S 1"."T 4"
(14 rows)

SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
 ?column? 
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

-- b. one of the joining relations is a base relation and the other is a join
-- relation
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, t2.c1, t3.c1
   Sort Key: ft4.c1, t2.c1, t3.c1
   ->  Hash Full Join
         Output: ft4.c1, t2.c1, t3.c1
         Hash Cond: (ft4.c1 = t2.c1)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1, ft4.c2, ft4.c3
               Filter: ((ft4.c1 >= '50'::number) AND (ft4.c1 <= '60'::number))
               Remote SQL: SELECT c1 FROM "S 1"."T 3"
         ->  Hash
               Output: t2.c1, t3.c1
               ->  Hash Right Join
                     Output: t2.c1, t3.c1
                     Hash Cond: (t3.c1 = t2.c1)
                     ->  Foreign Scan on public.ft5 t3
                           Output: t3.c1, t3.c2, t3.c3
                           Remote SQL: SELECT c1 FROM "S 1"."T 4"
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft4 t2
                                 Output: t2.c1
                                 Filter: ((t2.c1 >= '50'::number) AND (t2.c1 <= '60'::number))
                                 Remote SQL: SELECT c1 FROM "S 1"."T 3"
(24 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 | 
 52 | 52 | 
 54 | 54 | 54
 56 | 56 | 
 58 | 58 | 
 60 | 60 | 60
(6 rows)

-- c. test deparsing the remote query as nested subqueries
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft4_1.c1, ft5.c1
   Sort Key: ft4.c1, ft4_1.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft4_1.c1, ft5.c1
         Hash Cond: (ft4_1.c1 = ft4.c1)
         ->  Hash Full Join
               Output: ft4_1.c1, ft5.c1
               Hash Cond: (ft4_1.c1 = ft5.c1)
               Filter: ((ft4_1.c1 IS NULL) OR (ft4_1.c1 IS NOT NULL))
               ->  Foreign Scan on public.ft4 ft4_1
                     Output: ft4_1.c1, ft4_1.c2, ft4_1.c3
                     Filter: ((ft4_1.c1 >= '50'::number) AND (ft4_1.c1 <= '60'::number))
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c1
                           Filter: ((ft5.c1 >= '50'::number) AND (ft5.c1 <= '60'::number))
                           Remote SQL: SELECT c1 FROM "S 1"."T 4"
         ->  Hash
               Output: ft4.c1
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1
                     Filter: ((ft4.c1 >= '50'::number) AND (ft4.c1 <= '60'::number))
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
(26 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 | 
 52 | 52 | 
 54 | 54 | 54
 56 | 56 | 
 58 | 58 | 
 60 | 60 | 60
    |    | 51
    |    | 57
(8 rows)

-- d. test deparsing rowmarked relations as subqueries
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 LockRows
   Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".ctid, ft4.*, ft5.*
   ->  Sort
         Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".ctid, ft4.*, ft5.*
         Sort Key: ft4.c1, ft5.c1
         ->  Nested Loop
               Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".ctid, ft4.*, ft5.*
               ->  Seq Scan on "S 1"."T 3"
                     Output: "T 3".c1, "T 3".ctid
                     Filter: ("T 3".c1 = '50'::number)
               ->  Hash Full Join
                     Output: ft4.c1, ft4.*, ft5.c1, ft5.*
                     Hash Cond: (ft4.c1 = ft5.c1)
                     Filter: ((ft4.c1 IS NULL) OR (ft4.c1 IS NOT NULL))
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1, ft4.*
                           Filter: ((ft4.c1 >= '50'::number) AND (ft4.c1 <= '60'::number))
                           Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
                     ->  Hash
                           Output: ft5.c1, ft5.*
                           ->  Foreign Scan on public.ft5
                                 Output: ft5.c1, ft5.*
                                 Filter: ((ft5.c1 >= '50'::number) AND (ft5.c1 <= '60'::number))
                                 Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
(24 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
 c1 | a  | b  
----+----+----
 50 | 50 | 
 50 | 52 | 
 50 | 54 | 54
 50 | 56 | 
 50 | 58 | 
 50 | 60 | 60
 50 |    | 51
 50 |    | 57
(8 rows)

-- full outer join + inner join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t3.c1
   ->  Sort
         Output: t1.c1, t2.c1, t3.c1
         Sort Key: t1.c1, t2.c1, t3.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1, t3.c1
               Hash Cond: (t2.c1 = t3.c1)
               ->  Nested Loop
                     Output: t1.c1, t2.c1
                     Join Filter: (t1.c1 = (t2.c1 + '1'::number))
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1, t2.c2, t2.c3
                           Remote SQL: SELECT c1 FROM "S 1"."T 4"
                     ->  Materialize
                           Output: t1.c1
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.c1
                                 Filter: ((t1.c1 >= '50'::number) AND (t1.c1 <= '60'::number))
                                 Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: t3.c1
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
(25 rows)

SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
 c1 | c1 | c1 
----+----+----
 52 | 51 | 
 58 | 57 | 
    |    | 2
    |    | 4
    |    | 6
    |    | 8
    |    | 10
    |    | 12
    |    | 14
    |    | 16
(10 rows)

-- full outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 | 1  | 
 12 | 2  | AAA012
 13 | 3  | 
 14 | 4  | AAA014
 15 | 5  | 
 16 | 6  | AAA016
 17 | 7  | 
 18 | 8  | AAA018
 19 | 9  | 
 20 | 0  | AAA020
(10 rows)

-- full outer join + right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Right Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft2 t1
               Output: t1.c1
               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t2.c2, t2.c1
               ->  Hash Right Join
                     Output: t3.c3, t2.c2, t2.c1
                     Hash Cond: (t2.c1 = t3.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
                     ->  Hash
                           Output: t3.c3, t3.c1
                           ->  Foreign Scan on public.ft4 t3
                                 Output: t3.c3, t3.c1
                                 Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 | 2  | AAA022
 24 | 4  | AAA024
 26 | 6  | AAA026
 28 | 8  | AAA028
 30 | 0  | AAA030
 32 | 2  | AAA032
 34 | 4  | AAA034
 36 | 6  | AAA036
 38 | 8  | AAA038
 40 | 0  | AAA040
(10 rows)

-- right outer join + full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t1.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
               ->  Materialize
                     Output: t1.c1
                     ->  Foreign Scan on public.ft2 t1
                           Output: t1.c1
                           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 | 1  | 
 12 | 2  | AAA012
 13 | 3  | 
 14 | 4  | AAA014
 15 | 5  | 
 16 | 6  | AAA016
 17 | 7  | 
 18 | 8  | AAA018
 19 | 9  | 
 20 | 0  | AAA020
(10 rows)

-- full outer join + left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Left Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 | 1  | 
 12 | 2  | AAA012
 13 | 3  | 
 14 | 4  | AAA014
 15 | 5  | 
 16 | 6  | AAA016
 17 | 7  | 
 18 | 8  | AAA018
 19 | 9  | 
 20 | 0  | AAA020
(10 rows)

-- left outer join + full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 | 1  | 
 12 | 2  | AAA012
 13 | 3  | 
 14 | 4  | AAA014
 15 | 5  | 
 16 | 6  | AAA016
 17 | 7  | 
 18 | 8  | AAA018
 19 | 9  | 
 20 | 0  | AAA020
(10 rows)

SET enable_memoize TO off;
-- right outer join + left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Left Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t1.c1)
         ->  Hash Left Join
               Output: t2.c2, t2.c1, t3.c3
               Hash Cond: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
               ->  Hash
                     Output: t3.c3, t3.c1
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.c3, t3.c1
                           Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
         ->  Hash
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 | 1  | 
 12 | 2  | AAA012
 13 | 3  | 
 14 | 4  | AAA014
 15 | 5  | 
 16 | 6  | AAA016
 17 | 7  | 
 18 | 8  | AAA018
 19 | 9  | 
 20 | 0  | AAA020
(10 rows)

RESET enable_memoize;
-- left outer join + right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Right Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Merge Join
               Output: t1.c1, t2.c2, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft2 t1
                           Output: t1.c1
                           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Sort
                     Output: t2.c2, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(25 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 | 2  | AAA022
 24 | 4  | AAA024
 26 | 6  | AAA026
 28 | 8  | AAA028
 30 | 0  | AAA030
 32 | 2  | AAA032
 34 | 4  | AAA034
 36 | 6  | AAA036
 38 | 8  | AAA038
 40 | 0  | AAA040
(10 rows)

-- full outer join + WHERE clause, only matched rows
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               Filter: ((t1.c1 = t2.c1) OR (t1.c1 IS NULL))
               ->  Foreign Scan on public.ft4 t1
                     Output: t1.c1, t1.c2, t1.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 4"
(17 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 66 | 66
 72 | 72
 78 | 78
 84 | 84
 90 | 90
 96 | 96
    | 3
    | 9
    | 15
    | 21
(10 rows)

-- full outer join + WHERE clause with shippable extensions set
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t1.c3
         Hash Cond: (t2.c1 = t1.c1)
         Filter: (postgres_fdw_abs(t1.c1) > 0)
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c2, t2.c1
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t1.c1, t1.c3
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3
                     Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
(14 rows)

ALTER SERVER loopback OPTIONS (DROP extensions);
-- full outer join + WHERE clause with shippable extensions not set
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t1.c3
         Hash Cond: (t2.c1 = t1.c1)
         Filter: (postgres_fdw_abs(t1.c1) > 0)
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c2, t2.c1
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t1.c1, t1.c3
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3
                     Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
(14 rows)

ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" FOR UPDATE
(18 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" FOR UPDATE
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" FOR UPDATE
(18 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join two tables with FOR SHARE clause
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" FOR SHARE
(18 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" FOR SHARE
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" FOR SHARE
(18 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join in CTE
EXPLAIN (VERBOSE, COSTS OFF)
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: t.c1_1, t.c2_1, t.c1_3
   CTE t
     ->  Hash Join
           Output: t1.c1, t1.c3, t2.c1
           Hash Cond: (t2.c1 = t1.c1)
           ->  Foreign Scan on public.ft2 t2
                 Output: t2.c1
                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
           ->  Hash
                 Output: t1.c1, t1.c3
                 ->  Foreign Scan on public.ft1 t1
                       Output: t1.c1, t1.c3
                       Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
   ->  Sort
         Output: t.c1_1, t.c2_1, t.c1_3
         Sort Key: t.c1_3, t.c1_1
         ->  CTE Scan on t
               Output: t.c1_1, t.c2_1, t.c1_3
(19 rows)

WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
 c1_1 | c2_1 
------+------
 101  | 101
 102  | 102
 103  | 103
 104  | 104
 105  | 105
 106  | 106
 107  | 107
 108  | 108
 109  | 109
 110  | 110
(10 rows)

-- ctid with whole-row reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.ctid, t1, t2, t1.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
   ->  Sort
         Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.*, t2.c1
                     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
               ->  Hash
                     Output: t1.ctid, t1.*, t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.ctid, t1.*, t1.c1, t1.c3
                           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1"
(16 rows)

-- SEMI JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Join
               Output: t1.c1
               Inner Unique: true
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t2.c1
                     ->  HashAggregate
                           Output: t2.c1
                           Group Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(20 rows)

SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- ANTI JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Right Anti Join
               Output: t1.c1
               Hash Cond: (t2.c2 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2
                     Remote SQL: SELECT c2 FROM "S 1"."T 1"
               ->  Hash
                     Output: t1.c1
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1
                           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(16 rows)

SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
(10 rows)

-- CROSS JOIN can be pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop
               Output: t1.c1, t2.c1
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Materialize
                     Output: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1
                           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(15 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
 1  | 101
 1  | 102
 1  | 103
 1  | 104
 1  | 105
 1  | 106
 1  | 107
 1  | 108
 1  | 109
 1  | 110
(10 rows)

-- different server, not pushed down. No result expected.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1
         ->  Hash Join
               Output: t1.c1, t2.c1
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft6 t2
                     Output: t2.c1, t2.c2, t2.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 4"
               ->  Hash
                     Output: t1.c1
                     ->  Foreign Scan on public.ft5 t1
                           Output: t1.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1 
----+----
(0 rows)

-- unsafe join conditions (c8 has a UDT), not pushed down. Practically a CROSS
-- JOIN since c8 in both tables has same value.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c8 = t2.c8)
               ->  Sort
                     Output: t1.c1, t1.c8
                     Sort Key: t1.c8
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c8
                           Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
               ->  Sort
                     Output: t2.c1, t2.c8
                     Sort Key: t2.c8
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.c8
                           Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
(20 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
 1  | 101
 1  | 102
 1  | 103
 1  | 104
 1  | 105
 1  | 106
 1  | 107
 1  | 108
 1  | 109
 1  | 110
(10 rows)

-- unsafe conditions on one side (c8 has a UDT), not pushed down.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Right Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3
                           Filter: (t1.c8 = 'foo'::user_enum)
                           Remote SQL: SELECT "C 1", c3, c8 FROM "S 1"."T 1"
(17 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join where unsafe to pushdown condition in WHERE clause has a column not
-- in the SELECT clause. In this test unsafe clause needs to have column
-- references from both joining sides so that the clause is not pushed down
-- into one of the joining sides.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: ((t2.c1 = t1.c1) AND (t2.c8 = t1.c8))
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1, t2.c8
                     Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
               ->  Hash
                     Output: t1.c1, t1.c3, t1.c8
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3, t1.c8
                           Remote SQL: SELECT "C 1", c3, c8 FROM "S 1"."T 1"
(16 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- Aggregate after UNION, for testing setrefs
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, (avg((t1.c1 + t2.c1)))
   ->  Sort
         Output: t1.c1, (avg((t1.c1 + t2.c1)))
         Sort Key: t1.c1
         ->  HashAggregate
               Output: t1.c1, avg((t1.c1 + t2.c1))
               Group Key: t1.c1
               ->  HashAggregate
                     Output: t1.c1, t2.c1
                     Group Key: t1.c1, t2.c1
                     ->  Append
                           ->  Hash Join
                                 Output: t1.c1, t2.c1
                                 Hash Cond: (t2.c1 = t1.c1)
                                 ->  Foreign Scan on public.ft2 t2
                                       Output: t2.c1
                                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                                 ->  Hash
                                       Output: t1.c1
                                       ->  Foreign Scan on public.ft1 t1
                                             Output: t1.c1
                                             Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                           ->  Hash Join
                                 Output: t1_1.c1, t2_1.c1
                                 Hash Cond: (t2_1.c1 = t1_1.c1)
                                 ->  Foreign Scan on public.ft2 t2_1
                                       Output: t2_1.c1
                                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                                 ->  Hash
                                       Output: t1_1.c1
                                       ->  Foreign Scan on public.ft1 t1_1
                                             Output: t1_1.c1
                                             Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(34 rows)

SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
 t1c1 |         avg          
------+----------------------
 101  | 202.0000000000000000
 102  | 204.0000000000000000
 103  | 206.0000000000000000
 104  | 208.0000000000000000
 105  | 210.0000000000000000
 106  | 212.0000000000000000
 107  | 214.0000000000000000
 108  | 216.0000000000000000
 109  | 218.0000000000000000
 110  | 220.0000000000000000
(10 rows)

-- join with lateral reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1"
   ->  Nested Loop
         Output: t1."C 1"
         ->  Index Scan using t1_pkey on "S 1"."T 1" t1
               Output: t1."C 1", t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
         ->  Memoize
               Cache Key: t1.c2
               Cache Mode: binary
               ->  Subquery Scan on q
                     ->  HashAggregate
                           Output: t2.c1, t3.c1
                           Group Key: t2.c1
                           ->  Hash Join
                                 Output: t2.c1, t3.c1
                                 Hash Cond: (t3.c1 = t2.c1)
                                 ->  Foreign Scan on public.ft2 t3
                                       Output: t3.c1
                                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                                 ->  Hash
                                       Output: t2.c1
                                       ->  Foreign Scan on public.ft1 t2
                                             Output: t2.c1
                                             Filter: (t2.c2 = t1.c2)
                                             Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(25 rows)

SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
 C 1 
-----
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
(10 rows)

-- non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- unable to push {ft1, ft2}
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Nested Loop Left Join
   Output: (13), ft2.c1
   Join Filter: ('13'::number = ft2.c1)
   ->  Foreign Scan on public.ft2
         Output: ft2.c1
         Filter: ((ft2.c1 >= '10'::number) AND (ft2.c1 <= '15'::number))
         Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
   ->  Materialize
         Output: (13)
         ->  Foreign Scan on public.ft1
               Output: 13
               Filter: (ft1.c1 = '13'::number)
               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(13 rows)

SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
 a  | c1 
----+----
    | 10
    | 11
    | 12
 13 | 13
    | 14
    | 15
(6 rows)

-- ok to push {ft1, ft2} but not {ft1, ft2, ft4}
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Hash Right Join
   Output: ft4.c1, (13), ft1.c1, ft2.c1
   Hash Cond: (ft1.c1 = ft4.c1)
   ->  Nested Loop
         Output: ft1.c1, ft2.c1, 13
         ->  Foreign Scan on public.ft1
               Output: ft1.c1
               Filter: (ft1.c1 = '12'::number)
               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Foreign Scan on public.ft2
               Output: ft2.c1
               Filter: (ft2.c1 = '12'::number)
               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
   ->  Hash
         Output: ft4.c1
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               Filter: ((ft4.c1 >= '10'::number) AND (ft4.c1 <= '15'::number))
               Remote SQL: SELECT c1 FROM "S 1"."T 3"
(19 rows)

SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
 c1 | a  | b  | c  
----+----+----+----
 12 | 13 | 12 | 12
 10 |    |    | 
 14 |    |    | 
(3 rows)

-- join with nullable side with some columns with null values
UPDATE ft5 SET c3 = null where c1 % 9 = 0;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
   Sort Key: ft5.c1
   ->  Hash Join
         Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
         Hash Cond: (ft5.c1 = ft4.c1)
         ->  Foreign Scan on public.ft5
               Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
               Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
         ->  Hash
               Output: ft4.c1, ft4.c2
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1, ft4.c2
                     Filter: ((ft4.c1 >= '10'::number) AND (ft4.c1 <= '30'::number))
                     Remote SQL: SELECT c1, c2 FROM "S 1"."T 3"
(15 rows)

SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
      ft5       | c1 | c2 |   c3   | c1 | c2 
----------------+----+----+--------+----+----
 (12,13,AAA012) | 12 | 13 | AAA012 | 12 | 13
 (18,19,)       | 18 | 19 |        | 18 | 19
 (24,25,AAA024) | 24 | 25 | AAA024 | 24 | 25
 (30,31,AAA030) | 30 | 31 | AAA030 | 30 | 31
(4 rows)

-- multi-way join involving multiple merge joins
-- (this case used to have EPQ-related planning problems)
CREATE TABLE local_tbl (c1 number(38,0) NOT NULL, c2 number(38,0) NOT NULL, c3 varchar2(1024), CONSTRAINT local_tbl_pkey PRIMARY KEY (c1));
INSERT INTO local_tbl SELECT id, id % 10, to_char(id, 'FM0000') FROM generate_series(1, 1000) id;
ANALYZE local_tbl;
SET enable_nestloop TO false;
SET enable_hashjoin TO false;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
                                                                                                                                                          QUERY PLAN                                                                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft4.c1, ft4.c2, ft4.c3, ft5.c1, ft5.c2, ft5.c3, local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.ctid
   ->  Merge Join
         Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft4.c1, ft4.c2, ft4.c3, ft5.c1, ft5.c2, ft5.c3, local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.ctid
         Merge Cond: (ft4.c1 = ft1.c2)
         ->  Merge Join
               Output: ft4.c1, ft4.c2, ft4.c3, ft4.*, ft5.c1, ft5.c2, ft5.c3, ft5.*, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
               Merge Cond: (local_tbl.c1 = ft4.c1)
               ->  Index Scan using local_tbl_pkey on public.local_tbl
                     Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
               ->  Sort
                     Output: ft4.c1, ft4.c2, ft4.c3, ft4.*, ft5.c1, ft5.c2, ft5.c3, ft5.*
                     Sort Key: ft4.c1
                     ->  Foreign Scan
                           Output: ft4.c1, ft4.c2, ft4.c3, ft4.*, ft5.c1, ft5.c2, ft5.c3, ft5.*
                           Filter: (ft4.c1 = ft5.c1)
                           Relations: (public.ft4) INNER JOIN (public.ft5)
                           Remote SQL: SELECT r3.c1, r3.c2, r3.c3, CASE WHEN (r3.*)::text IS NOT NULL THEN ROW(r3.c1, r3.c2, r3.c3) END, r4.c1, r4.c2, r4.c3, CASE WHEN (r4.*)::text IS NOT NULL THEN ROW(r4.c1, r4.c2, r4.c3) END FROM ("S 1"."T 3" r3 INNER JOIN "S 1"."T 4" r4 ON (TRUE)) FOR UPDATE OF r3 FOR UPDATE OF r4
                           ->  Merge Join
                                 Output: ft4.c1, ft4.c2, ft4.c3, ft4.*, ft5.c1, ft5.c2, ft5.c3, ft5.*
                                 Merge Cond: (ft4.c1 = ft5.c1)
                                 ->  Sort
                                       Output: ft4.c1, ft4.c2, ft4.c3, ft4.*
                                       Sort Key: ft4.c1
                                       ->  Foreign Scan on public.ft4
                                             Output: ft4.c1, ft4.c2, ft4.c3, ft4.*
                                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3" FOR UPDATE
                                 ->  Sort
                                       Output: ft5.c1, ft5.c2, ft5.c3, ft5.*
                                       Sort Key: ft5.c1
                                       ->  Foreign Scan on public.ft5
                                             Output: ft5.c1, ft5.c2, ft5.c3, ft5.*
                                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4" FOR UPDATE
         ->  Sort
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.*
               Sort Key: ft1.c2
               ->  Merge Join
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.*
                     Merge Cond: (ft1.c1 = ft2.c1)
                     ->  Sort
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*
                           Sort Key: ft1.c1
                           ->  Foreign Scan on public.ft1
                                 Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*
                                 Filter: (ft1.c1 < '100'::number)
                                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" FOR UPDATE
                     ->  Sort
                           Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.*
                           Sort Key: ft2.c1
                           ->  Foreign Scan on public.ft2
                                 Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.*
                                 Filter: (ft2.c1 < '100'::number)
                                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" FOR UPDATE
(53 rows)

SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  | c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  | c1 | c2 |   c3   | c1 | c2 |   c3   | c1 | c2 |  c3  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----+----+----+-------+-----------------------------------+----------------------------+----+------------+-----+----+----+--------+----+----+--------+----+----+------
 96 | 6  | 00096 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 96 | 6  | 00096 | 1970-04-07 00:00:00.000000 -08:00 | 1970-04-07 00:00:00.000000 | 6  | 6          | foo | 6  | 7  | AAA006 | 6  | 7  | AAA006 | 6  | 6  | 0006
 46 | 6  | 00046 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 46 | 6  | 00046 | 1970-02-16 00:00:00.000000 -08:00 | 1970-02-16 00:00:00.000000 | 6  | 6          | foo | 6  | 7  | AAA006 | 6  | 7  | AAA006 | 6  | 6  | 0006
 26 | 6  | 00026 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 26 | 6  | 00026 | 1970-01-27 00:00:00.000000 -08:00 | 1970-01-27 00:00:00.000000 | 6  | 6          | foo | 6  | 7  | AAA006 | 6  | 7  | AAA006 | 6  | 6  | 0006
 56 | 6  | 00056 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 56 | 6  | 00056 | 1970-02-26 00:00:00.000000 -08:00 | 1970-02-26 00:00:00.000000 | 6  | 6          | foo | 6  | 7  | AAA006 | 6  | 7  | AAA006 | 6  | 6  | 0006
 66 | 6  | 00066 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 66 | 6  | 00066 | 1970-03-08 00:00:00.000000 -08:00 | 1970-03-08 00:00:00.000000 | 6  | 6          | foo | 6  | 7  | AAA006 | 6  | 7  | AAA006 | 6  | 6  | 0006
 16 | 6  | 00016 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 16 | 6  | 00016 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo | 6  | 7  | AAA006 | 6  | 7  | AAA006 | 6  | 6  | 0006
 76 | 6  | 00076 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 76 | 6  | 00076 | 1970-03-18 00:00:00.000000 -08:00 | 1970-03-18 00:00:00.000000 | 6  | 6          | foo | 6  | 7  | AAA006 | 6  | 7  | AAA006 | 6  | 6  | 0006
 86 | 6  | 00086 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 86 | 6  | 00086 | 1970-03-28 00:00:00.000000 -08:00 | 1970-03-28 00:00:00.000000 | 6  | 6          | foo | 6  | 7  | AAA006 | 6  | 7  | AAA006 | 6  | 6  | 0006
 6  | 6  | 00006 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 6  | 6  | 00006 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo | 6  | 7  | AAA006 | 6  | 7  | AAA006 | 6  | 6  | 0006
 36 | 6  | 00036 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 36 | 6  | 00036 | 1970-02-06 00:00:00.000000 -08:00 | 1970-02-06 00:00:00.000000 | 6  | 6          | foo | 6  | 7  | AAA006 | 6  | 7  | AAA006 | 6  | 6  | 0006
(10 rows)

RESET enable_nestloop;
RESET enable_hashjoin;
-- test that add_paths_with_pathkeys_for_rel() arranges for the epq_path to
-- return columns needed by the parent ForeignScan node
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM local_tbl LEFT JOIN (SELECT ft1.*, COALESCE(ft1.c3 || ft2.c3, 'foobar') FROM ft1 INNER JOIN ft2 ON (ft1.c1 = ft2.c1 AND ft1.c1 < 100)) ss ON (local_tbl.c1 = ss.c1) ORDER BY local_tbl.c1 FOR UPDATE OF local_tbl;
                                                                                                       QUERY PLAN                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, (COALESCE(((ft1.c3)::text || (ft2.c3)::text), 'foobar'::text)), local_tbl.ctid, ft1.*, ft2.*
   ->  Merge Left Join
         Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, (COALESCE(((ft1.c3)::text || (ft2.c3)::text), 'foobar'::text)), local_tbl.ctid, ft1.*, ft2.*
         Merge Cond: (local_tbl.c1 = ft1.c1)
         ->  Index Scan using local_tbl_pkey on public.local_tbl
               Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
         ->  Sort
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2.*, (COALESCE(((ft1.c3)::text || (ft2.c3)::text), 'foobar'::text))
               Sort Key: ft1.c1
               ->  Hash Join
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2.*, COALESCE(((ft1.c3)::text || (ft2.c3)::text), 'foobar'::text)
                     Hash Cond: (ft2.c1 = ft1.c1)
                     ->  Foreign Scan on public.ft2
                           Output: ft2.*, ft2.c1, ft2.c3
                           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
                     ->  Hash
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*
                           ->  Foreign Scan on public.ft1
                                 Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*
                                 Filter: (ft1.c1 < '100'::number)
                                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(22 rows)

ALTER SERVER loopback OPTIONS (DROP extensions);
ALTER SERVER loopback OPTIONS (ADD fdw_startup_cost '10000.0');
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM local_tbl LEFT JOIN (SELECT ft1.* FROM ft1 INNER JOIN ft2 ON (ft1.c1 = ft2.c1 AND ft1.c1 < 100 AND (ft1.c1 - postgres_fdw_abs(ft2.c2)) = 0)) ss ON (local_tbl.c3 = ss.c3) ORDER BY local_tbl.c1 FOR UPDATE OF local_tbl;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, local_tbl.ctid, ft1.*, ft2.*
   ->  Nested Loop Left Join
         Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, local_tbl.ctid, ft1.*, ft2.*
         Join Filter: (local_tbl.c3 = ft1.c3)
         ->  Index Scan using local_tbl_pkey on public.local_tbl
               Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
         ->  Materialize
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2.*
               ->  Hash Join
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2.*
                     Hash Cond: (ft2.c1 = ft1.c1)
                     Join Filter: ((ft1.c1 - (postgres_fdw_abs(ft2.c2))::number) = '0'::number)
                     ->  Foreign Scan on public.ft2
                           Output: ft2.*, ft2.c1, ft2.c2
                           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
                     ->  Hash
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*
                           ->  Foreign Scan on public.ft1
                                 Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.*
                                 Filter: (ft1.c1 < '100'::number)
                                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(22 rows)

ALTER SERVER loopback OPTIONS (DROP fdw_startup_cost);
ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
DROP TABLE local_tbl;
-- check join pushdown in situations where multiple userids are involved
CREATE ROLE regress_view_owner SUPERUSER;
CREATE USER MAPPING FOR regress_view_owner SERVER loopback;
GRANT SELECT ON ft4 TO regress_view_owner;
GRANT SELECT ON ft5 TO regress_view_owner;
CREATE VIEW v4 AS SELECT * FROM ft4;
CREATE VIEW v5 AS SELECT * FROM ft5;
ALTER VIEW v5 OWNER TO regress_view_owner;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, different view owners
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Hash Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Hash Cond: (ft4.c1 = ft5.c1)
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1, ft4.c2, ft4.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: ft5.c2, ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c2, ft5.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 | 
 24 | 25
 26 | 
 28 | 
 30 | 31
 32 | 
 34 | 
 36 | 37
 38 | 
 40 | 
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Hash Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Hash Cond: (ft4.c1 = ft5.c1)
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1, ft4.c2, ft4.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: ft5.c2, ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c2, ft5.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 | 
 24 | 25
 26 | 
 28 | 
 30 | 31
 32 | 
 34 | 
 36 | 37
 38 | 
 40 | 
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, view owner not current user
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Hash Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Hash Cond: (ft4.c1 = t2.c1)
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1, ft4.c2, ft4.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 | 
 24 | 25
 26 | 
 28 | 
 30 | 31
 32 | 
 34 | 
 36 | 37
 38 | 
 40 | 
(10 rows)

ALTER VIEW v4 OWNER TO CURRENT_USER;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Hash Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Hash Cond: (ft4.c1 = t2.c1)
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1, ft4.c2, ft4.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(16 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 | 
 24 | 25
 26 | 
 28 | 
 30 | 31
 32 | 
 34 | 
 36 | 37
 38 | 
 40 | 
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
-- cleanup
DROP OWNED BY regress_view_owner;
DROP ROLE regress_view_owner;
-- ===================================================================
-- Aggregate and grouping queries
-- ===================================================================
-- Simple aggregates
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number), c2
   ->  Sort
         Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), c2
         Sort Key: (count(ft1.c6)), (sum(ft1.c1))
         ->  HashAggregate
               Output: count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), c2
               Group Key: ft1.c2
               ->  Foreign Scan on public.ft1
                     Output: c6, c1, c2
                     Filter: (ft1.c2 < '5'::number)
                     Remote SQL: SELECT "C 1", c2, c6 FROM "S 1"."T 1"
(12 rows)

select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
 count |  sum  |         avg          | min | max  | stddev | sum2  
-------+-------+----------------------+-----+------+--------+-------
   100 | 49600 | 496.0000000000000000 | 1   | 991  | 0      | 49600
   100 | 49700 | 497.0000000000000000 | 2   | 992  | 0      | 49700
   100 | 49800 | 498.0000000000000000 | 3   | 993  | 0      | 49800
   100 | 49900 | 499.0000000000000000 | 4   | 994  | 0      | 49900
   100 | 50500 | 505.0000000000000000 | 0   | 1000 | 0      | 50500
(5 rows)

explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), (((sum(c1)) * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number)), c2
   ->  Result
         Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number), c2
         ->  Sort
               Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), c2
               Sort Key: (count(ft1.c6)), (sum(ft1.c1))
               ->  HashAggregate
                     Output: count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), c2
                     Group Key: ft1.c2
                     ->  Foreign Scan on public.ft1
                           Output: c6, c1, c2
                           Filter: (ft1.c2 < '5'::number)
                           Remote SQL: SELECT "C 1", c2, c6 FROM "S 1"."T 1"
(14 rows)

select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
 count |  sum  |         avg          | min | max | stddev | sum2  
-------+-------+----------------------+-----+-----+--------+-------
   100 | 49600 | 496.0000000000000000 | 1   | 991 | 0      | 49600
(1 row)

-- Aggregate is not pushed down as aggregation contains random()
explain (verbose, costs off)
select sum(c1 * (random() <= 1)::int) as sum, avg(c1) from ft1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum((c1 * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number)), avg(c1)
   ->  Foreign Scan on public.ft1
         Output: c1
         Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(5 rows)

-- Aggregate over join query
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(t1.c1), avg(t2.c1)
   ->  Nested Loop
         Output: t1.c1, t2.c1
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c2
               Filter: (t1.c2 = '6'::number)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Materialize
               Output: t2.c1, t2.c2
               ->  Foreign Scan on public.ft1 t2
                     Output: t2.c1, t2.c2
                     Filter: (t2.c2 = '6'::number)
                     Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(14 rows)

select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
 count |   sum   |         avg          
-------+---------+----------------------
 10000 | 5010000 | 501.0000000000000000
(1 row)

-- Not pushed down due to local conditions present in underneath input rel
explain (verbose, costs off)
select sum(t1.c1), count(t2.c1) from ft1 t1 inner join ft2 t2 on (t1.c1 = t2.c1) where ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(t1.c1), count(t2.c1)
   ->  Hash Join
         Output: t1.c1, t2.c1
         Hash Cond: (t2.c1 = t1.c1)
         Join Filter: (((((t1.c1 * t2.c1) / (t1.c1 * t2.c1)))::binary_double * (random())::binary_double) <= '1'::binary_double)
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c1
               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Hash
               Output: t1.c1
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(14 rows)

-- GROUP BY clause having expressions
explain (verbose, costs off)
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort
   Output: ((c2 / '2'::number)), ((sum(c2) * ((c2 / '2'::number))))
   Sort Key: ((ft1.c2 / '2'::number))
   ->  HashAggregate
         Output: ((c2 / '2'::number)), (sum(c2) * ((c2 / '2'::number)))
         Group Key: (ft1.c2 / '2'::number)
         ->  Foreign Scan on public.ft1
               Output: (c2 / '2'::number), c2
               Remote SQL: SELECT c2 FROM "S 1"."T 1"
(9 rows)

select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
        ?column?        |         ?column?         
------------------------+--------------------------
 0.00000000000000000000 | 0.00000000000000000000
 0.50000000000000000000 | 50.00000000000000000000
 1.00000000000000000000 | 200.00000000000000000000
 1.5000000000000000     | 450.0000000000000000
 2.0000000000000000     | 800.0000000000000000
 2.5000000000000000     | 1250.0000000000000000
 3.0000000000000000     | 1800.0000000000000000
 3.5000000000000000     | 2450.0000000000000000
 4.0000000000000000     | 3200.0000000000000000
 4.5000000000000000     | 4050.0000000000000000
(10 rows)

-- Aggregates in subquery are pushed down.
set enable_incremental_sort = off;
explain (verbose, costs off)
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Aggregate
   Output: count(ft1.c2), sum(ft1.c2)
   ->  Sort
         Output: ft1.c2, (sum(ft1.c1)), (sqrt((ft1.c1)::pg_catalog.float8))
         Sort Key: ft1.c2, (sum(ft1.c1))
         ->  HashAggregate
               Output: ft1.c2, sum(ft1.c1), (sqrt((ft1.c1)::pg_catalog.float8))
               Group Key: ft1.c2, sqrt((ft1.c1)::pg_catalog.float8)
               ->  Foreign Scan on public.ft1
                     Output: ft1.c2, sqrt((ft1.c1)::pg_catalog.float8), ft1.c1
                     Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(11 rows)

select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
 count | sum  
-------+------
  1000 | 4500
(1 row)

reset enable_incremental_sort;
-- Aggregate is still pushed down by taking unshippable expression out
explain (verbose, costs off)
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Sort
   Output: ((c2 * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number)), ((sum(c1) * c2)), c2
   Sort Key: ((ft1.c2 * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number)), ((sum(ft1.c1) * ft1.c2))
   ->  HashAggregate
         Output: (c2 * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number), (sum(c1) * c2), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(9 rows)

select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
 sum1 |  sum2  
------+--------
 0    | 0
 1    | 49600
 2    | 99400
 3    | 149400
 4    | 199600
 5    | 250000
 6    | 300600
 7    | 351400
 8    | 402400
 9    | 453600
(10 rows)

-- Aggregate with unshippable GROUP BY clause are not pushed
explain (verbose, costs off)
select c2 * (random() <= 1)::int as c2 from ft2 group by c2 * (random() <= 1)::int order by 1;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: ((c2 * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number))
   Sort Key: ((ft2.c2 * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number))
   ->  HashAggregate
         Output: ((c2 * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number))
         Group Key: (ft2.c2 * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number)
         ->  Foreign Scan on public.ft2
               Output: (c2 * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number)
               Remote SQL: SELECT c2 FROM "S 1"."T 1"
(9 rows)

-- GROUP BY clause in various forms, cardinal, alias and constant expression
explain (verbose, costs off)
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort
   Output: (count(c2)), c2, 5, 7.0, 9
   Sort Key: ft1.c2
   ->  Foreign Scan
         Output: (count(c2)), c2, 5, 7.0, 9
         Relations: Aggregate on (public.ft1)
         Remote SQL: SELECT count(c2), c2, 5, 7.0, 9 FROM "S 1"."T 1" GROUP BY 2, 3, 5
(7 rows)

select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
  w  | x | y |  z  
-----+---+---+-----
 100 | 0 | 5 | 7.0
 100 | 1 | 5 | 7.0
 100 | 2 | 5 | 7.0
 100 | 3 | 5 | 7.0
 100 | 4 | 5 | 7.0
 100 | 5 | 5 | 7.0
 100 | 6 | 5 | 7.0
 100 | 7 | 5 | 7.0
 100 | 8 | 5 | 7.0
 100 | 9 | 5 | 7.0
(10 rows)

-- GROUP BY clause referring to same column multiple times
-- Also, ORDER BY contains an aggregate function
explain (verbose, costs off)
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Output: c2, c2, (sum(c1))
   Sort Key: (sum(ft1.c1))
   ->  HashAggregate
         Output: c2, c2, sum(c1)
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Filter: (ft1.c2 > '6'::number)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(10 rows)

select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
 c2 | c2 
----+----
 7  | 7
 8  | 8
 9  | 9
(3 rows)

-- Testing HAVING clause shippability
explain (verbose, costs off)
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft2.c2
   ->  HashAggregate
         Output: c2, sum(c1)
         Group Key: ft2.c2
         Filter: ((avg(ft2.c1) < '500'::number) AND (sum(ft2.c1) < '49800'::number))
         ->  Foreign Scan on public.ft2
               Output: c2, c1
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(10 rows)

select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
 c2 |  sum  
----+-------
 1  | 49600
 2  | 49700
(2 rows)

-- Unshippable HAVING clause will be evaluated locally, and other qual in HAVING clause is pushed down
explain (verbose, costs off)
select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  HashAggregate
         Output: ft1.c5, NULL::pg_catalog.int8, (sqrt((ft1.c2)::pg_catalog.float8))
         Group Key: ft1.c5, sqrt((ft1.c2)::pg_catalog.float8)
         Filter: ((avg(ft1.c1) < '500'::number) AND ((((avg(ft1.c1) / avg(ft1.c1)))::binary_double * (random())::binary_double) <= '1'::binary_double))
         ->  Foreign Scan on public.ft1
               Output: ft1.c5, sqrt((ft1.c2)::pg_catalog.float8), ft1.c1
               Remote SQL: SELECT "C 1", c2, c5 FROM "S 1"."T 1"
(9 rows)

select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
 count 
-------
    49
(1 row)

-- Aggregate in HAVING clause is not pushable, and thus aggregation is not pushed down
explain (verbose, costs off)
select sum(c1) from ft1 group by c2 having avg(c1 * (random() <= 1)::int) > 100 order by 1;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1)), c2
   Sort Key: (sum(ft1.c1))
   ->  HashAggregate
         Output: sum(c1), c2
         Group Key: ft1.c2
         Filter: (avg((ft1.c1 * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number)) > '100'::number)
         ->  Foreign Scan on public.ft1
               Output: c1, c2
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(10 rows)

-- Remote aggregate in combination with a local Param (for the output
-- of an initplan) can be trouble, per bug #15781
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1;
                    QUERY PLAN                     
---------------------------------------------------
 Aggregate
   Output: $0, sum(ft1.c1)
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
   ->  Foreign Scan on public.ft1
         Output: ft1.c1
         Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(7 rows)

select exists(select 1 from pg_enum), sum(c1) from ft1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
                    QUERY PLAN                     
---------------------------------------------------
 GroupAggregate
   Output: $0, sum(ft1.c1)
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
   ->  Foreign Scan on public.ft1
         Output: ft1.c1
         Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(7 rows)

select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

-- Testing ORDER BY, DISTINCT, FILTER, Ordered-sets and VARIADIC within aggregates
-- ORDER BY within aggregate, same column used to order
explain (verbose, costs off)
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Sort
   Output: (array_agg(c1 ORDER BY c1)), c2
   Sort Key: (array_agg(ft1.c1 ORDER BY ft1.c1))
   ->  GroupAggregate
         Output: array_agg(c1 ORDER BY c1), c2
         Group Key: ft1.c2
         ->  Sort
               Output: c2, c1
               Sort Key: ft1.c2, ft1.c1
               ->  Foreign Scan on public.ft1
                     Output: c2, c1
                     Filter: (ft1.c1 < '100'::number)
                     Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(13 rows)

select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
           array_agg            
--------------------------------
 {1,11,21,31,41,51,61,71,81,91}
 {2,12,22,32,42,52,62,72,82,92}
 {3,13,23,33,43,53,63,73,83,93}
 {4,14,24,34,44,54,64,74,84,94}
 {5,15,25,35,45,55,65,75,85,95}
 {6,16,26,36,46,56,66,76,86,96}
 {7,17,27,37,47,57,67,77,87,97}
 {8,18,28,38,48,58,68,78,88,98}
 {9,19,29,39,49,59,69,79,89,99}
 {10,20,30,40,50,60,70,80,90}
(10 rows)

-- ORDER BY within aggregate, different column used to order also using DESC
explain (verbose, costs off)
select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Aggregate
   Output: array_agg(c5 ORDER BY c1 DESC)
   ->  Sort
         Output: c5, c1
         Sort Key: ft2.c1 DESC
         ->  Foreign Scan on public.ft2
               Output: c5, c1
               Filter: ((ft2.c1 < '50'::number) AND (ft2.c2 = '6'::number))
               Remote SQL: SELECT "C 1", c2, c5 FROM "S 1"."T 1"
(9 rows)

select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                                     array_agg                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------
 {"1970-02-16 00:00:00.000000","1970-02-06 00:00:00.000000","1970-01-27 00:00:00.000000","1970-01-17 00:00:00.000000","1970-01-07 00:00:00.000000"}
(1 row)

-- DISTINCT within aggregate
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT ((t1.c1 % '5'::number)))), ((t2.c1 % '3'::number))
   Sort Key: (array_agg(DISTINCT ((t1.c1 % '5'::number))))
   ->  GroupAggregate
         Output: array_agg(DISTINCT ((t1.c1 % '5'::number))), ((t2.c1 % '3'::number))
         Group Key: ((t2.c1 % '3'::number))
         ->  Sort
               Output: ((t2.c1 % '3'::number)), t1.c1, ((t1.c1 % '5'::number))
               Sort Key: ((t2.c1 % '3'::number)), ((t1.c1 % '5'::number))
               ->  Hash Full Join
                     Output: (t2.c1 % '3'::number), t1.c1, (t1.c1 % '5'::number)
                     Hash Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < '20'::number) OR ((t1.c1 IS NULL) AND (t2.c1 < '5'::number)))
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1, t1.c2, t1.c3
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 4"
(21 rows)

select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

-- DISTINCT combined with ORDER BY within aggregate
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT ((t1.c1 % '5'::number)) ORDER BY ((t1.c1 % '5'::number)))), ((t2.c1 % '3'::number))
   Sort Key: (array_agg(DISTINCT ((t1.c1 % '5'::number)) ORDER BY ((t1.c1 % '5'::number))))
   ->  GroupAggregate
         Output: array_agg(DISTINCT ((t1.c1 % '5'::number)) ORDER BY ((t1.c1 % '5'::number))), ((t2.c1 % '3'::number))
         Group Key: ((t2.c1 % '3'::number))
         ->  Sort
               Output: ((t2.c1 % '3'::number)), t1.c1, ((t1.c1 % '5'::number))
               Sort Key: ((t2.c1 % '3'::number)), ((t1.c1 % '5'::number))
               ->  Hash Full Join
                     Output: (t2.c1 % '3'::number), t1.c1, (t1.c1 % '5'::number)
                     Hash Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < '20'::number) OR ((t1.c1 IS NULL) AND (t2.c1 < '5'::number)))
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1, t1.c2, t1.c3
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 4"
(21 rows)

select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT ((t1.c1 % '5'::number)) ORDER BY ((t1.c1 % '5'::number)) DESC NULLS LAST)), ((t2.c1 % '3'::number))
   Sort Key: (array_agg(DISTINCT ((t1.c1 % '5'::number)) ORDER BY ((t1.c1 % '5'::number)) DESC NULLS LAST))
   ->  GroupAggregate
         Output: array_agg(DISTINCT ((t1.c1 % '5'::number)) ORDER BY ((t1.c1 % '5'::number)) DESC NULLS LAST), ((t2.c1 % '3'::number))
         Group Key: ((t2.c1 % '3'::number))
         ->  Sort
               Output: ((t2.c1 % '3'::number)), t1.c1, ((t1.c1 % '5'::number))
               Sort Key: ((t2.c1 % '3'::number)), ((t1.c1 % '5'::number)) DESC NULLS LAST
               ->  Hash Full Join
                     Output: (t2.c1 % '3'::number), t1.c1, (t1.c1 % '5'::number)
                     Hash Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < '20'::number) OR ((t1.c1 IS NULL) AND (t2.c1 < '5'::number)))
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1, t1.c2, t1.c3
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 4"
(21 rows)

select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {3,2,1,NULL}
 {4,3,2,1,0}
(2 rows)

-- FILTER within aggregate
explain (verbose, costs off)
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1) FILTER (WHERE ((c1 < '100'::number) AND (c2 > '5'::number)))), c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((ft1.c1 < '100'::number) AND (ft1.c2 > '5'::number))))
   ->  HashAggregate
         Output: sum(c1) FILTER (WHERE ((c1 < '100'::number) AND (c2 > '5'::number))), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c1, c2
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(9 rows)

select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
 sum 
-----
 510
 520
 530
 540
 
 
 
 
 
 
(10 rows)

-- DISTINCT, ORDER BY and FILTER within aggregate
explain (verbose, costs off)
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum(((c1 % '3'::number))), sum(DISTINCT ((c1 % '3'::number)) ORDER BY ((c1 % '3'::number))) FILTER (WHERE (((c1 % '3'::number)) < '2'::number)), c2
   ->  Sort
         Output: c1, c2, ((c1 % '3'::number))
         Sort Key: ((ft1.c1 % '3'::number))
         ->  Foreign Scan on public.ft1
               Output: c1, c2, (c1 % '3'::number)
               Filter: (ft1.c2 = '6'::number)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(9 rows)

select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
 sum | sum | c2 
-----+-----+----
 99  | 1   | 6
(1 row)

-- Outer query is aggregation query
explain (verbose, costs off)
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Aggregate
               Output: (SubPlan 1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Filter: ((t2.c2 % '6'::number) = '0'::number)
                     Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
               SubPlan 1
                 ->  Foreign Scan on public.ft1 t1
                       Output: count(*) FILTER (WHERE ((t2.c2 = '6'::number) AND (t2.c1 < '10'::number)))
                       Filter: (t1.c1 = '6'::number)
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(16 rows)

select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     1
(1 row)

-- Inner query is aggregation query
explain (verbose, costs off)
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Foreign Scan on public.ft2 t2
               Output: (SubPlan 1)
               Filter: ((t2.c2 % '6'::number) = '0'::number)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
               SubPlan 1
                 ->  Aggregate
                       Output: count(t1.c1) FILTER (WHERE ((t2.c2 = '6'::number) AND (t2.c1 < '10'::number)))
                       ->  Foreign Scan on public.ft1 t1
                             Output: t1.c1
                             Filter: (t1.c1 = '6'::number)
                             Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(16 rows)

select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     0
     1
(2 rows)

-- Aggregate not pushed down as FILTER condition is not pushable
explain (verbose, costs off)
select sum(c1) filter (where (c1 / c1) * random() <= 1) from ft1 group by c2 order by 1;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1) FILTER (WHERE ((((c1 / c1))::binary_double * (random())::binary_double) <= '1'::binary_double))), c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::binary_double * (random())::binary_double) <= '1'::binary_double)))
   ->  HashAggregate
         Output: sum(c1) FILTER (WHERE ((((c1 / c1))::binary_double * (random())::binary_double) <= '1'::binary_double)), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c1, c2
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(9 rows)

explain (verbose, costs off)
select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
                       QUERY PLAN                        
---------------------------------------------------------
 Aggregate
   Output: sum(ft1.c2) FILTER (WHERE (hashed SubPlan 1))
   ->  Foreign Scan on public.ft1
         Output: ft1.c2
         Remote SQL: SELECT c2 FROM "S 1"."T 1"
   SubPlan 1
     ->  Foreign Scan on public.ft1 ft1_1
           Output: ft1_1.c2
           Filter: (ft1_1.c2 < '5'::number)
           Remote SQL: SELECT c2 FROM "S 1"."T 1"
(10 rows)

-- Ordered-sets within aggregate
explain (verbose, costs off)
select c2, rank('10'::pg_catalog.varchar) within group (order by c6), percentile_cont(c2/10::number) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::number) within group (order by c1) < 500 order by c2;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, rank('10'::varchar2) WITHIN GROUP (ORDER BY c6), percentile_cont(((c2 / '10'::number))::pg_catalog.float8) WITHIN GROUP (ORDER BY ((c1)::pg_catalog.float8))
   Group Key: ft1.c2
   Filter: (percentile_cont(((ft1.c2 / '10'::number))::pg_catalog.float8) WITHIN GROUP (ORDER BY ((ft1.c1)::pg_catalog.float8)) < '500'::pg_catalog.float8)
   ->  Sort
         Output: c2, c6, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c6, c1
               Filter: (ft1.c2 < '10'::number)
               Remote SQL: SELECT "C 1", c2, c6 FROM "S 1"."T 1"
(11 rows)

select c2, rank('10'::pg_catalog.varchar) within group (order by c6), percentile_cont(c2/10::number) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::number) within group (order by c1) < 500 order by c2;
 c2 | rank | percentile_cont 
----+------+-----------------
 0  |  101 |              10
 1  |  101 |             100
 2  |    1 |             200
 3  |    1 |             300
 4  |    1 |             400
(5 rows)

-- Using multiple arguments within aggregates
explain (verbose, costs off)
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
                          QUERY PLAN                           
---------------------------------------------------------------
 GroupAggregate
   Output: c1, rank(c1, c2) WITHIN GROUP (ORDER BY c1, c2), c2
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Filter: (ft1.c1 = '6'::number)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(10 rows)

select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
 c1 | rank 
----+------
 6  |    1
(1 row)

-- User defined function for user defined aggregate, VARIADIC
create function least_accum(anyelement, variadic anyarray)
returns anyelement language sql as
  'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)';
create aggregate least_agg(variadic items anyarray) (
  stype = anyelement, sfunc = least_accum
);
/
-- Disable hash aggregation for plan stability.
set enable_hashagg to false;
-- Not pushed down due to user defined aggregate
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                         QUERY PLAN                          
-------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(9 rows)

-- Add function and aggregate into extension
alter extension postgres_fdw add function least_accum(anyelement, variadic anyarray);
alter extension postgres_fdw add aggregate least_agg(variadic items anyarray);
alter server loopback options (set extensions 'postgres_fdw');
-- Now aggregate will be pushed.  Aggregate will display VARIADIC argument.
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
                         QUERY PLAN                          
-------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Filter: (ft1.c2 < '100'::number)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(10 rows)

select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
 c2 | least_agg 
----+-----------
 0  | 10
 1  | 1
 2  | 2
 3  | 3
 4  | 4
 5  | 5
 6  | 6
 7  | 7
 8  | 8
 9  | 9
(10 rows)

-- Remove function and aggregate from extension
alter extension postgres_fdw drop function least_accum(anyelement, variadic anyarray);
alter extension postgres_fdw drop aggregate least_agg(variadic items anyarray);
alter server loopback options (set extensions 'postgres_fdw');
-- Not pushed down as we have dropped objects from extension.
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                         QUERY PLAN                          
-------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(9 rows)

-- Cleanup
reset enable_hashagg;
drop aggregate least_agg(variadic items anyarray);
drop function least_accum(anyelement, variadic anyarray);
-- Testing USING OPERATOR() in ORDER BY within aggregate.
-- For this, we need user defined operators along with operator family and
-- operator class.  Create those and then add them in extension.  Note that
-- user defined objects are considered unshippable unless they are part of
-- the extension.
create operator public.<^ (
 leftarg = number(38,0),
 rightarg = number(38,0),
 procedure = sys.number_eq
);
create operator public.=^ (
 leftarg = number(38,0),
 rightarg = number(38,0),
 procedure = sys.number_lt
);
create operator public.>^ (
 leftarg = number(38,0),
 rightarg = number(38,0),
 procedure = sys.number_gt
);
create operator family my_op_family using btree;
create function my_op_cmp(a number(38,0), b number(38,0)) returns integer as
  $$begin return sys.number_cmp(a, b); end $$ language plisql;
/
create operator class my_op_class for type number(38,0) using btree family my_op_family as
 operator 1 public.<^,
 operator 3 public.=^,
 operator 5 public.>^,
 function 1 my_op_cmp(number(38,0), number(38,0));
-- This will not be pushed as user defined sort operator is not part of the
-- extension yet.
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   ->  Sort
         Output: c1, c2
         Sort Key: ft2.c1 USING <^
         ->  Foreign Scan on public.ft2
               Output: c1, c2
               Filter: ((ft2.c1 < '100'::number) AND (ft2.c2 = '6'::number))
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(9 rows)

-- This should not be pushed either.
explain (verbose, costs off)
select * from ft2 order by c1 using operator(public.<^);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Sort Key: ft2.c1 USING <^
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(6 rows)

-- Update local stats on ft2
ANALYZE ft2;
-- Add into extension
alter extension postgres_fdw add operator class my_op_class using btree;
alter extension postgres_fdw add function my_op_cmp(a number(38,0), b number(38,0));
alter extension postgres_fdw add operator family my_op_family using btree;
alter extension postgres_fdw add operator public.<^(number(38,0), number(38,0));
alter extension postgres_fdw add operator public.=^(number(38,0), number(38,0));
alter extension postgres_fdw add operator public.>^(number(38,0), number(38,0));
alter server loopback options (set extensions 'postgres_fdw');
-- Now this will be pushed as sort operator is part of the extension.
alter server loopback options (add fdw_tuple_cost '0.5');
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   ->  Sort
         Output: c1, c2
         Sort Key: ft2.c1 USING <^
         ->  Foreign Scan on public.ft2
               Output: c1, c2
               Filter: ((ft2.c1 < '100'::number) AND (ft2.c2 = '6'::number))
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(9 rows)

select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
           array_agg            
--------------------------------
 {6,16,26,36,46,56,66,76,86,96}
(1 row)

alter server loopback options (drop fdw_tuple_cost);
-- This should be pushed too.
explain (verbose, costs off)
select * from ft2 order by c1 using operator(public.<^);
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft2
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY "C 1" USING OPERATOR(public.<^) NULLS LAST
(3 rows)

-- Remove from extension
alter extension postgres_fdw drop operator class my_op_class using btree;
alter extension postgres_fdw drop function my_op_cmp(a number(38,0), b number(38,0));
alter extension postgres_fdw drop operator family my_op_family using btree;
alter extension postgres_fdw drop operator public.<^(number(38,0), number(38,0));
alter extension postgres_fdw drop operator public.=^(number(38,0), number(38,0));
alter extension postgres_fdw drop operator public.>^(number(38,0), number(38,0));
alter server loopback options (set extensions 'postgres_fdw');
-- This will not be pushed as sort operator is now removed from the extension.
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   ->  Sort
         Output: c1, c2
         Sort Key: ft2.c1 USING <^
         ->  Foreign Scan on public.ft2
               Output: c1, c2
               Filter: ((ft2.c1 < '100'::number) AND (ft2.c2 = '6'::number))
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(9 rows)

-- Cleanup
drop operator class my_op_class using btree;
drop function my_op_cmp(a number(38,0), b number(38,0));
drop operator family my_op_family using btree;
drop operator public.>^(number(38,0), number(38,0));
drop operator public.=^(number(38,0), number(38,0));
drop operator public.<^(number(38,0), number(38,0));
-- Input relation to aggregate push down hook is not safe to pushdown and thus
-- the aggregate cannot be pushed down to foreign server.
explain (verbose, costs off)
select count(t1.c3) from ft2 t1 left join ft2 t2 on (t1.c1 = random() * t2.c2);
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Nested Loop Left Join
         Output: t1.c3
         Join Filter: ((t1.c1)::binary_double = ((random())::binary_double * (t2.c2)::binary_double))
         ->  Foreign Scan on public.ft2 t1
               Output: t1.c3, t1.c1
               Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
         ->  Materialize
               Output: t2.c2
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2
                     Remote SQL: SELECT c2 FROM "S 1"."T 1"
(13 rows)

-- Subquery in FROM clause having aggregate
explain (verbose, costs off)
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), x.b
   Sort Key: (count(*)), x.b
   ->  HashAggregate
         Output: count(*), x.b
         Group Key: x.b
         ->  Hash Join
               Output: x.b
               Inner Unique: true
               Hash Cond: (ft1.c2 = x.a)
               ->  Foreign Scan on public.ft1
                     Output: ft1.c2
                     Remote SQL: SELECT c2 FROM "S 1"."T 1"
               ->  Hash
                     Output: x.b, x.a
                     ->  Subquery Scan on x
                           Output: x.b, x.a
                           ->  HashAggregate
                                 Output: ft1_1.c2, sum(ft1_1.c1)
                                 Group Key: ft1_1.c2
                                 ->  Foreign Scan on public.ft1 ft1_1
                                       Output: ft1_1.c2, ft1_1.c1
                                       Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(23 rows)

select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
 count |   b   
-------+-------
   100 | 49600
   100 | 49700
   100 | 49800
   100 | 49900
   100 | 50000
   100 | 50100
   100 | 50200
   100 | 50300
   100 | 50400
   100 | 50500
(10 rows)

-- FULL join with IS NULL check in HAVING
explain (verbose, costs off)
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort
   Output: (avg(t1.c1)), (sum(t2.c1)), t2.c1
   Sort Key: (avg(t1.c1)), (sum(t2.c1))
   ->  GroupAggregate
         Output: avg(t1.c1), sum(t2.c1), t2.c1
         Group Key: t2.c1
         Filter: (((avg(t1.c1) IS NULL) AND (sum(t2.c1) < '10'::number)) OR (sum(t2.c1) IS NULL))
         ->  Sort
               Output: t2.c1, t1.c1
               Sort Key: t2.c1
               ->  Hash Full Join
                     Output: t2.c1, t1.c1
                     Hash Cond: (t1.c1 = t2.c1)
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1, t1.c2, t1.c3
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 4"
(21 rows)

select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
         avg         | sum 
---------------------+-----
 51.0000000000000000 | 
                     | 3
                     | 9
(3 rows)

-- Aggregate over FULL join needing to deparse the joining relations as
-- subqueries.
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(ft4.c1), avg(ft5.c1)
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1, ft4.c2, ft4.c3
               Filter: ((ft4.c1 >= '50'::number) AND (ft4.c1 <= '60'::number))
               Remote SQL: SELECT c1 FROM "S 1"."T 3"
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1
                     Filter: ((ft5.c1 >= '50'::number) AND (ft5.c1 <= '60'::number))
                     Remote SQL: SELECT c1 FROM "S 1"."T 4"
(15 rows)

select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
 count | sum |         avg         
-------+-----+---------------------
     8 | 330 | 55.5000000000000000
(1 row)

-- ORDER BY expression is part of the target list but not pushed down to
-- foreign server.
explain (verbose, costs off)
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: ((sum(c2) * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number))
   Sort Key: ((sum(ft1.c2) * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number))
   ->  Aggregate
         Output: (sum(c2) * (((random() <= '1'::pg_catalog.float8))::pg_catalog.int4)::number)
         ->  Foreign Scan on public.ft1
               Output: c2
               Remote SQL: SELECT c2 FROM "S 1"."T 1"
(8 rows)

select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
 sum  
------
 4500
(1 row)

-- LATERAL join, with parameterization
set enable_hashagg to false;
explain (verbose, costs off)
select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: t1.c2, qry.sum
   Sort Key: t1.c2
   ->  Nested Loop
         Output: t1.c2, qry.sum
         ->  Index Scan using t1_pkey on "S 1"."T 1" t1
               Output: t1."C 1", t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
               Index Cond: (t1."C 1" < '100'::number)
               Filter: (t1.c2 < '3'::number)
         ->  Subquery Scan on qry
               Output: qry.sum, t2.c1
               Filter: ((t1.c2 * '2'::number) = qry.sum)
               ->  GroupAggregate
                     Output: sum((t2.c1 + t1."C 1")), t2.c1
                     Group Key: t2.c1
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(21 rows)

select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
 c2 | sum 
----+-----
 1  | 2
 2  | 4
(2 rows)

reset enable_hashagg;
-- bug #15613: bad plan for foreign table scan with lateral reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T 1" AS ref_0,
    LATERAL (
        SELECT ref_0."C 1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C 1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C 1";
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: ref_0.c2, ref_0."C 1", (ref_0.c2), ref_1.c3, ref_0."C 1"
   ->  Nested Loop
         Output: ref_0.c2, ref_0."C 1", ref_1.c3, (ref_0.c2)
         ->  Index Scan using t1_pkey on "S 1"."T 1" ref_0
               Output: ref_0."C 1", ref_0.c2, ref_0.c3, ref_0.c4, ref_0.c5, ref_0.c6, ref_0.c7, ref_0.c8
               Index Cond: (ref_0."C 1" < '10'::number)
         ->  Foreign Scan on public.ft1 ref_1
               Output: ref_1.c3, ref_0.c2
               Filter: (ref_1.c3 = '00001'::varchar2)
               Remote SQL: SELECT c3 FROM "S 1"."T 1"
   ->  Materialize
         Output: ref_3.c3
         ->  Foreign Scan on public.ft2 ref_3
               Output: ref_3.c3
               Filter: (ref_3.c3 = '00001'::varchar2)
               Remote SQL: SELECT c3 FROM "S 1"."T 1"
(17 rows)

SELECT ref_0.c2, subq_1.*
FROM
    "S 1"."T 1" AS ref_0,
    LATERAL (
        SELECT ref_0."C 1" c1, subq_0.*
        FROM (SELECT ref_0.c2, ref_1.c3
              FROM ft1 AS ref_1) AS subq_0
             RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
    ) AS subq_1
WHERE ref_0."C 1" < 10 AND subq_1.c3 = '00001'
ORDER BY ref_0."C 1";
 c2 | c1 | c2 |  c3   
----+----+----+-------
 1  | 1  | 1  | 00001
 2  | 2  | 2  | 00001
 3  | 3  | 3  | 00001
 4  | 4  | 4  | 00001
 5  | 5  | 5  | 00001
 6  | 6  | 6  | 00001
 7  | 7  | 7  | 00001
 8  | 8  | 8  | 00001
 9  | 9  | 9  | 00001
(9 rows)

-- Check with placeHolderVars
explain (verbose, costs off)
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Aggregate
   Output: sum(q.a), count(q.b)
   ->  Nested Loop Left Join
         Output: q.a, q.b
         Inner Unique: true
         Join Filter: (ft4.c1 <= q.b)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1, ft4.c2, ft4.c3
               Remote SQL: SELECT c1 FROM "S 1"."T 3"
         ->  Materialize
               Output: q.a, q.b
               ->  Subquery Scan on q
                     Output: q.a, q.b
                     ->  Aggregate
                           Output: 13, avg(ft1.c1), NULL::number
                           ->  Hash Left Join
                                 Output: ft1.c1
                                 Hash Cond: (ft2.c1 = ft1.c1)
                                 ->  Foreign Scan on public.ft2
                                       Output: ft2.c1
                                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                                 ->  Hash
                                       Output: ft1.c1
                                       ->  Foreign Scan on public.ft1
                                             Output: ft1.c1
                                             Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(26 rows)

select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
 sum | count 
-----+-------
 650 |    50
(1 row)

-- Not supported cases
-- Grouping sets
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: c2, sum(c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Filter: (ft1.c2 < '3'::number)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(11 rows)

select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
 0  | 50500
 1  | 49600
 2  | 49700
    | 149800
(4 rows)

explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: c2, sum(c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Filter: (ft1.c2 < '3'::number)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(11 rows)

select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
 0  | 50500
 1  | 49600
 2  | 49700
    | 149800
(4 rows)

explain (verbose, costs off)
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Output: c2, c6, (sum(c1))
   Sort Key: ft1.c2, ft1.c6
   ->  HashAggregate
         Output: c2, c6, sum(c1)
         Hash Key: ft1.c2
         Hash Key: ft1.c6
         ->  Foreign Scan on public.ft1
               Output: c2, c6, c1
               Filter: (ft1.c2 < '3'::number)
               Remote SQL: SELECT "C 1", c2, c6 FROM "S 1"."T 1"
(11 rows)

select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
 c2 | c6 |  sum  
----+----+-------
 0  |    | 50500
 1  |    | 49600
 2  |    | 49700
    | 0  | 50500
    | 1  | 49600
    | 2  | 49700
(6 rows)

explain (verbose, costs off)
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Output: c2, (sum(c1)), (GROUPING(c2))
   Sort Key: ft1.c2
   ->  HashAggregate
         Output: c2, sum(c1), GROUPING(c2)
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Filter: (ft1.c2 < '3'::number)
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(10 rows)

select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
 c2 |  sum  | grouping 
----+-------+----------
 0  | 50500 |        0
 1  | 49600 |        0
 2  | 49700 |        0
(3 rows)

-- DISTINCT itself is not pushed down, whereas underneath aggregate is pushed
explain (verbose, costs off)
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Unique
   Output: ((sum(c1) / '1000'::number)), c2
   ->  Sort
         Output: ((sum(c1) / '1000'::number)), c2
         Sort Key: ((sum(ft2.c1) / '1000'::number))
         ->  HashAggregate
               Output: (sum(c1) / '1000'::number), c2
               Group Key: ft2.c2
               ->  Foreign Scan on public.ft2
                     Output: c1, c2
                     Filter: (ft2.c2 < '6'::number)
                     Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(12 rows)

select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
          s          
---------------------
 49.6000000000000000
 49.7000000000000000
 49.8000000000000000
 49.9000000000000000
 50.0000000000000000
 50.5000000000000000
(6 rows)

-- WindowAgg
explain (verbose, costs off)
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c2)), (count(c2) OVER (?)), ((c2 % '2'::number))
   Sort Key: ft2.c2
   ->  WindowAgg
         Output: c2, (sum(c2)), count(c2) OVER (?), ((c2 % '2'::number))
         ->  Sort
               Output: c2, ((c2 % '2'::number)), (sum(c2))
               Sort Key: ((ft2.c2 % '2'::number))
               ->  HashAggregate
                     Output: c2, (c2 % '2'::number), sum(c2)
                     Group Key: ft2.c2
                     ->  Foreign Scan on public.ft2
                           Output: c2
                           Filter: (ft2.c2 < '10'::number)
                           Remote SQL: SELECT c2 FROM "S 1"."T 1"
(15 rows)

select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
 c2 | sum | count 
----+-----+-------
 0  | 0   |     5
 1  | 100 |     5
 2  | 200 |     5
 3  | 300 |     5
 4  | 400 |     5
 5  | 500 |     5
 6  | 600 |     5
 7  | 700 |     5
 8  | 800 |     5
 9  | 900 |     5
(10 rows)

explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort
   Output: c2, (array_agg(c2) OVER (?)), ((c2 % '2'::number))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: c2, array_agg(c2) OVER (?), ((c2 % '2'::number))
         ->  Sort
               Output: c2, ((c2 % '2'::number))
               Sort Key: ((ft1.c2 % '2'::number)), ft1.c2 DESC
               ->  HashAggregate
                     Output: c2, (c2 % '2'::number)
                     Group Key: ft1.c2
                     ->  Foreign Scan on public.ft1
                           Output: c2
                           Filter: (ft1.c2 < '10'::number)
                           Remote SQL: SELECT c2 FROM "S 1"."T 1"
(15 rows)

select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg  
----+-------------
 0  | {8,6,4,2,0}
 1  | {9,7,5,3,1}
 2  | {8,6,4,2}
 3  | {9,7,5,3}
 4  | {8,6,4}
 5  | {9,7,5}
 6  | {8,6}
 7  | {9,7}
 8  | {8}
 9  | {9}
(10 rows)

explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
                            QUERY PLAN                            
------------------------------------------------------------------
 Sort
   Output: c2, (array_agg(c2) OVER (?)), ((c2 % '2'::number))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: c2, array_agg(c2) OVER (?), ((c2 % '2'::number))
         ->  Sort
               Output: c2, ((c2 % '2'::number))
               Sort Key: ((ft1.c2 % '2'::number)), ft1.c2
               ->  HashAggregate
                     Output: c2, (c2 % '2'::number)
                     Group Key: ft1.c2
                     ->  Foreign Scan on public.ft1
                           Output: c2
                           Filter: (ft1.c2 < '10'::number)
                           Remote SQL: SELECT c2 FROM "S 1"."T 1"
(15 rows)

select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
 c2 |  array_agg  
----+-------------
 0  | {0,2,4,6,8}
 1  | {1,3,5,7,9}
 2  | {2,4,6,8}
 3  | {3,5,7,9}
 4  | {4,6,8}
 5  | {5,7,9}
 6  | {6,8}
 7  | {7,9}
 8  | {8}
 9  | {9}
(10 rows)

-- ===================================================================
-- parameterized queries
-- ===================================================================
-- simple join
PREPARE st1(number(38,0), number(38,0)) AS SELECT t1.c3, t2.c3 FROM ft1 t1, ft2 t2 WHERE t1.c1 = $1 AND t2.c1 = $2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st1(1, 2);
                      QUERY PLAN                       
-------------------------------------------------------
 Nested Loop
   Output: t1.c3, t2.c3
   ->  Foreign Scan on public.ft1 t1
         Output: t1.c3
         Filter: (t1.c1 = '1'::number)
         Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
   ->  Foreign Scan on public.ft2 t2
         Output: t2.c3
         Filter: (t2.c1 = '2'::number)
         Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
(10 rows)

EXECUTE st1(1, 1);
  c3   |  c3   
-------+-------
 00001 | 00001
(1 row)

EXECUTE st1(101, 101);
  c3   |  c3   
-------+-------
 00101 | 00101
(1 row)

-- subquery using stable function (can't be sent to remote)
PREPARE st2(number(38,0)) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND c4::date = '1970-01-17'::date) ORDER BY c1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st2(10, 20);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
   Sort Key: t1.c1
   ->  Nested Loop Semi Join
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
         Join Filter: (t2.c3 = t1.c3)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
               Filter: (t1.c1 < '20'::number)
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
         ->  Materialize
               Output: t2.c3
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c3
                     Filter: ((t2.c1 > '10'::number) AND ((t2.c4)::date = '1970-01-17'::date))
                     Remote SQL: SELECT "C 1", c3, c4 FROM "S 1"."T 1"
(16 rows)

EXECUTE st2(10, 20);
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 16 | 6  | 00016 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
(1 row)

EXECUTE st2(101, 121);
 c1  | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
-----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 116 | 6  | 00116 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
(1 row)

-- subquery using immutable function (can be sent to remote)
PREPARE st3(number(38,0)) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND c5::date = '1970-01-17'::date) ORDER BY c1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st3(10, 20);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
   Sort Key: t1.c1
   ->  Nested Loop Semi Join
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
         Join Filter: (t2.c3 = t1.c3)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7, t1.c8
               Filter: (t1.c1 < '20'::number)
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
         ->  Materialize
               Output: t2.c3
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c3
                     Filter: ((t2.c1 > '10'::number) AND ((t2.c5)::date = '1970-01-17'::date))
                     Remote SQL: SELECT "C 1", c3, c5 FROM "S 1"."T 1"
(16 rows)

EXECUTE st3(10, 20);
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 16 | 6  | 00016 | 1970-01-17 00:00:00.000000 -08:00 | 1970-01-17 00:00:00.000000 | 6  | 6          | foo
(1 row)

EXECUTE st3(20, 30);
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 
----+----+----+----+----+----+----+----
(0 rows)

-- custom plan should be chosen initially
PREPARE st4(number(38,0)) AS SELECT * FROM ft1 t1 WHERE t1.c1 = $1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = '1'::number)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = '1'::number)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = '1'::number)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = '1'::number)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = '1'::number)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

-- once we try it enough times, should switch to generic plan
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = $1)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

-- value of $1 should not be sent to remote
PREPARE st5(user_enum,number(38,0)) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: ((t1.c8 = 'foo'::user_enum) AND (t1.c1 = '1'::number))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: ((t1.c8 = 'foo'::user_enum) AND (t1.c1 = '1'::number))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: ((t1.c8 = 'foo'::user_enum) AND (t1.c1 = '1'::number))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: ((t1.c8 = 'foo'::user_enum) AND (t1.c1 = '1'::number))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: ((t1.c8 = 'foo'::user_enum) AND (t1.c1 = '1'::number))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: ((t1.c8 = $1) AND (t1.c1 = $2))
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

EXECUTE st5('foo', 1);
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

-- altering FDW options requires replanning
PREPARE st6 AS SELECT * FROM ft1 t1 WHERE t1.c1 = t1.c2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = t1.c2)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(4 rows)

PREPARE st7 AS INSERT INTO ft1 (c1,c2,c3) VALUES (1001,101,'foo');
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1
   Remote SQL: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Result
         Output: NULL::pg_catalog.int4, '1001'::number(38,0), '101'::number(38,0), 'foo'::varchar2(1024), NULL::timestamp with time zone, NULL::timestamp, NULL::varchar2, 'ft1       '::char(10), NULL::user_enum
(5 rows)

ALTER TABLE "S 1"."T 1" RENAME TO "T 0";
ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 0');
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Filter: (t1.c1 = t1.c2)
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 0"
(4 rows)

EXECUTE st6;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
 2  | 2  | 00002 | 1970-01-03 00:00:00.000000 -08:00 | 1970-01-03 00:00:00.000000 | 2  | 2          | foo
 3  | 3  | 00003 | 1970-01-04 00:00:00.000000 -08:00 | 1970-01-04 00:00:00.000000 | 3  | 3          | foo
 4  | 4  | 00004 | 1970-01-05 00:00:00.000000 -08:00 | 1970-01-05 00:00:00.000000 | 4  | 4          | foo
 5  | 5  | 00005 | 1970-01-06 00:00:00.000000 -08:00 | 1970-01-06 00:00:00.000000 | 5  | 5          | foo
 6  | 6  | 00006 | 1970-01-07 00:00:00.000000 -08:00 | 1970-01-07 00:00:00.000000 | 6  | 6          | foo
 7  | 7  | 00007 | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 8  | 8  | 00008 | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 9  | 9  | 00009 | 1970-01-10 00:00:00.000000 -08:00 | 1970-01-10 00:00:00.000000 | 9  | 9          | foo
(9 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1
   Remote SQL: INSERT INTO "S 1"."T 0"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Result
         Output: NULL::pg_catalog.int4, '1001'::number(38,0), '101'::number(38,0), 'foo'::varchar2(1024), NULL::timestamp with time zone, NULL::timestamp, NULL::varchar2, 'ft1       '::char(10), NULL::user_enum
(5 rows)

ALTER TABLE "S 1"."T 0" RENAME TO "T 1";
ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 1');
PREPARE st8 AS SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Relations: Aggregate on (public.ft1 t1)
   Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
(4 rows)

ALTER SERVER loopback OPTIONS (DROP extensions);
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(6 rows)

EXECUTE st8;
 count 
-------
     9
(1 row)

ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- cleanup
DEALLOCATE st1;
DEALLOCATE st2;
DEALLOCATE st3;
DEALLOCATE st4;
DEALLOCATE st5;
DEALLOCATE st6;
DEALLOCATE st7;
DEALLOCATE st8;
-- System columns, except ctid and oid, should not be sent to remote
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'pg_class'::regclass LIMIT 1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, c8
         Filter: (t1.tableoid = '1259'::oid)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(6 rows)

SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1'::regclass LIMIT 1;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: (tableoid)::regclass, c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" LIMIT 1::pg_catalog.int8
(3 rows)

SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
 tableoid | c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----------+----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 ft1      | 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((ctid = '(0,2)'))
(3 rows)

SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 2  | 2  | 00002 | 1970-01-03 00:00:00.000000 -08:00 | 1970-01-03 00:00:00.000000 | 2  | 2          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM ft1 t1 LIMIT 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: ctid, c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" LIMIT 1::pg_catalog.int8
(3 rows)

SELECT ctid, * FROM ft1 t1 LIMIT 1;
 ctid  | c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
-------+----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 (0,1) | 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

-- ===================================================================
-- used in PL/pgSQL function
-- ===================================================================
CREATE OR REPLACE FUNCTION f_test(p_c1 number(38,0)) RETURNS int AS $$
DECLARE
	v_c1 int;
BEGIN
    SELECT c1 INTO v_c1 FROM ft1 WHERE c1 = p_c1 LIMIT 1;
    PERFORM c1 FROM ft1 WHERE c1 = p_c1 AND p_c1 = v_c1 LIMIT 1;
    RETURN v_c1;
END;
$$ LANGUAGE plpgsql;
/
SELECT f_test(100);
 f_test 
--------
    100
(1 row)

DROP FUNCTION f_test(number(38,0));
-- ===================================================================
-- REINDEX
-- ===================================================================
-- remote table is not created here
CREATE FOREIGN TABLE reindex_foreign (c1 number(38,0), c2 number(38,0))
  SERVER loopback2 OPTIONS (table_name 'reindex_local');
REINDEX TABLE reindex_foreign; -- error
ERROR:  "reindex_foreign" is not a table or materialized view
REINDEX TABLE CONCURRENTLY reindex_foreign; -- error
ERROR:  "reindex_foreign" is not a table or materialized view
DROP FOREIGN TABLE reindex_foreign;
-- partitions and foreign tables
CREATE TABLE reind_fdw_parent (c1 number(38,0)) PARTITION BY RANGE (c1);
CREATE TABLE reind_fdw_0_10 PARTITION OF reind_fdw_parent
  FOR VALUES FROM (0) TO (10);
CREATE FOREIGN TABLE reind_fdw_10_20 PARTITION OF reind_fdw_parent
  FOR VALUES FROM (10) TO (20)
  SERVER loopback OPTIONS (table_name 'reind_local_10_20');
REINDEX TABLE reind_fdw_parent; -- ok
REINDEX TABLE CONCURRENTLY reind_fdw_parent; -- ok
DROP TABLE reind_fdw_parent;
-- ===================================================================
-- conversion error
-- ===================================================================
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE number(38,0);
SELECT * FROM ft1 ftx(x1,x2,x3,x4,x5,x6,x7,x8) WHERE x1 = 1;  -- ERROR
ERROR:  invalid input syntax for type numeric: "foo"
CONTEXT:  column "x8" of foreign table "ftx"
SELECT ftx.x1, ft2.c2, ftx.x8 FROM ft1 ftx(x1,x2,x3,x4,x5,x6,x7,x8), ft2
  WHERE ftx.x1 = ft2.c1 AND ftx.x1 = 1; -- ERROR
ERROR:  invalid input syntax for type numeric: "foo"
CONTEXT:  column "x8" of foreign table "ftx"
SELECT ftx.x1, ft2.c2, ftx FROM ft1 ftx(x1,x2,x3,x4,x5,x6,x7,x8), ft2
  WHERE ftx.x1 = ft2.c1 AND ftx.x1 = 1; -- ERROR
ERROR:  invalid input syntax for type numeric: "foo"
CONTEXT:  column "x8" of foreign table "ftx"
SELECT sum(c2), array_agg(c8) FROM ft1 GROUP BY c8; -- ERROR
ERROR:  invalid input syntax for type numeric: "foo"
CONTEXT:  column "c8" of foreign table "ft1"
ANALYZE ft1; -- ERROR
ERROR:  invalid input syntax for type numeric: "foo"
CONTEXT:  column "c8" of foreign table "ft1"
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE user_enum;
-- ===================================================================
-- local type can be different from remote type in some cases,
-- in particular if similarly-named operators do equivalent things
-- ===================================================================
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE varchar2(1024);
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE c8 = 'foo' LIMIT 1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   ->  Foreign Scan on public.ft1
         Output: c1, c2, c3, c4, c5, c6, c7, c8
         Filter: (ft1.c8 = 'foo'::varchar2)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(6 rows)

SELECT * FROM ft1 WHERE c8 = 'foo' LIMIT 1;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 WHERE 'foo' = c8 LIMIT 1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   ->  Foreign Scan on public.ft1
         Output: c1, c2, c3, c4, c5, c6, c7, c8
         Filter: ('foo'::varchar2 = ft1.c8)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(6 rows)

SELECT * FROM ft1 WHERE 'foo' = c8 LIMIT 1;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

-- we declared c8 to be text locally, but it's still the same type on
-- the remote which will balk if we try to do anything incompatible
-- with that remote type
SELECT * FROM ft1 WHERE c8 LIKE 'foo' LIMIT 1; -- ERROR
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

SELECT * FROM ft1 WHERE c8::varchar2(1024) LIKE 'foo' LIMIT 1; -- ERROR; cast not pushed down
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE user_enum;
-- ===================================================================
-- subtransaction
--  + local/remote error doesn't break cursor
-- ===================================================================
BEGIN;
DECLARE c CURSOR FOR SELECT * FROM ft1 ORDER BY c1;
FETCH c;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

SAVEPOINT s;
ERROR OUT;          -- ERROR
ERROR:  syntax error at or near "ERROR"
LINE 1: ERROR OUT;
        ^
ROLLBACK TO s;
FETCH c;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 2  | 2  | 00002 | 1970-01-03 00:00:00.000000 -08:00 | 1970-01-03 00:00:00.000000 | 2  | 2          | foo
(1 row)

SAVEPOINT s;
SELECT * FROM ft1 WHERE 1 / (c1 - 1) > 0;  -- ERROR
ERROR:  division by zero
ROLLBACK TO s;
FETCH c;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 3  | 3  | 00003 | 1970-01-04 00:00:00.000000 -08:00 | 1970-01-04 00:00:00.000000 | 3  | 3          | foo
(1 row)

SELECT * FROM ft1 ORDER BY c1 LIMIT 1;
 c1 | c2 |  c3   |                c4                 |             c5             | c6 |     c7     | c8  
----+----+-------+-----------------------------------+----------------------------+----+------------+-----
 1  | 1  | 00001 | 1970-01-02 00:00:00.000000 -08:00 | 1970-01-02 00:00:00.000000 | 1  | 1          | foo
(1 row)

COMMIT;
-- ===================================================================
-- test handling of collations
-- ===================================================================
create table loct3 (f1 varchar2(1024) collate "C" unique, f2 varchar2(1024), f3 varchar(10) unique);
create foreign table ft3 (f1 varchar2(1024) collate "C", f2 varchar2(1024), f3 varchar(10))
  server loopback options (table_name 'loct3', use_remote_estimate 'true');
-- can be sent to remote
explain (verbose, costs off) select * from ft3 where f1 = 'foo';
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f1 = 'foo'::varchar2)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f1 = 'foo'::varchar2)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f2 = 'foo'::varchar2)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f3 = 'foo'::varchar2)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 and l.f1 = 'foo';
                         QUERY PLAN                          
-------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, l.f1, l.f2, l.f3
   Inner Unique: true
   Hash Cond: (f.f3 = l.f3)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3
         Remote SQL: SELECT f1, f2, f3 FROM public.loct3
   ->  Hash
         Output: l.f1, l.f2, l.f3
         ->  Index Scan using loct3_f1_key on public.loct3 l
               Output: l.f1, l.f2, l.f3
               Index Cond: (l.f1 = 'foo'::varchar2)
(12 rows)

-- can't be sent to remote
explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: ((ft3.f1)::varchar2(1024) = 'foo'::varchar2)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f1 = 'foo'::varchar2 COLLATE "C")
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: ((ft3.f2)::varchar2(1024) = 'foo'::varchar2)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f2 = 'foo'::varchar2 COLLATE "C")
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
                         QUERY PLAN                          
-------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, l.f1, l.f2, l.f3
   Inner Unique: true
   Hash Cond: ((f.f3)::varchar2(10) = (l.f3)::varchar2(10))
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3
         Remote SQL: SELECT f1, f2, f3 FROM public.loct3
   ->  Hash
         Output: l.f1, l.f2, l.f3
         ->  Index Scan using loct3_f1_key on public.loct3 l
               Output: l.f1, l.f2, l.f3
               Index Cond: (l.f1 = 'foo'::varchar2)
(12 rows)

-- ===================================================================
-- test writable foreign table stuff
-- ===================================================================
EXPLAIN (verbose, costs off)
INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2
   Remote SQL: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Subquery Scan on "*SELECT*"
         Output: "*SELECT*"."?column?", "*SELECT*"."?column?_1", NULL::pg_catalog.int4, "*SELECT*"."?column?_2", NULL::timestamp with time zone, NULL::timestamp, NULL::varchar2, 'ft2       '::char(10), NULL::user_enum
         ->  Foreign Scan on public.ft2 ft2_1
               Output: (ft2_1.c1 + '1000'::number), (ft2_1.c2 + '100'::number), ((ft2_1.c3)::text || (ft2_1.c3)::text)
               Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" LIMIT 20::pg_catalog.int8
(8 rows)

INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
INSERT INTO ft2 (c1,c2,c3)
  VALUES (1101,201,'aaa'), (1102,202,'bbb'), (1103,203,'ccc') RETURNING *;
  c1  | c2  | c3  | c4 | c5 | c6 |     c7     | c8 
------+-----+-----+----+----+----+------------+----
 1101 | 201 | aaa |    |    |    | ft2        | 
 1102 | 202 | bbb |    |    |    | ft2        | 
 1103 | 203 | ccc |    |    |    | ft2        | 
(3 rows)

INSERT INTO ft2 (c1,c2,c3) VALUES (1104,204,'ddd'), (1105,205,'eee');
EXPLAIN (verbose, costs off)
UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;              -- can be pushed down
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Update on public.ft2
   Remote SQL: UPDATE "S 1"."T 1" SET c2 = $2, c3 = $3 WHERE ctid = $1
   ->  Foreign Scan on public.ft2
         Output: (c2 + '300'::number), ((c3)::text || '_update3'::text), ctid, ft2.*
         Filter: ((ft2.c1 % '10'::number) = '3'::number)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
(6 rows)

UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
EXPLAIN (verbose, costs off)
UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;  -- can be pushed down
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Update on public.ft2
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: UPDATE "S 1"."T 1" SET c2 = $2, c3 = $3 WHERE ctid = $1 RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
   ->  Foreign Scan on public.ft2
         Output: (c2 + '400'::number), ((c3)::text || '_update7'::text), ctid, ft2.*
         Filter: ((ft2.c1 % '10'::number) = '7'::number)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
(7 rows)

UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;
  c1  | c2  |         c3         |                c4                 |             c5             | c6 |     c7     | c8  
------+-----+--------------------+-----------------------------------+----------------------------+----+------------+-----
 7    | 407 | 00007_update7      | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 17   | 407 | 00017_update7      | 1970-01-18 00:00:00.000000 -08:00 | 1970-01-18 00:00:00.000000 | 7  | 7          | foo
 27   | 407 | 00027_update7      | 1970-01-28 00:00:00.000000 -08:00 | 1970-01-28 00:00:00.000000 | 7  | 7          | foo
 37   | 407 | 00037_update7      | 1970-02-07 00:00:00.000000 -08:00 | 1970-02-07 00:00:00.000000 | 7  | 7          | foo
 47   | 407 | 00047_update7      | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo
 57   | 407 | 00057_update7      | 1970-02-27 00:00:00.000000 -08:00 | 1970-02-27 00:00:00.000000 | 7  | 7          | foo
 67   | 407 | 00067_update7      | 1970-03-09 00:00:00.000000 -08:00 | 1970-03-09 00:00:00.000000 | 7  | 7          | foo
 77   | 407 | 00077_update7      | 1970-03-19 00:00:00.000000 -08:00 | 1970-03-19 00:00:00.000000 | 7  | 7          | foo
 87   | 407 | 00087_update7      | 1970-03-29 00:00:00.000000 -08:00 | 1970-03-29 00:00:00.000000 | 7  | 7          | foo
 97   | 407 | 00097_update7      | 1970-04-08 00:00:00.000000 -08:00 | 1970-04-08 00:00:00.000000 | 7  | 7          | foo
 107  | 407 | 00107_update7      | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 117  | 407 | 00117_update7      | 1970-01-18 00:00:00.000000 -08:00 | 1970-01-18 00:00:00.000000 | 7  | 7          | foo
 127  | 407 | 00127_update7      | 1970-01-28 00:00:00.000000 -08:00 | 1970-01-28 00:00:00.000000 | 7  | 7          | foo
 137  | 407 | 00137_update7      | 1970-02-07 00:00:00.000000 -08:00 | 1970-02-07 00:00:00.000000 | 7  | 7          | foo
 147  | 407 | 00147_update7      | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo
 157  | 407 | 00157_update7      | 1970-02-27 00:00:00.000000 -08:00 | 1970-02-27 00:00:00.000000 | 7  | 7          | foo
 167  | 407 | 00167_update7      | 1970-03-09 00:00:00.000000 -08:00 | 1970-03-09 00:00:00.000000 | 7  | 7          | foo
 177  | 407 | 00177_update7      | 1970-03-19 00:00:00.000000 -08:00 | 1970-03-19 00:00:00.000000 | 7  | 7          | foo
 187  | 407 | 00187_update7      | 1970-03-29 00:00:00.000000 -08:00 | 1970-03-29 00:00:00.000000 | 7  | 7          | foo
 197  | 407 | 00197_update7      | 1970-04-08 00:00:00.000000 -08:00 | 1970-04-08 00:00:00.000000 | 7  | 7          | foo
 207  | 407 | 00207_update7      | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 217  | 407 | 00217_update7      | 1970-01-18 00:00:00.000000 -08:00 | 1970-01-18 00:00:00.000000 | 7  | 7          | foo
 227  | 407 | 00227_update7      | 1970-01-28 00:00:00.000000 -08:00 | 1970-01-28 00:00:00.000000 | 7  | 7          | foo
 237  | 407 | 00237_update7      | 1970-02-07 00:00:00.000000 -08:00 | 1970-02-07 00:00:00.000000 | 7  | 7          | foo
 247  | 407 | 00247_update7      | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo
 257  | 407 | 00257_update7      | 1970-02-27 00:00:00.000000 -08:00 | 1970-02-27 00:00:00.000000 | 7  | 7          | foo
 267  | 407 | 00267_update7      | 1970-03-09 00:00:00.000000 -08:00 | 1970-03-09 00:00:00.000000 | 7  | 7          | foo
 277  | 407 | 00277_update7      | 1970-03-19 00:00:00.000000 -08:00 | 1970-03-19 00:00:00.000000 | 7  | 7          | foo
 287  | 407 | 00287_update7      | 1970-03-29 00:00:00.000000 -08:00 | 1970-03-29 00:00:00.000000 | 7  | 7          | foo
 297  | 407 | 00297_update7      | 1970-04-08 00:00:00.000000 -08:00 | 1970-04-08 00:00:00.000000 | 7  | 7          | foo
 307  | 407 | 00307_update7      | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 317  | 407 | 00317_update7      | 1970-01-18 00:00:00.000000 -08:00 | 1970-01-18 00:00:00.000000 | 7  | 7          | foo
 327  | 407 | 00327_update7      | 1970-01-28 00:00:00.000000 -08:00 | 1970-01-28 00:00:00.000000 | 7  | 7          | foo
 337  | 407 | 00337_update7      | 1970-02-07 00:00:00.000000 -08:00 | 1970-02-07 00:00:00.000000 | 7  | 7          | foo
 347  | 407 | 00347_update7      | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo
 357  | 407 | 00357_update7      | 1970-02-27 00:00:00.000000 -08:00 | 1970-02-27 00:00:00.000000 | 7  | 7          | foo
 367  | 407 | 00367_update7      | 1970-03-09 00:00:00.000000 -08:00 | 1970-03-09 00:00:00.000000 | 7  | 7          | foo
 377  | 407 | 00377_update7      | 1970-03-19 00:00:00.000000 -08:00 | 1970-03-19 00:00:00.000000 | 7  | 7          | foo
 387  | 407 | 00387_update7      | 1970-03-29 00:00:00.000000 -08:00 | 1970-03-29 00:00:00.000000 | 7  | 7          | foo
 397  | 407 | 00397_update7      | 1970-04-08 00:00:00.000000 -08:00 | 1970-04-08 00:00:00.000000 | 7  | 7          | foo
 407  | 407 | 00407_update7      | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 417  | 407 | 00417_update7      | 1970-01-18 00:00:00.000000 -08:00 | 1970-01-18 00:00:00.000000 | 7  | 7          | foo
 427  | 407 | 00427_update7      | 1970-01-28 00:00:00.000000 -08:00 | 1970-01-28 00:00:00.000000 | 7  | 7          | foo
 437  | 407 | 00437_update7      | 1970-02-07 00:00:00.000000 -08:00 | 1970-02-07 00:00:00.000000 | 7  | 7          | foo
 447  | 407 | 00447_update7      | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo
 457  | 407 | 00457_update7      | 1970-02-27 00:00:00.000000 -08:00 | 1970-02-27 00:00:00.000000 | 7  | 7          | foo
 467  | 407 | 00467_update7      | 1970-03-09 00:00:00.000000 -08:00 | 1970-03-09 00:00:00.000000 | 7  | 7          | foo
 477  | 407 | 00477_update7      | 1970-03-19 00:00:00.000000 -08:00 | 1970-03-19 00:00:00.000000 | 7  | 7          | foo
 487  | 407 | 00487_update7      | 1970-03-29 00:00:00.000000 -08:00 | 1970-03-29 00:00:00.000000 | 7  | 7          | foo
 497  | 407 | 00497_update7      | 1970-04-08 00:00:00.000000 -08:00 | 1970-04-08 00:00:00.000000 | 7  | 7          | foo
 507  | 407 | 00507_update7      | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 517  | 407 | 00517_update7      | 1970-01-18 00:00:00.000000 -08:00 | 1970-01-18 00:00:00.000000 | 7  | 7          | foo
 527  | 407 | 00527_update7      | 1970-01-28 00:00:00.000000 -08:00 | 1970-01-28 00:00:00.000000 | 7  | 7          | foo
 537  | 407 | 00537_update7      | 1970-02-07 00:00:00.000000 -08:00 | 1970-02-07 00:00:00.000000 | 7  | 7          | foo
 547  | 407 | 00547_update7      | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo
 557  | 407 | 00557_update7      | 1970-02-27 00:00:00.000000 -08:00 | 1970-02-27 00:00:00.000000 | 7  | 7          | foo
 567  | 407 | 00567_update7      | 1970-03-09 00:00:00.000000 -08:00 | 1970-03-09 00:00:00.000000 | 7  | 7          | foo
 577  | 407 | 00577_update7      | 1970-03-19 00:00:00.000000 -08:00 | 1970-03-19 00:00:00.000000 | 7  | 7          | foo
 587  | 407 | 00587_update7      | 1970-03-29 00:00:00.000000 -08:00 | 1970-03-29 00:00:00.000000 | 7  | 7          | foo
 597  | 407 | 00597_update7      | 1970-04-08 00:00:00.000000 -08:00 | 1970-04-08 00:00:00.000000 | 7  | 7          | foo
 607  | 407 | 00607_update7      | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 617  | 407 | 00617_update7      | 1970-01-18 00:00:00.000000 -08:00 | 1970-01-18 00:00:00.000000 | 7  | 7          | foo
 627  | 407 | 00627_update7      | 1970-01-28 00:00:00.000000 -08:00 | 1970-01-28 00:00:00.000000 | 7  | 7          | foo
 637  | 407 | 00637_update7      | 1970-02-07 00:00:00.000000 -08:00 | 1970-02-07 00:00:00.000000 | 7  | 7          | foo
 647  | 407 | 00647_update7      | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo
 657  | 407 | 00657_update7      | 1970-02-27 00:00:00.000000 -08:00 | 1970-02-27 00:00:00.000000 | 7  | 7          | foo
 667  | 407 | 00667_update7      | 1970-03-09 00:00:00.000000 -08:00 | 1970-03-09 00:00:00.000000 | 7  | 7          | foo
 677  | 407 | 00677_update7      | 1970-03-19 00:00:00.000000 -08:00 | 1970-03-19 00:00:00.000000 | 7  | 7          | foo
 687  | 407 | 00687_update7      | 1970-03-29 00:00:00.000000 -08:00 | 1970-03-29 00:00:00.000000 | 7  | 7          | foo
 697  | 407 | 00697_update7      | 1970-04-08 00:00:00.000000 -08:00 | 1970-04-08 00:00:00.000000 | 7  | 7          | foo
 707  | 407 | 00707_update7      | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 717  | 407 | 00717_update7      | 1970-01-18 00:00:00.000000 -08:00 | 1970-01-18 00:00:00.000000 | 7  | 7          | foo
 727  | 407 | 00727_update7      | 1970-01-28 00:00:00.000000 -08:00 | 1970-01-28 00:00:00.000000 | 7  | 7          | foo
 737  | 407 | 00737_update7      | 1970-02-07 00:00:00.000000 -08:00 | 1970-02-07 00:00:00.000000 | 7  | 7          | foo
 747  | 407 | 00747_update7      | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo
 757  | 407 | 00757_update7      | 1970-02-27 00:00:00.000000 -08:00 | 1970-02-27 00:00:00.000000 | 7  | 7          | foo
 767  | 407 | 00767_update7      | 1970-03-09 00:00:00.000000 -08:00 | 1970-03-09 00:00:00.000000 | 7  | 7          | foo
 777  | 407 | 00777_update7      | 1970-03-19 00:00:00.000000 -08:00 | 1970-03-19 00:00:00.000000 | 7  | 7          | foo
 787  | 407 | 00787_update7      | 1970-03-29 00:00:00.000000 -08:00 | 1970-03-29 00:00:00.000000 | 7  | 7          | foo
 797  | 407 | 00797_update7      | 1970-04-08 00:00:00.000000 -08:00 | 1970-04-08 00:00:00.000000 | 7  | 7          | foo
 807  | 407 | 00807_update7      | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 817  | 407 | 00817_update7      | 1970-01-18 00:00:00.000000 -08:00 | 1970-01-18 00:00:00.000000 | 7  | 7          | foo
 827  | 407 | 00827_update7      | 1970-01-28 00:00:00.000000 -08:00 | 1970-01-28 00:00:00.000000 | 7  | 7          | foo
 837  | 407 | 00837_update7      | 1970-02-07 00:00:00.000000 -08:00 | 1970-02-07 00:00:00.000000 | 7  | 7          | foo
 847  | 407 | 00847_update7      | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo
 857  | 407 | 00857_update7      | 1970-02-27 00:00:00.000000 -08:00 | 1970-02-27 00:00:00.000000 | 7  | 7          | foo
 867  | 407 | 00867_update7      | 1970-03-09 00:00:00.000000 -08:00 | 1970-03-09 00:00:00.000000 | 7  | 7          | foo
 877  | 407 | 00877_update7      | 1970-03-19 00:00:00.000000 -08:00 | 1970-03-19 00:00:00.000000 | 7  | 7          | foo
 887  | 407 | 00887_update7      | 1970-03-29 00:00:00.000000 -08:00 | 1970-03-29 00:00:00.000000 | 7  | 7          | foo
 897  | 407 | 00897_update7      | 1970-04-08 00:00:00.000000 -08:00 | 1970-04-08 00:00:00.000000 | 7  | 7          | foo
 907  | 407 | 00907_update7      | 1970-01-08 00:00:00.000000 -08:00 | 1970-01-08 00:00:00.000000 | 7  | 7          | foo
 917  | 407 | 00917_update7      | 1970-01-18 00:00:00.000000 -08:00 | 1970-01-18 00:00:00.000000 | 7  | 7          | foo
 927  | 407 | 00927_update7      | 1970-01-28 00:00:00.000000 -08:00 | 1970-01-28 00:00:00.000000 | 7  | 7          | foo
 937  | 407 | 00937_update7      | 1970-02-07 00:00:00.000000 -08:00 | 1970-02-07 00:00:00.000000 | 7  | 7          | foo
 947  | 407 | 00947_update7      | 1970-02-17 00:00:00.000000 -08:00 | 1970-02-17 00:00:00.000000 | 7  | 7          | foo
 957  | 407 | 00957_update7      | 1970-02-27 00:00:00.000000 -08:00 | 1970-02-27 00:00:00.000000 | 7  | 7          | foo
 967  | 407 | 00967_update7      | 1970-03-09 00:00:00.000000 -08:00 | 1970-03-09 00:00:00.000000 | 7  | 7          | foo
 977  | 407 | 00977_update7      | 1970-03-19 00:00:00.000000 -08:00 | 1970-03-19 00:00:00.000000 | 7  | 7          | foo
 987  | 407 | 00987_update7      | 1970-03-29 00:00:00.000000 -08:00 | 1970-03-29 00:00:00.000000 | 7  | 7          | foo
 997  | 407 | 00997_update7      | 1970-04-08 00:00:00.000000 -08:00 | 1970-04-08 00:00:00.000000 | 7  | 7          | foo
 1007 | 507 | 0000700007_update7 |                                   |                            |    | ft2        | 
 1017 | 507 | 0001700017_update7 |                                   |                            |    | ft2        | 
(102 rows)

EXPLAIN (verbose, costs off)
UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
  FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;                               -- can be pushed down
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2
   Remote SQL: UPDATE "S 1"."T 1" SET c2 = $2, c3 = $3, c7 = $4 WHERE ctid = $1
   ->  Hash Join
         Output: (ft2.c2 + '500'::number), ((ft2.c3)::text || '_update9'::text), 'ft2       '::char(10), ft2.ctid, ft2.*, ft1.*
         Hash Cond: (ft2.c2 = ft1.c1)
         ->  Foreign Scan on public.ft2
               Output: ft2.c2, ft2.c3, ft2.ctid, ft2.*
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
         ->  Hash
               Output: ft1.*, ft1.c1
               ->  Foreign Scan on public.ft1
                     Output: ft1.*, ft1.c1
                     Filter: ((ft1.c1 % '10'::number) = '9'::number)
                     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(14 rows)

UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
  FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;
EXPLAIN (verbose, costs off)
  DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;                               -- can be pushed down
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Delete on public.ft2
   Output: c1, c4
   Remote SQL: DELETE FROM "S 1"."T 1" WHERE ctid = $1 RETURNING "C 1", c4
   ->  Foreign Scan on public.ft2
         Output: ctid
         Filter: ((ft2.c1 % '10'::number) = '5'::number)
         Remote SQL: SELECT "C 1", ctid FROM "S 1"."T 1" FOR UPDATE
(7 rows)

DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;
  c1  |                c4                 
------+-----------------------------------
 5    | 1970-01-06 00:00:00.000000 -08:00
 15   | 1970-01-16 00:00:00.000000 -08:00
 25   | 1970-01-26 00:00:00.000000 -08:00
 35   | 1970-02-05 00:00:00.000000 -08:00
 45   | 1970-02-15 00:00:00.000000 -08:00
 55   | 1970-02-25 00:00:00.000000 -08:00
 65   | 1970-03-07 00:00:00.000000 -08:00
 75   | 1970-03-17 00:00:00.000000 -08:00
 85   | 1970-03-27 00:00:00.000000 -08:00
 95   | 1970-04-06 00:00:00.000000 -08:00
 105  | 1970-01-06 00:00:00.000000 -08:00
 115  | 1970-01-16 00:00:00.000000 -08:00
 125  | 1970-01-26 00:00:00.000000 -08:00
 135  | 1970-02-05 00:00:00.000000 -08:00
 145  | 1970-02-15 00:00:00.000000 -08:00
 155  | 1970-02-25 00:00:00.000000 -08:00
 165  | 1970-03-07 00:00:00.000000 -08:00
 175  | 1970-03-17 00:00:00.000000 -08:00
 185  | 1970-03-27 00:00:00.000000 -08:00
 195  | 1970-04-06 00:00:00.000000 -08:00
 205  | 1970-01-06 00:00:00.000000 -08:00
 215  | 1970-01-16 00:00:00.000000 -08:00
 225  | 1970-01-26 00:00:00.000000 -08:00
 235  | 1970-02-05 00:00:00.000000 -08:00
 245  | 1970-02-15 00:00:00.000000 -08:00
 255  | 1970-02-25 00:00:00.000000 -08:00
 265  | 1970-03-07 00:00:00.000000 -08:00
 275  | 1970-03-17 00:00:00.000000 -08:00
 285  | 1970-03-27 00:00:00.000000 -08:00
 295  | 1970-04-06 00:00:00.000000 -08:00
 305  | 1970-01-06 00:00:00.000000 -08:00
 315  | 1970-01-16 00:00:00.000000 -08:00
 325  | 1970-01-26 00:00:00.000000 -08:00
 335  | 1970-02-05 00:00:00.000000 -08:00
 345  | 1970-02-15 00:00:00.000000 -08:00
 355  | 1970-02-25 00:00:00.000000 -08:00
 365  | 1970-03-07 00:00:00.000000 -08:00
 375  | 1970-03-17 00:00:00.000000 -08:00
 385  | 1970-03-27 00:00:00.000000 -08:00
 395  | 1970-04-06 00:00:00.000000 -08:00
 405  | 1970-01-06 00:00:00.000000 -08:00
 415  | 1970-01-16 00:00:00.000000 -08:00
 425  | 1970-01-26 00:00:00.000000 -08:00
 435  | 1970-02-05 00:00:00.000000 -08:00
 445  | 1970-02-15 00:00:00.000000 -08:00
 455  | 1970-02-25 00:00:00.000000 -08:00
 465  | 1970-03-07 00:00:00.000000 -08:00
 475  | 1970-03-17 00:00:00.000000 -08:00
 485  | 1970-03-27 00:00:00.000000 -08:00
 495  | 1970-04-06 00:00:00.000000 -08:00
 505  | 1970-01-06 00:00:00.000000 -08:00
 515  | 1970-01-16 00:00:00.000000 -08:00
 525  | 1970-01-26 00:00:00.000000 -08:00
 535  | 1970-02-05 00:00:00.000000 -08:00
 545  | 1970-02-15 00:00:00.000000 -08:00
 555  | 1970-02-25 00:00:00.000000 -08:00
 565  | 1970-03-07 00:00:00.000000 -08:00
 575  | 1970-03-17 00:00:00.000000 -08:00
 585  | 1970-03-27 00:00:00.000000 -08:00
 595  | 1970-04-06 00:00:00.000000 -08:00
 605  | 1970-01-06 00:00:00.000000 -08:00
 615  | 1970-01-16 00:00:00.000000 -08:00
 625  | 1970-01-26 00:00:00.000000 -08:00
 635  | 1970-02-05 00:00:00.000000 -08:00
 645  | 1970-02-15 00:00:00.000000 -08:00
 655  | 1970-02-25 00:00:00.000000 -08:00
 665  | 1970-03-07 00:00:00.000000 -08:00
 675  | 1970-03-17 00:00:00.000000 -08:00
 685  | 1970-03-27 00:00:00.000000 -08:00
 695  | 1970-04-06 00:00:00.000000 -08:00
 705  | 1970-01-06 00:00:00.000000 -08:00
 715  | 1970-01-16 00:00:00.000000 -08:00
 725  | 1970-01-26 00:00:00.000000 -08:00
 735  | 1970-02-05 00:00:00.000000 -08:00
 745  | 1970-02-15 00:00:00.000000 -08:00
 755  | 1970-02-25 00:00:00.000000 -08:00
 765  | 1970-03-07 00:00:00.000000 -08:00
 775  | 1970-03-17 00:00:00.000000 -08:00
 785  | 1970-03-27 00:00:00.000000 -08:00
 795  | 1970-04-06 00:00:00.000000 -08:00
 805  | 1970-01-06 00:00:00.000000 -08:00
 815  | 1970-01-16 00:00:00.000000 -08:00
 825  | 1970-01-26 00:00:00.000000 -08:00
 835  | 1970-02-05 00:00:00.000000 -08:00
 845  | 1970-02-15 00:00:00.000000 -08:00
 855  | 1970-02-25 00:00:00.000000 -08:00
 865  | 1970-03-07 00:00:00.000000 -08:00
 875  | 1970-03-17 00:00:00.000000 -08:00
 885  | 1970-03-27 00:00:00.000000 -08:00
 895  | 1970-04-06 00:00:00.000000 -08:00
 905  | 1970-01-06 00:00:00.000000 -08:00
 915  | 1970-01-16 00:00:00.000000 -08:00
 925  | 1970-01-26 00:00:00.000000 -08:00
 935  | 1970-02-05 00:00:00.000000 -08:00
 945  | 1970-02-15 00:00:00.000000 -08:00
 955  | 1970-02-25 00:00:00.000000 -08:00
 965  | 1970-03-07 00:00:00.000000 -08:00
 975  | 1970-03-17 00:00:00.000000 -08:00
 985  | 1970-03-27 00:00:00.000000 -08:00
 995  | 1970-04-06 00:00:00.000000 -08:00
 1005 | 
 1015 | 
 1105 | 
(103 rows)

EXPLAIN (verbose, costs off)
DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;                -- can be pushed down
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Delete on public.ft2
   Remote SQL: DELETE FROM "S 1"."T 1" WHERE ctid = $1
   ->  Hash Join
         Output: ft2.ctid, ft1.*
         Hash Cond: (ft2.c2 = ft1.c1)
         ->  Foreign Scan on public.ft2
               Output: ft2.ctid, ft2.c2
               Remote SQL: SELECT c2, ctid FROM "S 1"."T 1" FOR UPDATE
         ->  Hash
               Output: ft1.*, ft1.c1
               ->  Foreign Scan on public.ft1
                     Output: ft1.*, ft1.c1
                     Filter: ((ft1.c1 % '10'::number) = '2'::number)
                     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(14 rows)

DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;
SELECT c1,c2,c3,c4 FROM ft2 ORDER BY c1;
  c1  | c2  |         c3         |                c4                 
------+-----+--------------------+-----------------------------------
 1    | 1   | 00001              | 1970-01-02 00:00:00.000000 -08:00
 3    | 303 | 00003_update3      | 1970-01-04 00:00:00.000000 -08:00
 4    | 4   | 00004              | 1970-01-05 00:00:00.000000 -08:00
 6    | 6   | 00006              | 1970-01-07 00:00:00.000000 -08:00
 7    | 407 | 00007_update7      | 1970-01-08 00:00:00.000000 -08:00
 8    | 8   | 00008              | 1970-01-09 00:00:00.000000 -08:00
 9    | 509 | 00009_update9      | 1970-01-10 00:00:00.000000 -08:00
 10   | 0   | 00010              | 1970-01-11 00:00:00.000000 -08:00
 11   | 1   | 00011              | 1970-01-12 00:00:00.000000 -08:00
 13   | 303 | 00013_update3      | 1970-01-14 00:00:00.000000 -08:00
 14   | 4   | 00014              | 1970-01-15 00:00:00.000000 -08:00
 16   | 6   | 00016              | 1970-01-17 00:00:00.000000 -08:00
 17   | 407 | 00017_update7      | 1970-01-18 00:00:00.000000 -08:00
 18   | 8   | 00018              | 1970-01-19 00:00:00.000000 -08:00
 19   | 509 | 00019_update9      | 1970-01-20 00:00:00.000000 -08:00
 20   | 0   | 00020              | 1970-01-21 00:00:00.000000 -08:00
 21   | 1   | 00021              | 1970-01-22 00:00:00.000000 -08:00
 23   | 303 | 00023_update3      | 1970-01-24 00:00:00.000000 -08:00
 24   | 4   | 00024              | 1970-01-25 00:00:00.000000 -08:00
 26   | 6   | 00026              | 1970-01-27 00:00:00.000000 -08:00
 27   | 407 | 00027_update7      | 1970-01-28 00:00:00.000000 -08:00
 28   | 8   | 00028              | 1970-01-29 00:00:00.000000 -08:00
 29   | 509 | 00029_update9      | 1970-01-30 00:00:00.000000 -08:00
 30   | 0   | 00030              | 1970-01-31 00:00:00.000000 -08:00
 31   | 1   | 00031              | 1970-02-01 00:00:00.000000 -08:00
 33   | 303 | 00033_update3      | 1970-02-03 00:00:00.000000 -08:00
 34   | 4   | 00034              | 1970-02-04 00:00:00.000000 -08:00
 36   | 6   | 00036              | 1970-02-06 00:00:00.000000 -08:00
 37   | 407 | 00037_update7      | 1970-02-07 00:00:00.000000 -08:00
 38   | 8   | 00038              | 1970-02-08 00:00:00.000000 -08:00
 39   | 509 | 00039_update9      | 1970-02-09 00:00:00.000000 -08:00
 40   | 0   | 00040              | 1970-02-10 00:00:00.000000 -08:00
 41   | 1   | 00041              | 1970-02-11 00:00:00.000000 -08:00
 43   | 303 | 00043_update3      | 1970-02-13 00:00:00.000000 -08:00
 44   | 4   | 00044              | 1970-02-14 00:00:00.000000 -08:00
 46   | 6   | 00046              | 1970-02-16 00:00:00.000000 -08:00
 47   | 407 | 00047_update7      | 1970-02-17 00:00:00.000000 -08:00
 48   | 8   | 00048              | 1970-02-18 00:00:00.000000 -08:00
 49   | 509 | 00049_update9      | 1970-02-19 00:00:00.000000 -08:00
 50   | 0   | 00050              | 1970-02-20 00:00:00.000000 -08:00
 51   | 1   | 00051              | 1970-02-21 00:00:00.000000 -08:00
 53   | 303 | 00053_update3      | 1970-02-23 00:00:00.000000 -08:00
 54   | 4   | 00054              | 1970-02-24 00:00:00.000000 -08:00
 56   | 6   | 00056              | 1970-02-26 00:00:00.000000 -08:00
 57   | 407 | 00057_update7      | 1970-02-27 00:00:00.000000 -08:00
 58   | 8   | 00058              | 1970-02-28 00:00:00.000000 -08:00
 59   | 509 | 00059_update9      | 1970-03-01 00:00:00.000000 -08:00
 60   | 0   | 00060              | 1970-03-02 00:00:00.000000 -08:00
 61   | 1   | 00061              | 1970-03-03 00:00:00.000000 -08:00
 63   | 303 | 00063_update3      | 1970-03-05 00:00:00.000000 -08:00
 64   | 4   | 00064              | 1970-03-06 00:00:00.000000 -08:00
 66   | 6   | 00066              | 1970-03-08 00:00:00.000000 -08:00
 67   | 407 | 00067_update7      | 1970-03-09 00:00:00.000000 -08:00
 68   | 8   | 00068              | 1970-03-10 00:00:00.000000 -08:00
 69   | 509 | 00069_update9      | 1970-03-11 00:00:00.000000 -08:00
 70   | 0   | 00070              | 1970-03-12 00:00:00.000000 -08:00
 71   | 1   | 00071              | 1970-03-13 00:00:00.000000 -08:00
 73   | 303 | 00073_update3      | 1970-03-15 00:00:00.000000 -08:00
 74   | 4   | 00074              | 1970-03-16 00:00:00.000000 -08:00
 76   | 6   | 00076              | 1970-03-18 00:00:00.000000 -08:00
 77   | 407 | 00077_update7      | 1970-03-19 00:00:00.000000 -08:00
 78   | 8   | 00078              | 1970-03-20 00:00:00.000000 -08:00
 79   | 509 | 00079_update9      | 1970-03-21 00:00:00.000000 -08:00
 80   | 0   | 00080              | 1970-03-22 00:00:00.000000 -08:00
 81   | 1   | 00081              | 1970-03-23 00:00:00.000000 -08:00
 83   | 303 | 00083_update3      | 1970-03-25 00:00:00.000000 -08:00
 84   | 4   | 00084              | 1970-03-26 00:00:00.000000 -08:00
 86   | 6   | 00086              | 1970-03-28 00:00:00.000000 -08:00
 87   | 407 | 00087_update7      | 1970-03-29 00:00:00.000000 -08:00
 88   | 8   | 00088              | 1970-03-30 00:00:00.000000 -08:00
 89   | 509 | 00089_update9      | 1970-03-31 00:00:00.000000 -08:00
 90   | 0   | 00090              | 1970-04-01 00:00:00.000000 -08:00
 91   | 1   | 00091              | 1970-04-02 00:00:00.000000 -08:00
 93   | 303 | 00093_update3      | 1970-04-04 00:00:00.000000 -08:00
 94   | 4   | 00094              | 1970-04-05 00:00:00.000000 -08:00
 96   | 6   | 00096              | 1970-04-07 00:00:00.000000 -08:00
 97   | 407 | 00097_update7      | 1970-04-08 00:00:00.000000 -08:00
 98   | 8   | 00098              | 1970-04-09 00:00:00.000000 -08:00
 99   | 509 | 00099_update9      | 1970-04-10 00:00:00.000000 -08:00
 100  | 0   | 00100              | 1970-01-01 00:00:00.000000 -08:00
 101  | 1   | 00101              | 1970-01-02 00:00:00.000000 -08:00
 103  | 303 | 00103_update3      | 1970-01-04 00:00:00.000000 -08:00
 104  | 4   | 00104              | 1970-01-05 00:00:00.000000 -08:00
 106  | 6   | 00106              | 1970-01-07 00:00:00.000000 -08:00
 107  | 407 | 00107_update7      | 1970-01-08 00:00:00.000000 -08:00
 108  | 8   | 00108              | 1970-01-09 00:00:00.000000 -08:00
 109  | 509 | 00109_update9      | 1970-01-10 00:00:00.000000 -08:00
 110  | 0   | 00110              | 1970-01-11 00:00:00.000000 -08:00
 111  | 1   | 00111              | 1970-01-12 00:00:00.000000 -08:00
 113  | 303 | 00113_update3      | 1970-01-14 00:00:00.000000 -08:00
 114  | 4   | 00114              | 1970-01-15 00:00:00.000000 -08:00
 116  | 6   | 00116              | 1970-01-17 00:00:00.000000 -08:00
 117  | 407 | 00117_update7      | 1970-01-18 00:00:00.000000 -08:00
 118  | 8   | 00118              | 1970-01-19 00:00:00.000000 -08:00
 119  | 509 | 00119_update9      | 1970-01-20 00:00:00.000000 -08:00
 120  | 0   | 00120              | 1970-01-21 00:00:00.000000 -08:00
 121  | 1   | 00121              | 1970-01-22 00:00:00.000000 -08:00
 123  | 303 | 00123_update3      | 1970-01-24 00:00:00.000000 -08:00
 124  | 4   | 00124              | 1970-01-25 00:00:00.000000 -08:00
 126  | 6   | 00126              | 1970-01-27 00:00:00.000000 -08:00
 127  | 407 | 00127_update7      | 1970-01-28 00:00:00.000000 -08:00
 128  | 8   | 00128              | 1970-01-29 00:00:00.000000 -08:00
 129  | 509 | 00129_update9      | 1970-01-30 00:00:00.000000 -08:00
 130  | 0   | 00130              | 1970-01-31 00:00:00.000000 -08:00
 131  | 1   | 00131              | 1970-02-01 00:00:00.000000 -08:00
 133  | 303 | 00133_update3      | 1970-02-03 00:00:00.000000 -08:00
 134  | 4   | 00134              | 1970-02-04 00:00:00.000000 -08:00
 136  | 6   | 00136              | 1970-02-06 00:00:00.000000 -08:00
 137  | 407 | 00137_update7      | 1970-02-07 00:00:00.000000 -08:00
 138  | 8   | 00138              | 1970-02-08 00:00:00.000000 -08:00
 139  | 509 | 00139_update9      | 1970-02-09 00:00:00.000000 -08:00
 140  | 0   | 00140              | 1970-02-10 00:00:00.000000 -08:00
 141  | 1   | 00141              | 1970-02-11 00:00:00.000000 -08:00
 143  | 303 | 00143_update3      | 1970-02-13 00:00:00.000000 -08:00
 144  | 4   | 00144              | 1970-02-14 00:00:00.000000 -08:00
 146  | 6   | 00146              | 1970-02-16 00:00:00.000000 -08:00
 147  | 407 | 00147_update7      | 1970-02-17 00:00:00.000000 -08:00
 148  | 8   | 00148              | 1970-02-18 00:00:00.000000 -08:00
 149  | 509 | 00149_update9      | 1970-02-19 00:00:00.000000 -08:00
 150  | 0   | 00150              | 1970-02-20 00:00:00.000000 -08:00
 151  | 1   | 00151              | 1970-02-21 00:00:00.000000 -08:00
 153  | 303 | 00153_update3      | 1970-02-23 00:00:00.000000 -08:00
 154  | 4   | 00154              | 1970-02-24 00:00:00.000000 -08:00
 156  | 6   | 00156              | 1970-02-26 00:00:00.000000 -08:00
 157  | 407 | 00157_update7      | 1970-02-27 00:00:00.000000 -08:00
 158  | 8   | 00158              | 1970-02-28 00:00:00.000000 -08:00
 159  | 509 | 00159_update9      | 1970-03-01 00:00:00.000000 -08:00
 160  | 0   | 00160              | 1970-03-02 00:00:00.000000 -08:00
 161  | 1   | 00161              | 1970-03-03 00:00:00.000000 -08:00
 163  | 303 | 00163_update3      | 1970-03-05 00:00:00.000000 -08:00
 164  | 4   | 00164              | 1970-03-06 00:00:00.000000 -08:00
 166  | 6   | 00166              | 1970-03-08 00:00:00.000000 -08:00
 167  | 407 | 00167_update7      | 1970-03-09 00:00:00.000000 -08:00
 168  | 8   | 00168              | 1970-03-10 00:00:00.000000 -08:00
 169  | 509 | 00169_update9      | 1970-03-11 00:00:00.000000 -08:00
 170  | 0   | 00170              | 1970-03-12 00:00:00.000000 -08:00
 171  | 1   | 00171              | 1970-03-13 00:00:00.000000 -08:00
 173  | 303 | 00173_update3      | 1970-03-15 00:00:00.000000 -08:00
 174  | 4   | 00174              | 1970-03-16 00:00:00.000000 -08:00
 176  | 6   | 00176              | 1970-03-18 00:00:00.000000 -08:00
 177  | 407 | 00177_update7      | 1970-03-19 00:00:00.000000 -08:00
 178  | 8   | 00178              | 1970-03-20 00:00:00.000000 -08:00
 179  | 509 | 00179_update9      | 1970-03-21 00:00:00.000000 -08:00
 180  | 0   | 00180              | 1970-03-22 00:00:00.000000 -08:00
 181  | 1   | 00181              | 1970-03-23 00:00:00.000000 -08:00
 183  | 303 | 00183_update3      | 1970-03-25 00:00:00.000000 -08:00
 184  | 4   | 00184              | 1970-03-26 00:00:00.000000 -08:00
 186  | 6   | 00186              | 1970-03-28 00:00:00.000000 -08:00
 187  | 407 | 00187_update7      | 1970-03-29 00:00:00.000000 -08:00
 188  | 8   | 00188              | 1970-03-30 00:00:00.000000 -08:00
 189  | 509 | 00189_update9      | 1970-03-31 00:00:00.000000 -08:00
 190  | 0   | 00190              | 1970-04-01 00:00:00.000000 -08:00
 191  | 1   | 00191              | 1970-04-02 00:00:00.000000 -08:00
 193  | 303 | 00193_update3      | 1970-04-04 00:00:00.000000 -08:00
 194  | 4   | 00194              | 1970-04-05 00:00:00.000000 -08:00
 196  | 6   | 00196              | 1970-04-07 00:00:00.000000 -08:00
 197  | 407 | 00197_update7      | 1970-04-08 00:00:00.000000 -08:00
 198  | 8   | 00198              | 1970-04-09 00:00:00.000000 -08:00
 199  | 509 | 00199_update9      | 1970-04-10 00:00:00.000000 -08:00
 200  | 0   | 00200              | 1970-01-01 00:00:00.000000 -08:00
 201  | 1   | 00201              | 1970-01-02 00:00:00.000000 -08:00
 203  | 303 | 00203_update3      | 1970-01-04 00:00:00.000000 -08:00
 204  | 4   | 00204              | 1970-01-05 00:00:00.000000 -08:00
 206  | 6   | 00206              | 1970-01-07 00:00:00.000000 -08:00
 207  | 407 | 00207_update7      | 1970-01-08 00:00:00.000000 -08:00
 208  | 8   | 00208              | 1970-01-09 00:00:00.000000 -08:00
 209  | 509 | 00209_update9      | 1970-01-10 00:00:00.000000 -08:00
 210  | 0   | 00210              | 1970-01-11 00:00:00.000000 -08:00
 211  | 1   | 00211              | 1970-01-12 00:00:00.000000 -08:00
 213  | 303 | 00213_update3      | 1970-01-14 00:00:00.000000 -08:00
 214  | 4   | 00214              | 1970-01-15 00:00:00.000000 -08:00
 216  | 6   | 00216              | 1970-01-17 00:00:00.000000 -08:00
 217  | 407 | 00217_update7      | 1970-01-18 00:00:00.000000 -08:00
 218  | 8   | 00218              | 1970-01-19 00:00:00.000000 -08:00
 219  | 509 | 00219_update9      | 1970-01-20 00:00:00.000000 -08:00
 220  | 0   | 00220              | 1970-01-21 00:00:00.000000 -08:00
 221  | 1   | 00221              | 1970-01-22 00:00:00.000000 -08:00
 223  | 303 | 00223_update3      | 1970-01-24 00:00:00.000000 -08:00
 224  | 4   | 00224              | 1970-01-25 00:00:00.000000 -08:00
 226  | 6   | 00226              | 1970-01-27 00:00:00.000000 -08:00
 227  | 407 | 00227_update7      | 1970-01-28 00:00:00.000000 -08:00
 228  | 8   | 00228              | 1970-01-29 00:00:00.000000 -08:00
 229  | 509 | 00229_update9      | 1970-01-30 00:00:00.000000 -08:00
 230  | 0   | 00230              | 1970-01-31 00:00:00.000000 -08:00
 231  | 1   | 00231              | 1970-02-01 00:00:00.000000 -08:00
 233  | 303 | 00233_update3      | 1970-02-03 00:00:00.000000 -08:00
 234  | 4   | 00234              | 1970-02-04 00:00:00.000000 -08:00
 236  | 6   | 00236              | 1970-02-06 00:00:00.000000 -08:00
 237  | 407 | 00237_update7      | 1970-02-07 00:00:00.000000 -08:00
 238  | 8   | 00238              | 1970-02-08 00:00:00.000000 -08:00
 239  | 509 | 00239_update9      | 1970-02-09 00:00:00.000000 -08:00
 240  | 0   | 00240              | 1970-02-10 00:00:00.000000 -08:00
 241  | 1   | 00241              | 1970-02-11 00:00:00.000000 -08:00
 243  | 303 | 00243_update3      | 1970-02-13 00:00:00.000000 -08:00
 244  | 4   | 00244              | 1970-02-14 00:00:00.000000 -08:00
 246  | 6   | 00246              | 1970-02-16 00:00:00.000000 -08:00
 247  | 407 | 00247_update7      | 1970-02-17 00:00:00.000000 -08:00
 248  | 8   | 00248              | 1970-02-18 00:00:00.000000 -08:00
 249  | 509 | 00249_update9      | 1970-02-19 00:00:00.000000 -08:00
 250  | 0   | 00250              | 1970-02-20 00:00:00.000000 -08:00
 251  | 1   | 00251              | 1970-02-21 00:00:00.000000 -08:00
 253  | 303 | 00253_update3      | 1970-02-23 00:00:00.000000 -08:00
 254  | 4   | 00254              | 1970-02-24 00:00:00.000000 -08:00
 256  | 6   | 00256              | 1970-02-26 00:00:00.000000 -08:00
 257  | 407 | 00257_update7      | 1970-02-27 00:00:00.000000 -08:00
 258  | 8   | 00258              | 1970-02-28 00:00:00.000000 -08:00
 259  | 509 | 00259_update9      | 1970-03-01 00:00:00.000000 -08:00
 260  | 0   | 00260              | 1970-03-02 00:00:00.000000 -08:00
 261  | 1   | 00261              | 1970-03-03 00:00:00.000000 -08:00
 263  | 303 | 00263_update3      | 1970-03-05 00:00:00.000000 -08:00
 264  | 4   | 00264              | 1970-03-06 00:00:00.000000 -08:00
 266  | 6   | 00266              | 1970-03-08 00:00:00.000000 -08:00
 267  | 407 | 00267_update7      | 1970-03-09 00:00:00.000000 -08:00
 268  | 8   | 00268              | 1970-03-10 00:00:00.000000 -08:00
 269  | 509 | 00269_update9      | 1970-03-11 00:00:00.000000 -08:00
 270  | 0   | 00270              | 1970-03-12 00:00:00.000000 -08:00
 271  | 1   | 00271              | 1970-03-13 00:00:00.000000 -08:00
 273  | 303 | 00273_update3      | 1970-03-15 00:00:00.000000 -08:00
 274  | 4   | 00274              | 1970-03-16 00:00:00.000000 -08:00
 276  | 6   | 00276              | 1970-03-18 00:00:00.000000 -08:00
 277  | 407 | 00277_update7      | 1970-03-19 00:00:00.000000 -08:00
 278  | 8   | 00278              | 1970-03-20 00:00:00.000000 -08:00
 279  | 509 | 00279_update9      | 1970-03-21 00:00:00.000000 -08:00
 280  | 0   | 00280              | 1970-03-22 00:00:00.000000 -08:00
 281  | 1   | 00281              | 1970-03-23 00:00:00.000000 -08:00
 283  | 303 | 00283_update3      | 1970-03-25 00:00:00.000000 -08:00
 284  | 4   | 00284              | 1970-03-26 00:00:00.000000 -08:00
 286  | 6   | 00286              | 1970-03-28 00:00:00.000000 -08:00
 287  | 407 | 00287_update7      | 1970-03-29 00:00:00.000000 -08:00
 288  | 8   | 00288              | 1970-03-30 00:00:00.000000 -08:00
 289  | 509 | 00289_update9      | 1970-03-31 00:00:00.000000 -08:00
 290  | 0   | 00290              | 1970-04-01 00:00:00.000000 -08:00
 291  | 1   | 00291              | 1970-04-02 00:00:00.000000 -08:00
 293  | 303 | 00293_update3      | 1970-04-04 00:00:00.000000 -08:00
 294  | 4   | 00294              | 1970-04-05 00:00:00.000000 -08:00
 296  | 6   | 00296              | 1970-04-07 00:00:00.000000 -08:00
 297  | 407 | 00297_update7      | 1970-04-08 00:00:00.000000 -08:00
 298  | 8   | 00298              | 1970-04-09 00:00:00.000000 -08:00
 299  | 509 | 00299_update9      | 1970-04-10 00:00:00.000000 -08:00
 300  | 0   | 00300              | 1970-01-01 00:00:00.000000 -08:00
 301  | 1   | 00301              | 1970-01-02 00:00:00.000000 -08:00
 303  | 303 | 00303_update3      | 1970-01-04 00:00:00.000000 -08:00
 304  | 4   | 00304              | 1970-01-05 00:00:00.000000 -08:00
 306  | 6   | 00306              | 1970-01-07 00:00:00.000000 -08:00
 307  | 407 | 00307_update7      | 1970-01-08 00:00:00.000000 -08:00
 308  | 8   | 00308              | 1970-01-09 00:00:00.000000 -08:00
 309  | 509 | 00309_update9      | 1970-01-10 00:00:00.000000 -08:00
 310  | 0   | 00310              | 1970-01-11 00:00:00.000000 -08:00
 311  | 1   | 00311              | 1970-01-12 00:00:00.000000 -08:00
 313  | 303 | 00313_update3      | 1970-01-14 00:00:00.000000 -08:00
 314  | 4   | 00314              | 1970-01-15 00:00:00.000000 -08:00
 316  | 6   | 00316              | 1970-01-17 00:00:00.000000 -08:00
 317  | 407 | 00317_update7      | 1970-01-18 00:00:00.000000 -08:00
 318  | 8   | 00318              | 1970-01-19 00:00:00.000000 -08:00
 319  | 509 | 00319_update9      | 1970-01-20 00:00:00.000000 -08:00
 320  | 0   | 00320              | 1970-01-21 00:00:00.000000 -08:00
 321  | 1   | 00321              | 1970-01-22 00:00:00.000000 -08:00
 323  | 303 | 00323_update3      | 1970-01-24 00:00:00.000000 -08:00
 324  | 4   | 00324              | 1970-01-25 00:00:00.000000 -08:00
 326  | 6   | 00326              | 1970-01-27 00:00:00.000000 -08:00
 327  | 407 | 00327_update7      | 1970-01-28 00:00:00.000000 -08:00
 328  | 8   | 00328              | 1970-01-29 00:00:00.000000 -08:00
 329  | 509 | 00329_update9      | 1970-01-30 00:00:00.000000 -08:00
 330  | 0   | 00330              | 1970-01-31 00:00:00.000000 -08:00
 331  | 1   | 00331              | 1970-02-01 00:00:00.000000 -08:00
 333  | 303 | 00333_update3      | 1970-02-03 00:00:00.000000 -08:00
 334  | 4   | 00334              | 1970-02-04 00:00:00.000000 -08:00
 336  | 6   | 00336              | 1970-02-06 00:00:00.000000 -08:00
 337  | 407 | 00337_update7      | 1970-02-07 00:00:00.000000 -08:00
 338  | 8   | 00338              | 1970-02-08 00:00:00.000000 -08:00
 339  | 509 | 00339_update9      | 1970-02-09 00:00:00.000000 -08:00
 340  | 0   | 00340              | 1970-02-10 00:00:00.000000 -08:00
 341  | 1   | 00341              | 1970-02-11 00:00:00.000000 -08:00
 343  | 303 | 00343_update3      | 1970-02-13 00:00:00.000000 -08:00
 344  | 4   | 00344              | 1970-02-14 00:00:00.000000 -08:00
 346  | 6   | 00346              | 1970-02-16 00:00:00.000000 -08:00
 347  | 407 | 00347_update7      | 1970-02-17 00:00:00.000000 -08:00
 348  | 8   | 00348              | 1970-02-18 00:00:00.000000 -08:00
 349  | 509 | 00349_update9      | 1970-02-19 00:00:00.000000 -08:00
 350  | 0   | 00350              | 1970-02-20 00:00:00.000000 -08:00
 351  | 1   | 00351              | 1970-02-21 00:00:00.000000 -08:00
 353  | 303 | 00353_update3      | 1970-02-23 00:00:00.000000 -08:00
 354  | 4   | 00354              | 1970-02-24 00:00:00.000000 -08:00
 356  | 6   | 00356              | 1970-02-26 00:00:00.000000 -08:00
 357  | 407 | 00357_update7      | 1970-02-27 00:00:00.000000 -08:00
 358  | 8   | 00358              | 1970-02-28 00:00:00.000000 -08:00
 359  | 509 | 00359_update9      | 1970-03-01 00:00:00.000000 -08:00
 360  | 0   | 00360              | 1970-03-02 00:00:00.000000 -08:00
 361  | 1   | 00361              | 1970-03-03 00:00:00.000000 -08:00
 363  | 303 | 00363_update3      | 1970-03-05 00:00:00.000000 -08:00
 364  | 4   | 00364              | 1970-03-06 00:00:00.000000 -08:00
 366  | 6   | 00366              | 1970-03-08 00:00:00.000000 -08:00
 367  | 407 | 00367_update7      | 1970-03-09 00:00:00.000000 -08:00
 368  | 8   | 00368              | 1970-03-10 00:00:00.000000 -08:00
 369  | 509 | 00369_update9      | 1970-03-11 00:00:00.000000 -08:00
 370  | 0   | 00370              | 1970-03-12 00:00:00.000000 -08:00
 371  | 1   | 00371              | 1970-03-13 00:00:00.000000 -08:00
 373  | 303 | 00373_update3      | 1970-03-15 00:00:00.000000 -08:00
 374  | 4   | 00374              | 1970-03-16 00:00:00.000000 -08:00
 376  | 6   | 00376              | 1970-03-18 00:00:00.000000 -08:00
 377  | 407 | 00377_update7      | 1970-03-19 00:00:00.000000 -08:00
 378  | 8   | 00378              | 1970-03-20 00:00:00.000000 -08:00
 379  | 509 | 00379_update9      | 1970-03-21 00:00:00.000000 -08:00
 380  | 0   | 00380              | 1970-03-22 00:00:00.000000 -08:00
 381  | 1   | 00381              | 1970-03-23 00:00:00.000000 -08:00
 383  | 303 | 00383_update3      | 1970-03-25 00:00:00.000000 -08:00
 384  | 4   | 00384              | 1970-03-26 00:00:00.000000 -08:00
 386  | 6   | 00386              | 1970-03-28 00:00:00.000000 -08:00
 387  | 407 | 00387_update7      | 1970-03-29 00:00:00.000000 -08:00
 388  | 8   | 00388              | 1970-03-30 00:00:00.000000 -08:00
 389  | 509 | 00389_update9      | 1970-03-31 00:00:00.000000 -08:00
 390  | 0   | 00390              | 1970-04-01 00:00:00.000000 -08:00
 391  | 1   | 00391              | 1970-04-02 00:00:00.000000 -08:00
 393  | 303 | 00393_update3      | 1970-04-04 00:00:00.000000 -08:00
 394  | 4   | 00394              | 1970-04-05 00:00:00.000000 -08:00
 396  | 6   | 00396              | 1970-04-07 00:00:00.000000 -08:00
 397  | 407 | 00397_update7      | 1970-04-08 00:00:00.000000 -08:00
 398  | 8   | 00398              | 1970-04-09 00:00:00.000000 -08:00
 399  | 509 | 00399_update9      | 1970-04-10 00:00:00.000000 -08:00
 400  | 0   | 00400              | 1970-01-01 00:00:00.000000 -08:00
 401  | 1   | 00401              | 1970-01-02 00:00:00.000000 -08:00
 403  | 303 | 00403_update3      | 1970-01-04 00:00:00.000000 -08:00
 404  | 4   | 00404              | 1970-01-05 00:00:00.000000 -08:00
 406  | 6   | 00406              | 1970-01-07 00:00:00.000000 -08:00
 407  | 407 | 00407_update7      | 1970-01-08 00:00:00.000000 -08:00
 408  | 8   | 00408              | 1970-01-09 00:00:00.000000 -08:00
 409  | 509 | 00409_update9      | 1970-01-10 00:00:00.000000 -08:00
 410  | 0   | 00410              | 1970-01-11 00:00:00.000000 -08:00
 411  | 1   | 00411              | 1970-01-12 00:00:00.000000 -08:00
 413  | 303 | 00413_update3      | 1970-01-14 00:00:00.000000 -08:00
 414  | 4   | 00414              | 1970-01-15 00:00:00.000000 -08:00
 416  | 6   | 00416              | 1970-01-17 00:00:00.000000 -08:00
 417  | 407 | 00417_update7      | 1970-01-18 00:00:00.000000 -08:00
 418  | 8   | 00418              | 1970-01-19 00:00:00.000000 -08:00
 419  | 509 | 00419_update9      | 1970-01-20 00:00:00.000000 -08:00
 420  | 0   | 00420              | 1970-01-21 00:00:00.000000 -08:00
 421  | 1   | 00421              | 1970-01-22 00:00:00.000000 -08:00
 423  | 303 | 00423_update3      | 1970-01-24 00:00:00.000000 -08:00
 424  | 4   | 00424              | 1970-01-25 00:00:00.000000 -08:00
 426  | 6   | 00426              | 1970-01-27 00:00:00.000000 -08:00
 427  | 407 | 00427_update7      | 1970-01-28 00:00:00.000000 -08:00
 428  | 8   | 00428              | 1970-01-29 00:00:00.000000 -08:00
 429  | 509 | 00429_update9      | 1970-01-30 00:00:00.000000 -08:00
 430  | 0   | 00430              | 1970-01-31 00:00:00.000000 -08:00
 431  | 1   | 00431              | 1970-02-01 00:00:00.000000 -08:00
 433  | 303 | 00433_update3      | 1970-02-03 00:00:00.000000 -08:00
 434  | 4   | 00434              | 1970-02-04 00:00:00.000000 -08:00
 436  | 6   | 00436              | 1970-02-06 00:00:00.000000 -08:00
 437  | 407 | 00437_update7      | 1970-02-07 00:00:00.000000 -08:00
 438  | 8   | 00438              | 1970-02-08 00:00:00.000000 -08:00
 439  | 509 | 00439_update9      | 1970-02-09 00:00:00.000000 -08:00
 440  | 0   | 00440              | 1970-02-10 00:00:00.000000 -08:00
 441  | 1   | 00441              | 1970-02-11 00:00:00.000000 -08:00
 443  | 303 | 00443_update3      | 1970-02-13 00:00:00.000000 -08:00
 444  | 4   | 00444              | 1970-02-14 00:00:00.000000 -08:00
 446  | 6   | 00446              | 1970-02-16 00:00:00.000000 -08:00
 447  | 407 | 00447_update7      | 1970-02-17 00:00:00.000000 -08:00
 448  | 8   | 00448              | 1970-02-18 00:00:00.000000 -08:00
 449  | 509 | 00449_update9      | 1970-02-19 00:00:00.000000 -08:00
 450  | 0   | 00450              | 1970-02-20 00:00:00.000000 -08:00
 451  | 1   | 00451              | 1970-02-21 00:00:00.000000 -08:00
 453  | 303 | 00453_update3      | 1970-02-23 00:00:00.000000 -08:00
 454  | 4   | 00454              | 1970-02-24 00:00:00.000000 -08:00
 456  | 6   | 00456              | 1970-02-26 00:00:00.000000 -08:00
 457  | 407 | 00457_update7      | 1970-02-27 00:00:00.000000 -08:00
 458  | 8   | 00458              | 1970-02-28 00:00:00.000000 -08:00
 459  | 509 | 00459_update9      | 1970-03-01 00:00:00.000000 -08:00
 460  | 0   | 00460              | 1970-03-02 00:00:00.000000 -08:00
 461  | 1   | 00461              | 1970-03-03 00:00:00.000000 -08:00
 463  | 303 | 00463_update3      | 1970-03-05 00:00:00.000000 -08:00
 464  | 4   | 00464              | 1970-03-06 00:00:00.000000 -08:00
 466  | 6   | 00466              | 1970-03-08 00:00:00.000000 -08:00
 467  | 407 | 00467_update7      | 1970-03-09 00:00:00.000000 -08:00
 468  | 8   | 00468              | 1970-03-10 00:00:00.000000 -08:00
 469  | 509 | 00469_update9      | 1970-03-11 00:00:00.000000 -08:00
 470  | 0   | 00470              | 1970-03-12 00:00:00.000000 -08:00
 471  | 1   | 00471              | 1970-03-13 00:00:00.000000 -08:00
 473  | 303 | 00473_update3      | 1970-03-15 00:00:00.000000 -08:00
 474  | 4   | 00474              | 1970-03-16 00:00:00.000000 -08:00
 476  | 6   | 00476              | 1970-03-18 00:00:00.000000 -08:00
 477  | 407 | 00477_update7      | 1970-03-19 00:00:00.000000 -08:00
 478  | 8   | 00478              | 1970-03-20 00:00:00.000000 -08:00
 479  | 509 | 00479_update9      | 1970-03-21 00:00:00.000000 -08:00
 480  | 0   | 00480              | 1970-03-22 00:00:00.000000 -08:00
 481  | 1   | 00481              | 1970-03-23 00:00:00.000000 -08:00
 483  | 303 | 00483_update3      | 1970-03-25 00:00:00.000000 -08:00
 484  | 4   | 00484              | 1970-03-26 00:00:00.000000 -08:00
 486  | 6   | 00486              | 1970-03-28 00:00:00.000000 -08:00
 487  | 407 | 00487_update7      | 1970-03-29 00:00:00.000000 -08:00
 488  | 8   | 00488              | 1970-03-30 00:00:00.000000 -08:00
 489  | 509 | 00489_update9      | 1970-03-31 00:00:00.000000 -08:00
 490  | 0   | 00490              | 1970-04-01 00:00:00.000000 -08:00
 491  | 1   | 00491              | 1970-04-02 00:00:00.000000 -08:00
 493  | 303 | 00493_update3      | 1970-04-04 00:00:00.000000 -08:00
 494  | 4   | 00494              | 1970-04-05 00:00:00.000000 -08:00
 496  | 6   | 00496              | 1970-04-07 00:00:00.000000 -08:00
 497  | 407 | 00497_update7      | 1970-04-08 00:00:00.000000 -08:00
 498  | 8   | 00498              | 1970-04-09 00:00:00.000000 -08:00
 499  | 509 | 00499_update9      | 1970-04-10 00:00:00.000000 -08:00
 500  | 0   | 00500              | 1970-01-01 00:00:00.000000 -08:00
 501  | 1   | 00501              | 1970-01-02 00:00:00.000000 -08:00
 503  | 303 | 00503_update3      | 1970-01-04 00:00:00.000000 -08:00
 504  | 4   | 00504              | 1970-01-05 00:00:00.000000 -08:00
 506  | 6   | 00506              | 1970-01-07 00:00:00.000000 -08:00
 507  | 407 | 00507_update7      | 1970-01-08 00:00:00.000000 -08:00
 508  | 8   | 00508              | 1970-01-09 00:00:00.000000 -08:00
 509  | 509 | 00509_update9      | 1970-01-10 00:00:00.000000 -08:00
 510  | 0   | 00510              | 1970-01-11 00:00:00.000000 -08:00
 511  | 1   | 00511              | 1970-01-12 00:00:00.000000 -08:00
 513  | 303 | 00513_update3      | 1970-01-14 00:00:00.000000 -08:00
 514  | 4   | 00514              | 1970-01-15 00:00:00.000000 -08:00
 516  | 6   | 00516              | 1970-01-17 00:00:00.000000 -08:00
 517  | 407 | 00517_update7      | 1970-01-18 00:00:00.000000 -08:00
 518  | 8   | 00518              | 1970-01-19 00:00:00.000000 -08:00
 519  | 509 | 00519_update9      | 1970-01-20 00:00:00.000000 -08:00
 520  | 0   | 00520              | 1970-01-21 00:00:00.000000 -08:00
 521  | 1   | 00521              | 1970-01-22 00:00:00.000000 -08:00
 523  | 303 | 00523_update3      | 1970-01-24 00:00:00.000000 -08:00
 524  | 4   | 00524              | 1970-01-25 00:00:00.000000 -08:00
 526  | 6   | 00526              | 1970-01-27 00:00:00.000000 -08:00
 527  | 407 | 00527_update7      | 1970-01-28 00:00:00.000000 -08:00
 528  | 8   | 00528              | 1970-01-29 00:00:00.000000 -08:00
 529  | 509 | 00529_update9      | 1970-01-30 00:00:00.000000 -08:00
 530  | 0   | 00530              | 1970-01-31 00:00:00.000000 -08:00
 531  | 1   | 00531              | 1970-02-01 00:00:00.000000 -08:00
 533  | 303 | 00533_update3      | 1970-02-03 00:00:00.000000 -08:00
 534  | 4   | 00534              | 1970-02-04 00:00:00.000000 -08:00
 536  | 6   | 00536              | 1970-02-06 00:00:00.000000 -08:00
 537  | 407 | 00537_update7      | 1970-02-07 00:00:00.000000 -08:00
 538  | 8   | 00538              | 1970-02-08 00:00:00.000000 -08:00
 539  | 509 | 00539_update9      | 1970-02-09 00:00:00.000000 -08:00
 540  | 0   | 00540              | 1970-02-10 00:00:00.000000 -08:00
 541  | 1   | 00541              | 1970-02-11 00:00:00.000000 -08:00
 543  | 303 | 00543_update3      | 1970-02-13 00:00:00.000000 -08:00
 544  | 4   | 00544              | 1970-02-14 00:00:00.000000 -08:00
 546  | 6   | 00546              | 1970-02-16 00:00:00.000000 -08:00
 547  | 407 | 00547_update7      | 1970-02-17 00:00:00.000000 -08:00
 548  | 8   | 00548              | 1970-02-18 00:00:00.000000 -08:00
 549  | 509 | 00549_update9      | 1970-02-19 00:00:00.000000 -08:00
 550  | 0   | 00550              | 1970-02-20 00:00:00.000000 -08:00
 551  | 1   | 00551              | 1970-02-21 00:00:00.000000 -08:00
 553  | 303 | 00553_update3      | 1970-02-23 00:00:00.000000 -08:00
 554  | 4   | 00554              | 1970-02-24 00:00:00.000000 -08:00
 556  | 6   | 00556              | 1970-02-26 00:00:00.000000 -08:00
 557  | 407 | 00557_update7      | 1970-02-27 00:00:00.000000 -08:00
 558  | 8   | 00558              | 1970-02-28 00:00:00.000000 -08:00
 559  | 509 | 00559_update9      | 1970-03-01 00:00:00.000000 -08:00
 560  | 0   | 00560              | 1970-03-02 00:00:00.000000 -08:00
 561  | 1   | 00561              | 1970-03-03 00:00:00.000000 -08:00
 563  | 303 | 00563_update3      | 1970-03-05 00:00:00.000000 -08:00
 564  | 4   | 00564              | 1970-03-06 00:00:00.000000 -08:00
 566  | 6   | 00566              | 1970-03-08 00:00:00.000000 -08:00
 567  | 407 | 00567_update7      | 1970-03-09 00:00:00.000000 -08:00
 568  | 8   | 00568              | 1970-03-10 00:00:00.000000 -08:00
 569  | 509 | 00569_update9      | 1970-03-11 00:00:00.000000 -08:00
 570  | 0   | 00570              | 1970-03-12 00:00:00.000000 -08:00
 571  | 1   | 00571              | 1970-03-13 00:00:00.000000 -08:00
 573  | 303 | 00573_update3      | 1970-03-15 00:00:00.000000 -08:00
 574  | 4   | 00574              | 1970-03-16 00:00:00.000000 -08:00
 576  | 6   | 00576              | 1970-03-18 00:00:00.000000 -08:00
 577  | 407 | 00577_update7      | 1970-03-19 00:00:00.000000 -08:00
 578  | 8   | 00578              | 1970-03-20 00:00:00.000000 -08:00
 579  | 509 | 00579_update9      | 1970-03-21 00:00:00.000000 -08:00
 580  | 0   | 00580              | 1970-03-22 00:00:00.000000 -08:00
 581  | 1   | 00581              | 1970-03-23 00:00:00.000000 -08:00
 583  | 303 | 00583_update3      | 1970-03-25 00:00:00.000000 -08:00
 584  | 4   | 00584              | 1970-03-26 00:00:00.000000 -08:00
 586  | 6   | 00586              | 1970-03-28 00:00:00.000000 -08:00
 587  | 407 | 00587_update7      | 1970-03-29 00:00:00.000000 -08:00
 588  | 8   | 00588              | 1970-03-30 00:00:00.000000 -08:00
 589  | 509 | 00589_update9      | 1970-03-31 00:00:00.000000 -08:00
 590  | 0   | 00590              | 1970-04-01 00:00:00.000000 -08:00
 591  | 1   | 00591              | 1970-04-02 00:00:00.000000 -08:00
 593  | 303 | 00593_update3      | 1970-04-04 00:00:00.000000 -08:00
 594  | 4   | 00594              | 1970-04-05 00:00:00.000000 -08:00
 596  | 6   | 00596              | 1970-04-07 00:00:00.000000 -08:00
 597  | 407 | 00597_update7      | 1970-04-08 00:00:00.000000 -08:00
 598  | 8   | 00598              | 1970-04-09 00:00:00.000000 -08:00
 599  | 509 | 00599_update9      | 1970-04-10 00:00:00.000000 -08:00
 600  | 0   | 00600              | 1970-01-01 00:00:00.000000 -08:00
 601  | 1   | 00601              | 1970-01-02 00:00:00.000000 -08:00
 603  | 303 | 00603_update3      | 1970-01-04 00:00:00.000000 -08:00
 604  | 4   | 00604              | 1970-01-05 00:00:00.000000 -08:00
 606  | 6   | 00606              | 1970-01-07 00:00:00.000000 -08:00
 607  | 407 | 00607_update7      | 1970-01-08 00:00:00.000000 -08:00
 608  | 8   | 00608              | 1970-01-09 00:00:00.000000 -08:00
 609  | 509 | 00609_update9      | 1970-01-10 00:00:00.000000 -08:00
 610  | 0   | 00610              | 1970-01-11 00:00:00.000000 -08:00
 611  | 1   | 00611              | 1970-01-12 00:00:00.000000 -08:00
 613  | 303 | 00613_update3      | 1970-01-14 00:00:00.000000 -08:00
 614  | 4   | 00614              | 1970-01-15 00:00:00.000000 -08:00
 616  | 6   | 00616              | 1970-01-17 00:00:00.000000 -08:00
 617  | 407 | 00617_update7      | 1970-01-18 00:00:00.000000 -08:00
 618  | 8   | 00618              | 1970-01-19 00:00:00.000000 -08:00
 619  | 509 | 00619_update9      | 1970-01-20 00:00:00.000000 -08:00
 620  | 0   | 00620              | 1970-01-21 00:00:00.000000 -08:00
 621  | 1   | 00621              | 1970-01-22 00:00:00.000000 -08:00
 623  | 303 | 00623_update3      | 1970-01-24 00:00:00.000000 -08:00
 624  | 4   | 00624              | 1970-01-25 00:00:00.000000 -08:00
 626  | 6   | 00626              | 1970-01-27 00:00:00.000000 -08:00
 627  | 407 | 00627_update7      | 1970-01-28 00:00:00.000000 -08:00
 628  | 8   | 00628              | 1970-01-29 00:00:00.000000 -08:00
 629  | 509 | 00629_update9      | 1970-01-30 00:00:00.000000 -08:00
 630  | 0   | 00630              | 1970-01-31 00:00:00.000000 -08:00
 631  | 1   | 00631              | 1970-02-01 00:00:00.000000 -08:00
 633  | 303 | 00633_update3      | 1970-02-03 00:00:00.000000 -08:00
 634  | 4   | 00634              | 1970-02-04 00:00:00.000000 -08:00
 636  | 6   | 00636              | 1970-02-06 00:00:00.000000 -08:00
 637  | 407 | 00637_update7      | 1970-02-07 00:00:00.000000 -08:00
 638  | 8   | 00638              | 1970-02-08 00:00:00.000000 -08:00
 639  | 509 | 00639_update9      | 1970-02-09 00:00:00.000000 -08:00
 640  | 0   | 00640              | 1970-02-10 00:00:00.000000 -08:00
 641  | 1   | 00641              | 1970-02-11 00:00:00.000000 -08:00
 643  | 303 | 00643_update3      | 1970-02-13 00:00:00.000000 -08:00
 644  | 4   | 00644              | 1970-02-14 00:00:00.000000 -08:00
 646  | 6   | 00646              | 1970-02-16 00:00:00.000000 -08:00
 647  | 407 | 00647_update7      | 1970-02-17 00:00:00.000000 -08:00
 648  | 8   | 00648              | 1970-02-18 00:00:00.000000 -08:00
 649  | 509 | 00649_update9      | 1970-02-19 00:00:00.000000 -08:00
 650  | 0   | 00650              | 1970-02-20 00:00:00.000000 -08:00
 651  | 1   | 00651              | 1970-02-21 00:00:00.000000 -08:00
 653  | 303 | 00653_update3      | 1970-02-23 00:00:00.000000 -08:00
 654  | 4   | 00654              | 1970-02-24 00:00:00.000000 -08:00
 656  | 6   | 00656              | 1970-02-26 00:00:00.000000 -08:00
 657  | 407 | 00657_update7      | 1970-02-27 00:00:00.000000 -08:00
 658  | 8   | 00658              | 1970-02-28 00:00:00.000000 -08:00
 659  | 509 | 00659_update9      | 1970-03-01 00:00:00.000000 -08:00
 660  | 0   | 00660              | 1970-03-02 00:00:00.000000 -08:00
 661  | 1   | 00661              | 1970-03-03 00:00:00.000000 -08:00
 663  | 303 | 00663_update3      | 1970-03-05 00:00:00.000000 -08:00
 664  | 4   | 00664              | 1970-03-06 00:00:00.000000 -08:00
 666  | 6   | 00666              | 1970-03-08 00:00:00.000000 -08:00
 667  | 407 | 00667_update7      | 1970-03-09 00:00:00.000000 -08:00
 668  | 8   | 00668              | 1970-03-10 00:00:00.000000 -08:00
 669  | 509 | 00669_update9      | 1970-03-11 00:00:00.000000 -08:00
 670  | 0   | 00670              | 1970-03-12 00:00:00.000000 -08:00
 671  | 1   | 00671              | 1970-03-13 00:00:00.000000 -08:00
 673  | 303 | 00673_update3      | 1970-03-15 00:00:00.000000 -08:00
 674  | 4   | 00674              | 1970-03-16 00:00:00.000000 -08:00
 676  | 6   | 00676              | 1970-03-18 00:00:00.000000 -08:00
 677  | 407 | 00677_update7      | 1970-03-19 00:00:00.000000 -08:00
 678  | 8   | 00678              | 1970-03-20 00:00:00.000000 -08:00
 679  | 509 | 00679_update9      | 1970-03-21 00:00:00.000000 -08:00
 680  | 0   | 00680              | 1970-03-22 00:00:00.000000 -08:00
 681  | 1   | 00681              | 1970-03-23 00:00:00.000000 -08:00
 683  | 303 | 00683_update3      | 1970-03-25 00:00:00.000000 -08:00
 684  | 4   | 00684              | 1970-03-26 00:00:00.000000 -08:00
 686  | 6   | 00686              | 1970-03-28 00:00:00.000000 -08:00
 687  | 407 | 00687_update7      | 1970-03-29 00:00:00.000000 -08:00
 688  | 8   | 00688              | 1970-03-30 00:00:00.000000 -08:00
 689  | 509 | 00689_update9      | 1970-03-31 00:00:00.000000 -08:00
 690  | 0   | 00690              | 1970-04-01 00:00:00.000000 -08:00
 691  | 1   | 00691              | 1970-04-02 00:00:00.000000 -08:00
 693  | 303 | 00693_update3      | 1970-04-04 00:00:00.000000 -08:00
 694  | 4   | 00694              | 1970-04-05 00:00:00.000000 -08:00
 696  | 6   | 00696              | 1970-04-07 00:00:00.000000 -08:00
 697  | 407 | 00697_update7      | 1970-04-08 00:00:00.000000 -08:00
 698  | 8   | 00698              | 1970-04-09 00:00:00.000000 -08:00
 699  | 509 | 00699_update9      | 1970-04-10 00:00:00.000000 -08:00
 700  | 0   | 00700              | 1970-01-01 00:00:00.000000 -08:00
 701  | 1   | 00701              | 1970-01-02 00:00:00.000000 -08:00
 703  | 303 | 00703_update3      | 1970-01-04 00:00:00.000000 -08:00
 704  | 4   | 00704              | 1970-01-05 00:00:00.000000 -08:00
 706  | 6   | 00706              | 1970-01-07 00:00:00.000000 -08:00
 707  | 407 | 00707_update7      | 1970-01-08 00:00:00.000000 -08:00
 708  | 8   | 00708              | 1970-01-09 00:00:00.000000 -08:00
 709  | 509 | 00709_update9      | 1970-01-10 00:00:00.000000 -08:00
 710  | 0   | 00710              | 1970-01-11 00:00:00.000000 -08:00
 711  | 1   | 00711              | 1970-01-12 00:00:00.000000 -08:00
 713  | 303 | 00713_update3      | 1970-01-14 00:00:00.000000 -08:00
 714  | 4   | 00714              | 1970-01-15 00:00:00.000000 -08:00
 716  | 6   | 00716              | 1970-01-17 00:00:00.000000 -08:00
 717  | 407 | 00717_update7      | 1970-01-18 00:00:00.000000 -08:00
 718  | 8   | 00718              | 1970-01-19 00:00:00.000000 -08:00
 719  | 509 | 00719_update9      | 1970-01-20 00:00:00.000000 -08:00
 720  | 0   | 00720              | 1970-01-21 00:00:00.000000 -08:00
 721  | 1   | 00721              | 1970-01-22 00:00:00.000000 -08:00
 723  | 303 | 00723_update3      | 1970-01-24 00:00:00.000000 -08:00
 724  | 4   | 00724              | 1970-01-25 00:00:00.000000 -08:00
 726  | 6   | 00726              | 1970-01-27 00:00:00.000000 -08:00
 727  | 407 | 00727_update7      | 1970-01-28 00:00:00.000000 -08:00
 728  | 8   | 00728              | 1970-01-29 00:00:00.000000 -08:00
 729  | 509 | 00729_update9      | 1970-01-30 00:00:00.000000 -08:00
 730  | 0   | 00730              | 1970-01-31 00:00:00.000000 -08:00
 731  | 1   | 00731              | 1970-02-01 00:00:00.000000 -08:00
 733  | 303 | 00733_update3      | 1970-02-03 00:00:00.000000 -08:00
 734  | 4   | 00734              | 1970-02-04 00:00:00.000000 -08:00
 736  | 6   | 00736              | 1970-02-06 00:00:00.000000 -08:00
 737  | 407 | 00737_update7      | 1970-02-07 00:00:00.000000 -08:00
 738  | 8   | 00738              | 1970-02-08 00:00:00.000000 -08:00
 739  | 509 | 00739_update9      | 1970-02-09 00:00:00.000000 -08:00
 740  | 0   | 00740              | 1970-02-10 00:00:00.000000 -08:00
 741  | 1   | 00741              | 1970-02-11 00:00:00.000000 -08:00
 743  | 303 | 00743_update3      | 1970-02-13 00:00:00.000000 -08:00
 744  | 4   | 00744              | 1970-02-14 00:00:00.000000 -08:00
 746  | 6   | 00746              | 1970-02-16 00:00:00.000000 -08:00
 747  | 407 | 00747_update7      | 1970-02-17 00:00:00.000000 -08:00
 748  | 8   | 00748              | 1970-02-18 00:00:00.000000 -08:00
 749  | 509 | 00749_update9      | 1970-02-19 00:00:00.000000 -08:00
 750  | 0   | 00750              | 1970-02-20 00:00:00.000000 -08:00
 751  | 1   | 00751              | 1970-02-21 00:00:00.000000 -08:00
 753  | 303 | 00753_update3      | 1970-02-23 00:00:00.000000 -08:00
 754  | 4   | 00754              | 1970-02-24 00:00:00.000000 -08:00
 756  | 6   | 00756              | 1970-02-26 00:00:00.000000 -08:00
 757  | 407 | 00757_update7      | 1970-02-27 00:00:00.000000 -08:00
 758  | 8   | 00758              | 1970-02-28 00:00:00.000000 -08:00
 759  | 509 | 00759_update9      | 1970-03-01 00:00:00.000000 -08:00
 760  | 0   | 00760              | 1970-03-02 00:00:00.000000 -08:00
 761  | 1   | 00761              | 1970-03-03 00:00:00.000000 -08:00
 763  | 303 | 00763_update3      | 1970-03-05 00:00:00.000000 -08:00
 764  | 4   | 00764              | 1970-03-06 00:00:00.000000 -08:00
 766  | 6   | 00766              | 1970-03-08 00:00:00.000000 -08:00
 767  | 407 | 00767_update7      | 1970-03-09 00:00:00.000000 -08:00
 768  | 8   | 00768              | 1970-03-10 00:00:00.000000 -08:00
 769  | 509 | 00769_update9      | 1970-03-11 00:00:00.000000 -08:00
 770  | 0   | 00770              | 1970-03-12 00:00:00.000000 -08:00
 771  | 1   | 00771              | 1970-03-13 00:00:00.000000 -08:00
 773  | 303 | 00773_update3      | 1970-03-15 00:00:00.000000 -08:00
 774  | 4   | 00774              | 1970-03-16 00:00:00.000000 -08:00
 776  | 6   | 00776              | 1970-03-18 00:00:00.000000 -08:00
 777  | 407 | 00777_update7      | 1970-03-19 00:00:00.000000 -08:00
 778  | 8   | 00778              | 1970-03-20 00:00:00.000000 -08:00
 779  | 509 | 00779_update9      | 1970-03-21 00:00:00.000000 -08:00
 780  | 0   | 00780              | 1970-03-22 00:00:00.000000 -08:00
 781  | 1   | 00781              | 1970-03-23 00:00:00.000000 -08:00
 783  | 303 | 00783_update3      | 1970-03-25 00:00:00.000000 -08:00
 784  | 4   | 00784              | 1970-03-26 00:00:00.000000 -08:00
 786  | 6   | 00786              | 1970-03-28 00:00:00.000000 -08:00
 787  | 407 | 00787_update7      | 1970-03-29 00:00:00.000000 -08:00
 788  | 8   | 00788              | 1970-03-30 00:00:00.000000 -08:00
 789  | 509 | 00789_update9      | 1970-03-31 00:00:00.000000 -08:00
 790  | 0   | 00790              | 1970-04-01 00:00:00.000000 -08:00
 791  | 1   | 00791              | 1970-04-02 00:00:00.000000 -08:00
 793  | 303 | 00793_update3      | 1970-04-04 00:00:00.000000 -08:00
 794  | 4   | 00794              | 1970-04-05 00:00:00.000000 -08:00
 796  | 6   | 00796              | 1970-04-07 00:00:00.000000 -08:00
 797  | 407 | 00797_update7      | 1970-04-08 00:00:00.000000 -08:00
 798  | 8   | 00798              | 1970-04-09 00:00:00.000000 -08:00
 799  | 509 | 00799_update9      | 1970-04-10 00:00:00.000000 -08:00
 800  | 0   | 00800              | 1970-01-01 00:00:00.000000 -08:00
 801  | 1   | 00801              | 1970-01-02 00:00:00.000000 -08:00
 803  | 303 | 00803_update3      | 1970-01-04 00:00:00.000000 -08:00
 804  | 4   | 00804              | 1970-01-05 00:00:00.000000 -08:00
 806  | 6   | 00806              | 1970-01-07 00:00:00.000000 -08:00
 807  | 407 | 00807_update7      | 1970-01-08 00:00:00.000000 -08:00
 808  | 8   | 00808              | 1970-01-09 00:00:00.000000 -08:00
 809  | 509 | 00809_update9      | 1970-01-10 00:00:00.000000 -08:00
 810  | 0   | 00810              | 1970-01-11 00:00:00.000000 -08:00
 811  | 1   | 00811              | 1970-01-12 00:00:00.000000 -08:00
 813  | 303 | 00813_update3      | 1970-01-14 00:00:00.000000 -08:00
 814  | 4   | 00814              | 1970-01-15 00:00:00.000000 -08:00
 816  | 6   | 00816              | 1970-01-17 00:00:00.000000 -08:00
 817  | 407 | 00817_update7      | 1970-01-18 00:00:00.000000 -08:00
 818  | 8   | 00818              | 1970-01-19 00:00:00.000000 -08:00
 819  | 509 | 00819_update9      | 1970-01-20 00:00:00.000000 -08:00
 820  | 0   | 00820              | 1970-01-21 00:00:00.000000 -08:00
 821  | 1   | 00821              | 1970-01-22 00:00:00.000000 -08:00
 823  | 303 | 00823_update3      | 1970-01-24 00:00:00.000000 -08:00
 824  | 4   | 00824              | 1970-01-25 00:00:00.000000 -08:00
 826  | 6   | 00826              | 1970-01-27 00:00:00.000000 -08:00
 827  | 407 | 00827_update7      | 1970-01-28 00:00:00.000000 -08:00
 828  | 8   | 00828              | 1970-01-29 00:00:00.000000 -08:00
 829  | 509 | 00829_update9      | 1970-01-30 00:00:00.000000 -08:00
 830  | 0   | 00830              | 1970-01-31 00:00:00.000000 -08:00
 831  | 1   | 00831              | 1970-02-01 00:00:00.000000 -08:00
 833  | 303 | 00833_update3      | 1970-02-03 00:00:00.000000 -08:00
 834  | 4   | 00834              | 1970-02-04 00:00:00.000000 -08:00
 836  | 6   | 00836              | 1970-02-06 00:00:00.000000 -08:00
 837  | 407 | 00837_update7      | 1970-02-07 00:00:00.000000 -08:00
 838  | 8   | 00838              | 1970-02-08 00:00:00.000000 -08:00
 839  | 509 | 00839_update9      | 1970-02-09 00:00:00.000000 -08:00
 840  | 0   | 00840              | 1970-02-10 00:00:00.000000 -08:00
 841  | 1   | 00841              | 1970-02-11 00:00:00.000000 -08:00
 843  | 303 | 00843_update3      | 1970-02-13 00:00:00.000000 -08:00
 844  | 4   | 00844              | 1970-02-14 00:00:00.000000 -08:00
 846  | 6   | 00846              | 1970-02-16 00:00:00.000000 -08:00
 847  | 407 | 00847_update7      | 1970-02-17 00:00:00.000000 -08:00
 848  | 8   | 00848              | 1970-02-18 00:00:00.000000 -08:00
 849  | 509 | 00849_update9      | 1970-02-19 00:00:00.000000 -08:00
 850  | 0   | 00850              | 1970-02-20 00:00:00.000000 -08:00
 851  | 1   | 00851              | 1970-02-21 00:00:00.000000 -08:00
 853  | 303 | 00853_update3      | 1970-02-23 00:00:00.000000 -08:00
 854  | 4   | 00854              | 1970-02-24 00:00:00.000000 -08:00
 856  | 6   | 00856              | 1970-02-26 00:00:00.000000 -08:00
 857  | 407 | 00857_update7      | 1970-02-27 00:00:00.000000 -08:00
 858  | 8   | 00858              | 1970-02-28 00:00:00.000000 -08:00
 859  | 509 | 00859_update9      | 1970-03-01 00:00:00.000000 -08:00
 860  | 0   | 00860              | 1970-03-02 00:00:00.000000 -08:00
 861  | 1   | 00861              | 1970-03-03 00:00:00.000000 -08:00
 863  | 303 | 00863_update3      | 1970-03-05 00:00:00.000000 -08:00
 864  | 4   | 00864              | 1970-03-06 00:00:00.000000 -08:00
 866  | 6   | 00866              | 1970-03-08 00:00:00.000000 -08:00
 867  | 407 | 00867_update7      | 1970-03-09 00:00:00.000000 -08:00
 868  | 8   | 00868              | 1970-03-10 00:00:00.000000 -08:00
 869  | 509 | 00869_update9      | 1970-03-11 00:00:00.000000 -08:00
 870  | 0   | 00870              | 1970-03-12 00:00:00.000000 -08:00
 871  | 1   | 00871              | 1970-03-13 00:00:00.000000 -08:00
 873  | 303 | 00873_update3      | 1970-03-15 00:00:00.000000 -08:00
 874  | 4   | 00874              | 1970-03-16 00:00:00.000000 -08:00
 876  | 6   | 00876              | 1970-03-18 00:00:00.000000 -08:00
 877  | 407 | 00877_update7      | 1970-03-19 00:00:00.000000 -08:00
 878  | 8   | 00878              | 1970-03-20 00:00:00.000000 -08:00
 879  | 509 | 00879_update9      | 1970-03-21 00:00:00.000000 -08:00
 880  | 0   | 00880              | 1970-03-22 00:00:00.000000 -08:00
 881  | 1   | 00881              | 1970-03-23 00:00:00.000000 -08:00
 883  | 303 | 00883_update3      | 1970-03-25 00:00:00.000000 -08:00
 884  | 4   | 00884              | 1970-03-26 00:00:00.000000 -08:00
 886  | 6   | 00886              | 1970-03-28 00:00:00.000000 -08:00
 887  | 407 | 00887_update7      | 1970-03-29 00:00:00.000000 -08:00
 888  | 8   | 00888              | 1970-03-30 00:00:00.000000 -08:00
 889  | 509 | 00889_update9      | 1970-03-31 00:00:00.000000 -08:00
 890  | 0   | 00890              | 1970-04-01 00:00:00.000000 -08:00
 891  | 1   | 00891              | 1970-04-02 00:00:00.000000 -08:00
 893  | 303 | 00893_update3      | 1970-04-04 00:00:00.000000 -08:00
 894  | 4   | 00894              | 1970-04-05 00:00:00.000000 -08:00
 896  | 6   | 00896              | 1970-04-07 00:00:00.000000 -08:00
 897  | 407 | 00897_update7      | 1970-04-08 00:00:00.000000 -08:00
 898  | 8   | 00898              | 1970-04-09 00:00:00.000000 -08:00
 899  | 509 | 00899_update9      | 1970-04-10 00:00:00.000000 -08:00
 900  | 0   | 00900              | 1970-01-01 00:00:00.000000 -08:00
 901  | 1   | 00901              | 1970-01-02 00:00:00.000000 -08:00
 903  | 303 | 00903_update3      | 1970-01-04 00:00:00.000000 -08:00
 904  | 4   | 00904              | 1970-01-05 00:00:00.000000 -08:00
 906  | 6   | 00906              | 1970-01-07 00:00:00.000000 -08:00
 907  | 407 | 00907_update7      | 1970-01-08 00:00:00.000000 -08:00
 908  | 8   | 00908              | 1970-01-09 00:00:00.000000 -08:00
 909  | 509 | 00909_update9      | 1970-01-10 00:00:00.000000 -08:00
 910  | 0   | 00910              | 1970-01-11 00:00:00.000000 -08:00
 911  | 1   | 00911              | 1970-01-12 00:00:00.000000 -08:00
 913  | 303 | 00913_update3      | 1970-01-14 00:00:00.000000 -08:00
 914  | 4   | 00914              | 1970-01-15 00:00:00.000000 -08:00
 916  | 6   | 00916              | 1970-01-17 00:00:00.000000 -08:00
 917  | 407 | 00917_update7      | 1970-01-18 00:00:00.000000 -08:00
 918  | 8   | 00918              | 1970-01-19 00:00:00.000000 -08:00
 919  | 509 | 00919_update9      | 1970-01-20 00:00:00.000000 -08:00
 920  | 0   | 00920              | 1970-01-21 00:00:00.000000 -08:00
 921  | 1   | 00921              | 1970-01-22 00:00:00.000000 -08:00
 923  | 303 | 00923_update3      | 1970-01-24 00:00:00.000000 -08:00
 924  | 4   | 00924              | 1970-01-25 00:00:00.000000 -08:00
 926  | 6   | 00926              | 1970-01-27 00:00:00.000000 -08:00
 927  | 407 | 00927_update7      | 1970-01-28 00:00:00.000000 -08:00
 928  | 8   | 00928              | 1970-01-29 00:00:00.000000 -08:00
 929  | 509 | 00929_update9      | 1970-01-30 00:00:00.000000 -08:00
 930  | 0   | 00930              | 1970-01-31 00:00:00.000000 -08:00
 931  | 1   | 00931              | 1970-02-01 00:00:00.000000 -08:00
 933  | 303 | 00933_update3      | 1970-02-03 00:00:00.000000 -08:00
 934  | 4   | 00934              | 1970-02-04 00:00:00.000000 -08:00
 936  | 6   | 00936              | 1970-02-06 00:00:00.000000 -08:00
 937  | 407 | 00937_update7      | 1970-02-07 00:00:00.000000 -08:00
 938  | 8   | 00938              | 1970-02-08 00:00:00.000000 -08:00
 939  | 509 | 00939_update9      | 1970-02-09 00:00:00.000000 -08:00
 940  | 0   | 00940              | 1970-02-10 00:00:00.000000 -08:00
 941  | 1   | 00941              | 1970-02-11 00:00:00.000000 -08:00
 943  | 303 | 00943_update3      | 1970-02-13 00:00:00.000000 -08:00
 944  | 4   | 00944              | 1970-02-14 00:00:00.000000 -08:00
 946  | 6   | 00946              | 1970-02-16 00:00:00.000000 -08:00
 947  | 407 | 00947_update7      | 1970-02-17 00:00:00.000000 -08:00
 948  | 8   | 00948              | 1970-02-18 00:00:00.000000 -08:00
 949  | 509 | 00949_update9      | 1970-02-19 00:00:00.000000 -08:00
 950  | 0   | 00950              | 1970-02-20 00:00:00.000000 -08:00
 951  | 1   | 00951              | 1970-02-21 00:00:00.000000 -08:00
 953  | 303 | 00953_update3      | 1970-02-23 00:00:00.000000 -08:00
 954  | 4   | 00954              | 1970-02-24 00:00:00.000000 -08:00
 956  | 6   | 00956              | 1970-02-26 00:00:00.000000 -08:00
 957  | 407 | 00957_update7      | 1970-02-27 00:00:00.000000 -08:00
 958  | 8   | 00958              | 1970-02-28 00:00:00.000000 -08:00
 959  | 509 | 00959_update9      | 1970-03-01 00:00:00.000000 -08:00
 960  | 0   | 00960              | 1970-03-02 00:00:00.000000 -08:00
 961  | 1   | 00961              | 1970-03-03 00:00:00.000000 -08:00
 963  | 303 | 00963_update3      | 1970-03-05 00:00:00.000000 -08:00
 964  | 4   | 00964              | 1970-03-06 00:00:00.000000 -08:00
 966  | 6   | 00966              | 1970-03-08 00:00:00.000000 -08:00
 967  | 407 | 00967_update7      | 1970-03-09 00:00:00.000000 -08:00
 968  | 8   | 00968              | 1970-03-10 00:00:00.000000 -08:00
 969  | 509 | 00969_update9      | 1970-03-11 00:00:00.000000 -08:00
 970  | 0   | 00970              | 1970-03-12 00:00:00.000000 -08:00
 971  | 1   | 00971              | 1970-03-13 00:00:00.000000 -08:00
 973  | 303 | 00973_update3      | 1970-03-15 00:00:00.000000 -08:00
 974  | 4   | 00974              | 1970-03-16 00:00:00.000000 -08:00
 976  | 6   | 00976              | 1970-03-18 00:00:00.000000 -08:00
 977  | 407 | 00977_update7      | 1970-03-19 00:00:00.000000 -08:00
 978  | 8   | 00978              | 1970-03-20 00:00:00.000000 -08:00
 979  | 509 | 00979_update9      | 1970-03-21 00:00:00.000000 -08:00
 980  | 0   | 00980              | 1970-03-22 00:00:00.000000 -08:00
 981  | 1   | 00981              | 1970-03-23 00:00:00.000000 -08:00
 983  | 303 | 00983_update3      | 1970-03-25 00:00:00.000000 -08:00
 984  | 4   | 00984              | 1970-03-26 00:00:00.000000 -08:00
 986  | 6   | 00986              | 1970-03-28 00:00:00.000000 -08:00
 987  | 407 | 00987_update7      | 1970-03-29 00:00:00.000000 -08:00
 988  | 8   | 00988              | 1970-03-30 00:00:00.000000 -08:00
 989  | 509 | 00989_update9      | 1970-03-31 00:00:00.000000 -08:00
 990  | 0   | 00990              | 1970-04-01 00:00:00.000000 -08:00
 991  | 1   | 00991              | 1970-04-02 00:00:00.000000 -08:00
 993  | 303 | 00993_update3      | 1970-04-04 00:00:00.000000 -08:00
 994  | 4   | 00994              | 1970-04-05 00:00:00.000000 -08:00
 996  | 6   | 00996              | 1970-04-07 00:00:00.000000 -08:00
 997  | 407 | 00997_update7      | 1970-04-08 00:00:00.000000 -08:00
 998  | 8   | 00998              | 1970-04-09 00:00:00.000000 -08:00
 999  | 509 | 00999_update9      | 1970-04-10 00:00:00.000000 -08:00
 1000 | 0   | 01000              | 1970-01-01 00:00:00.000000 -08:00
 1001 | 101 | 0000100001         | 
 1003 | 403 | 0000300003_update3 | 
 1004 | 104 | 0000400004         | 
 1006 | 106 | 0000600006         | 
 1007 | 507 | 0000700007_update7 | 
 1008 | 108 | 0000800008         | 
 1009 | 609 | 0000900009_update9 | 
 1010 | 100 | 0001000010         | 
 1011 | 101 | 0001100011         | 
 1013 | 403 | 0001300013_update3 | 
 1014 | 104 | 0001400014         | 
 1016 | 106 | 0001600016         | 
 1017 | 507 | 0001700017_update7 | 
 1018 | 108 | 0001800018         | 
 1019 | 609 | 0001900019_update9 | 
 1020 | 100 | 0002000020         | 
 1101 | 201 | aaa                | 
 1103 | 503 | ccc_update3        | 
 1104 | 204 | ddd                | 
(819 rows)

EXPLAIN (verbose, costs off)
INSERT INTO ft2 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
                                                                                                    QUERY PLAN                                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2
   Output: (ft2.tableoid)::regclass
   Remote SQL: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
   Batch Size: 1
   ->  Result
         Output: '1200'::number(38,0), '999'::number(38,0), NULL::pg_catalog.int4, 'foo'::varchar2(1024), NULL::timestamp with time zone, NULL::timestamp, NULL::varchar2, 'ft2       '::char(10), NULL::user_enum
(6 rows)

INSERT INTO ft2 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
 tableoid 
----------
 ft2
(1 row)

EXPLAIN (verbose, costs off)
UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;             -- can be pushed down
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Update on public.ft2
   Output: (tableoid)::regclass
   Remote SQL: UPDATE "S 1"."T 1" SET c3 = $2 WHERE ctid = $1
   ->  Foreign Scan on public.ft2
         Output: 'bar'::varchar2(1024), ctid, ft2.*
         Filter: (ft2.c1 = '1200'::number)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
(7 rows)

UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;
 tableoid 
----------
 ft2
(1 row)

EXPLAIN (verbose, costs off)
DELETE FROM ft2 WHERE c1 = 1200 RETURNING tableoid::regclass;                       -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Delete on public.ft2
   Output: (tableoid)::regclass
   Remote SQL: DELETE FROM "S 1"."T 1" WHERE ctid = $1
   ->  Foreign Scan on public.ft2
         Output: ctid
         Filter: (ft2.c1 = '1200'::number)
         Remote SQL: SELECT "C 1", ctid FROM "S 1"."T 1" FOR UPDATE
(7 rows)

DELETE FROM ft2 WHERE c1 = 1200 RETURNING tableoid::regclass;
 tableoid 
----------
 ft2
(1 row)

-- Test UPDATE/DELETE with RETURNING on a three-table join
INSERT INTO ft2 (c1,c2,c3)
  SELECT id, id - 1200, to_char(id, 'FM00000') FROM generate_series(1201, 1300) id;
EXPLAIN (verbose, costs off)
UPDATE ft2 SET c3 = 'foo'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1
  RETURNING ft2, ft2.*, ft4, ft4.*;       -- can be pushed down
                                                                                                                            QUERY PLAN                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2
   Output: ft2.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft4.*, ft4.c1, ft4.c2, ft4.c3
   Remote SQL: UPDATE "S 1"."T 1" SET c3 = $2 WHERE ctid = $1 RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
   ->  Nested Loop
         Output: 'foo'::varchar2(1024), ft2.ctid, ft2.*, ft4.*, ft5.*, ft4.c1, ft4.c2, ft4.c3
         Join Filter: (ft2.c2 = ft4.c1)
         ->  Foreign Scan on public.ft2
               Output: ft2.ctid, ft2.*, ft2.c2
               Filter: (ft2.c1 > '1200'::number)
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
         ->  Foreign Scan
               Output: ft4.*, ft4.c1, ft4.c2, ft4.c3, ft5.*, ft5.c1
               Filter: (ft4.c1 = ft5.c1)
               Relations: (public.ft4) INNER JOIN (public.ft5)
               Remote SQL: SELECT CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2.c1, r2.c2, r2.c3) END, r2.c1, r2.c2, r2.c3, CASE WHEN (r3.*)::text IS NOT NULL THEN ROW(r3.c1, r3.c2, r3.c3) END, r3.c1 FROM ("S 1"."T 3" r2 INNER JOIN "S 1"."T 4" r3 ON (TRUE))
               ->  Hash Join
                     Output: ft4.*, ft4.c1, ft4.c2, ft4.c3, ft5.*, ft5.c1
                     Hash Cond: (ft4.c1 = ft5.c1)
                     ->  Foreign Scan on public.ft4
                           Output: ft4.*, ft4.c1, ft4.c2, ft4.c3
                           Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
                     ->  Hash
                           Output: ft5.*, ft5.c1
                           ->  Foreign Scan on public.ft5
                                 Output: ft5.*, ft5.c1
                                 Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
(26 rows)

UPDATE ft2 SET c3 = 'foo'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1
  RETURNING ft2, ft2.*, ft4, ft4.*;
ERROR:  cursor can only scan forward
HINT:  Declare it with SCROLL option to enable backward scan.
CONTEXT:  remote SQL command: MOVE BACKWARD ALL IN c4
EXPLAIN (verbose, costs off)
DELETE FROM ft2
  USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1
  RETURNING 100;                          -- can be pushed down
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Delete on public.ft2
   Output: 100
   Remote SQL: DELETE FROM "S 1"."T 1" WHERE ctid = $1
   ->  Nested Loop Left Join
         Output: ft2.ctid, ft4.*, ft5.*
         Join Filter: (ft4.c1 = ft5.c1)
         ->  Nested Loop
               Output: ft2.ctid, ft4.*, ft4.c1
               Join Filter: (ft2.c2 = ft4.c1)
               ->  Foreign Scan on public.ft2
                     Output: ft2.ctid, ft2.c2
                     Filter: ((ft2.c1 > '1200'::number) AND ((ft2.c1 % '10'::number) = '0'::number))
                     Remote SQL: SELECT "C 1", c2, ctid FROM "S 1"."T 1" FOR UPDATE
               ->  Foreign Scan on public.ft4
                     Output: ft4.*, ft4.c1
                     Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
         ->  Foreign Scan on public.ft5
               Output: ft5.*, ft5.c1
               Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
(19 rows)

DELETE FROM ft2
  USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1
  RETURNING 100;
 ?column? 
----------
      100
      100
      100
      100
      100
      100
      100
      100
      100
      100
(10 rows)

DELETE FROM ft2 WHERE ft2.c1 > 1200;
-- Test UPDATE with a MULTIEXPR sub-select
-- (maybe someday this'll be remotely executable, but not today)
EXPLAIN (verbose, costs off)
UPDATE ft2 AS target SET (c2, c7) = (
    SELECT c2 * 10, c7
        FROM ft2 AS src
        WHERE target.c1 = src.c1
) WHERE c1 > 1100;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Update on public.ft2 target
   Remote SQL: UPDATE "S 1"."T 1" SET c2 = $2, c7 = $3 WHERE ctid = $1
   ->  Foreign Scan on public.ft2 target
         Output: $1, $2, (SubPlan 1 (returns $1,$2)), target.ctid, target.*
         Filter: (target.c1 > '1100'::number)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
         SubPlan 1 (returns $1,$2)
           ->  Foreign Scan on public.ft2 src
                 Output: (src.c2 * '10'::number), src.c7
                 Filter: (target.c1 = src.c1)
                 Remote SQL: SELECT "C 1", c2, c7 FROM "S 1"."T 1"
(11 rows)

UPDATE ft2 AS target SET (c2, c7) = (
    SELECT c2 * 10, c7
        FROM ft2 AS src
        WHERE target.c1 = src.c1
) WHERE c1 > 1100;
UPDATE ft2 AS target SET (c2) = (
    SELECT c2 / 10
        FROM ft2 AS src
        WHERE target.c1 = src.c1
) WHERE c1 > 1100;
-- Test UPDATE involving a join that can be pushed down,
-- but a SET clause that can't be
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE ft2 d SET c2 = CASE WHEN random() >= 0 THEN d.c2 ELSE 0 END
  FROM ft2 AS t WHERE d.c1 = t.c1 AND d.c1 > 1000;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Update on public.ft2 d
   Remote SQL: UPDATE "S 1"."T 1" SET c2 = $2 WHERE ctid = $1
   ->  Hash Join
         Output: CASE WHEN (random() >= '0'::pg_catalog.float8) THEN d.c2 ELSE '0'::number END, d.ctid, d.*, t.*
         Hash Cond: (t.c1 = d.c1)
         ->  Foreign Scan on public.ft2 t
               Output: t.*, t.c1
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
         ->  Hash
               Output: d.c2, d.ctid, d.*, d.c1
               ->  Foreign Scan on public.ft2 d
                     Output: d.c2, d.ctid, d.*, d.c1
                     Filter: (d.c1 > '1000'::number)
                     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
(14 rows)

UPDATE ft2 d SET c2 = CASE WHEN random() >= 0 THEN d.c2 ELSE 0 END
  FROM ft2 AS t WHERE d.c1 = t.c1 AND d.c1 > 1000;
-- Test UPDATE/DELETE with WHERE or JOIN/ON conditions containing
-- user-defined operators/functions
ALTER SERVER loopback OPTIONS (DROP extensions);
INSERT INTO ft2 (c1,c2,c3)
  SELECT id, id % 10, to_char(id, 'FM00000') FROM generate_series(2001, 2010) id;
EXPLAIN (verbose, costs off)
UPDATE ft2 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;            -- can't be pushed down
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Update on public.ft2
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   Remote SQL: UPDATE "S 1"."T 1" SET c3 = $2 WHERE ctid = $1 RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
   ->  Foreign Scan on public.ft2
         Output: 'bar'::varchar2(1024), ctid, ft2.*
         Filter: (postgres_fdw_abs(ft2.c1) > 2000)
         Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
(7 rows)

UPDATE ft2 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;
  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 
------+----+-----+----+----+----+------------+----
 2001 | 1  | bar |    |    |    | ft2        | 
 2002 | 2  | bar |    |    |    | ft2        | 
 2003 | 3  | bar |    |    |    | ft2        | 
 2004 | 4  | bar |    |    |    | ft2        | 
 2005 | 5  | bar |    |    |    | ft2        | 
 2006 | 6  | bar |    |    |    | ft2        | 
 2007 | 7  | bar |    |    |    | ft2        | 
 2008 | 8  | bar |    |    |    | ft2        | 
 2009 | 9  | bar |    |    |    | ft2        | 
 2010 | 0  | bar |    |    |    | ft2        | 
(10 rows)

EXPLAIN (verbose, costs off)
UPDATE ft2 SET c3 = 'baz'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1
  RETURNING ft2.*, ft4.*, ft5.*;                                                    -- can't be pushed down
                                                                                                                                   QUERY PLAN                                                                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Update on public.ft2
   Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft4.c1, ft4.c2, ft4.c3, ft5.c1, ft5.c2, ft5.c3
   Remote SQL: UPDATE "S 1"."T 1" SET c3 = $2 WHERE ctid = $1 RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
   ->  Nested Loop
         Output: 'baz'::varchar2(1024), ft2.ctid, ft2.*, ft4.*, ft5.*, ft4.c1, ft4.c2, ft4.c3, ft5.c1, ft5.c2, ft5.c3
         Join Filter: (ft2.c2 === ft4.c1)
         ->  Foreign Scan on public.ft2
               Output: ft2.ctid, ft2.*, ft2.c2
               Filter: (ft2.c1 > '2000'::number)
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
         ->  Foreign Scan
               Output: ft4.*, ft4.c1, ft4.c2, ft4.c3, ft5.*, ft5.c1, ft5.c2, ft5.c3
               Filter: (ft4.c1 = ft5.c1)
               Relations: (public.ft4) INNER JOIN (public.ft5)
               Remote SQL: SELECT CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2.c1, r2.c2, r2.c3) END, r2.c1, r2.c2, r2.c3, CASE WHEN (r3.*)::text IS NOT NULL THEN ROW(r3.c1, r3.c2, r3.c3) END, r3.c1, r3.c2, r3.c3 FROM ("S 1"."T 3" r2 INNER JOIN "S 1"."T 4" r3 ON (TRUE))
               ->  Hash Join
                     Output: ft4.*, ft4.c1, ft4.c2, ft4.c3, ft5.*, ft5.c1, ft5.c2, ft5.c3
                     Hash Cond: (ft4.c1 = ft5.c1)
                     ->  Foreign Scan on public.ft4
                           Output: ft4.*, ft4.c1, ft4.c2, ft4.c3
                           Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
                     ->  Hash
                           Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
                           ->  Foreign Scan on public.ft5
                                 Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
                                 Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
(26 rows)

UPDATE ft2 SET c3 = 'baz'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1
  RETURNING ft2.*, ft4.*, ft5.*;
ERROR:  cursor can only scan forward
HINT:  Declare it with SCROLL option to enable backward scan.
CONTEXT:  remote SQL command: MOVE BACKWARD ALL IN c4
EXPLAIN (verbose, costs off)
DELETE FROM ft2
  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2.c1 > 2000 AND ft2.c2 = ft4.c1
  RETURNING ft2.c1, ft2.c2, ft2.c3;       -- can't be pushed down
                                                                                                                     QUERY PLAN                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Delete on public.ft2
   Output: ft2.c1, ft2.c2, ft2.c3
   Remote SQL: DELETE FROM "S 1"."T 1" WHERE ctid = $1 RETURNING "C 1", c2, c3
   ->  Hash Join
         Output: ft2.ctid, ft4.*, ft5.*
         Hash Cond: (ft4.c1 = ft2.c2)
         ->  Foreign Scan
               Output: ft4.*, ft4.c1, ft5.*
               Filter: (ft4.c1 === ft5.c1)
               Relations: (public.ft4) INNER JOIN (public.ft5)
               Remote SQL: SELECT CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2.c1, r2.c2, r2.c3) END, r2.c1, CASE WHEN (r3.*)::text IS NOT NULL THEN ROW(r3.c1, r3.c2, r3.c3) END, r3.c1 FROM ("S 1"."T 3" r2 INNER JOIN "S 1"."T 4" r3 ON (TRUE))
               ->  Nested Loop
                     Output: ft4.*, ft4.c1, ft5.*, ft5.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.*, ft4.c1
                           Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
                     ->  Materialize
                           Output: ft5.*, ft5.c1
                           ->  Foreign Scan on public.ft5
                                 Output: ft5.*, ft5.c1
                                 Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
         ->  Hash
               Output: ft2.ctid, ft2.c2
               ->  Foreign Scan on public.ft2
                     Output: ft2.ctid, ft2.c2
                     Filter: (ft2.c1 > '2000'::number)
                     Remote SQL: SELECT "C 1", c2, ctid FROM "S 1"."T 1" FOR UPDATE
(27 rows)

DELETE FROM ft2
  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2.c1 > 2000 AND ft2.c2 = ft4.c1
  RETURNING ft2.c1, ft2.c2, ft2.c3;
  c1  | c2 | c3  
------+----+-----
 2006 | 6  | bar
(1 row)

DELETE FROM ft2 WHERE ft2.c1 > 2000;
ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
-- Test that trigger on remote table works as expected
CREATE OR REPLACE FUNCTION "S 1".F_BRTRIG() RETURNS trigger AS $$
BEGIN
    NEW.c3 = NEW.c3 || '_trig_update';
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
/
CREATE TRIGGER t1_br_insert BEFORE INSERT OR UPDATE
    ON "S 1"."T 1" FOR EACH ROW EXECUTE PROCEDURE "S 1".F_BRTRIG();
INSERT INTO ft2 (c1,c2,c3) VALUES (1208, 818, 'fff') RETURNING *;
  c1  | c2  |       c3        | c4 | c5 | c6 |     c7     | c8 
------+-----+-----------------+----+----+----+------------+----
 1208 | 818 | fff_trig_update |    |    |    | ft2        | 
(1 row)

INSERT INTO ft2 (c1,c2,c3,c6) VALUES (1218, 818, 'ggg', '(--;') RETURNING *;
  c1  | c2  |       c3        | c4 | c5 |  c6  |     c7     | c8 
------+-----+-----------------+----+----+------+------------+----
 1218 | 818 | ggg_trig_update |    |    | (--; | ft2        | 
(1 row)

UPDATE ft2 SET c2 = c2 + 600 WHERE c1 % 10 = 8 AND c1 < 1200 RETURNING *;
  c1  | c2  |           c3           |                c4                 |             c5             | c6 |     c7     | c8  
------+-----+------------------------+-----------------------------------+----------------------------+----+------------+-----
 8    | 608 | 00008_trig_update      | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 18   | 608 | 00018_trig_update      | 1970-01-19 00:00:00.000000 -08:00 | 1970-01-19 00:00:00.000000 | 8  | 8          | foo
 28   | 608 | 00028_trig_update      | 1970-01-29 00:00:00.000000 -08:00 | 1970-01-29 00:00:00.000000 | 8  | 8          | foo
 38   | 608 | 00038_trig_update      | 1970-02-08 00:00:00.000000 -08:00 | 1970-02-08 00:00:00.000000 | 8  | 8          | foo
 48   | 608 | 00048_trig_update      | 1970-02-18 00:00:00.000000 -08:00 | 1970-02-18 00:00:00.000000 | 8  | 8          | foo
 58   | 608 | 00058_trig_update      | 1970-02-28 00:00:00.000000 -08:00 | 1970-02-28 00:00:00.000000 | 8  | 8          | foo
 68   | 608 | 00068_trig_update      | 1970-03-10 00:00:00.000000 -08:00 | 1970-03-10 00:00:00.000000 | 8  | 8          | foo
 78   | 608 | 00078_trig_update      | 1970-03-20 00:00:00.000000 -08:00 | 1970-03-20 00:00:00.000000 | 8  | 8          | foo
 88   | 608 | 00088_trig_update      | 1970-03-30 00:00:00.000000 -08:00 | 1970-03-30 00:00:00.000000 | 8  | 8          | foo
 98   | 608 | 00098_trig_update      | 1970-04-09 00:00:00.000000 -08:00 | 1970-04-09 00:00:00.000000 | 8  | 8          | foo
 108  | 608 | 00108_trig_update      | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 118  | 608 | 00118_trig_update      | 1970-01-19 00:00:00.000000 -08:00 | 1970-01-19 00:00:00.000000 | 8  | 8          | foo
 128  | 608 | 00128_trig_update      | 1970-01-29 00:00:00.000000 -08:00 | 1970-01-29 00:00:00.000000 | 8  | 8          | foo
 138  | 608 | 00138_trig_update      | 1970-02-08 00:00:00.000000 -08:00 | 1970-02-08 00:00:00.000000 | 8  | 8          | foo
 148  | 608 | 00148_trig_update      | 1970-02-18 00:00:00.000000 -08:00 | 1970-02-18 00:00:00.000000 | 8  | 8          | foo
 158  | 608 | 00158_trig_update      | 1970-02-28 00:00:00.000000 -08:00 | 1970-02-28 00:00:00.000000 | 8  | 8          | foo
 168  | 608 | 00168_trig_update      | 1970-03-10 00:00:00.000000 -08:00 | 1970-03-10 00:00:00.000000 | 8  | 8          | foo
 178  | 608 | 00178_trig_update      | 1970-03-20 00:00:00.000000 -08:00 | 1970-03-20 00:00:00.000000 | 8  | 8          | foo
 188  | 608 | 00188_trig_update      | 1970-03-30 00:00:00.000000 -08:00 | 1970-03-30 00:00:00.000000 | 8  | 8          | foo
 198  | 608 | 00198_trig_update      | 1970-04-09 00:00:00.000000 -08:00 | 1970-04-09 00:00:00.000000 | 8  | 8          | foo
 208  | 608 | 00208_trig_update      | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 218  | 608 | 00218_trig_update      | 1970-01-19 00:00:00.000000 -08:00 | 1970-01-19 00:00:00.000000 | 8  | 8          | foo
 228  | 608 | 00228_trig_update      | 1970-01-29 00:00:00.000000 -08:00 | 1970-01-29 00:00:00.000000 | 8  | 8          | foo
 238  | 608 | 00238_trig_update      | 1970-02-08 00:00:00.000000 -08:00 | 1970-02-08 00:00:00.000000 | 8  | 8          | foo
 248  | 608 | 00248_trig_update      | 1970-02-18 00:00:00.000000 -08:00 | 1970-02-18 00:00:00.000000 | 8  | 8          | foo
 258  | 608 | 00258_trig_update      | 1970-02-28 00:00:00.000000 -08:00 | 1970-02-28 00:00:00.000000 | 8  | 8          | foo
 268  | 608 | 00268_trig_update      | 1970-03-10 00:00:00.000000 -08:00 | 1970-03-10 00:00:00.000000 | 8  | 8          | foo
 278  | 608 | 00278_trig_update      | 1970-03-20 00:00:00.000000 -08:00 | 1970-03-20 00:00:00.000000 | 8  | 8          | foo
 288  | 608 | 00288_trig_update      | 1970-03-30 00:00:00.000000 -08:00 | 1970-03-30 00:00:00.000000 | 8  | 8          | foo
 298  | 608 | 00298_trig_update      | 1970-04-09 00:00:00.000000 -08:00 | 1970-04-09 00:00:00.000000 | 8  | 8          | foo
 308  | 608 | 00308_trig_update      | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 318  | 608 | 00318_trig_update      | 1970-01-19 00:00:00.000000 -08:00 | 1970-01-19 00:00:00.000000 | 8  | 8          | foo
 328  | 608 | 00328_trig_update      | 1970-01-29 00:00:00.000000 -08:00 | 1970-01-29 00:00:00.000000 | 8  | 8          | foo
 338  | 608 | 00338_trig_update      | 1970-02-08 00:00:00.000000 -08:00 | 1970-02-08 00:00:00.000000 | 8  | 8          | foo
 348  | 608 | 00348_trig_update      | 1970-02-18 00:00:00.000000 -08:00 | 1970-02-18 00:00:00.000000 | 8  | 8          | foo
 358  | 608 | 00358_trig_update      | 1970-02-28 00:00:00.000000 -08:00 | 1970-02-28 00:00:00.000000 | 8  | 8          | foo
 368  | 608 | 00368_trig_update      | 1970-03-10 00:00:00.000000 -08:00 | 1970-03-10 00:00:00.000000 | 8  | 8          | foo
 378  | 608 | 00378_trig_update      | 1970-03-20 00:00:00.000000 -08:00 | 1970-03-20 00:00:00.000000 | 8  | 8          | foo
 388  | 608 | 00388_trig_update      | 1970-03-30 00:00:00.000000 -08:00 | 1970-03-30 00:00:00.000000 | 8  | 8          | foo
 398  | 608 | 00398_trig_update      | 1970-04-09 00:00:00.000000 -08:00 | 1970-04-09 00:00:00.000000 | 8  | 8          | foo
 408  | 608 | 00408_trig_update      | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 418  | 608 | 00418_trig_update      | 1970-01-19 00:00:00.000000 -08:00 | 1970-01-19 00:00:00.000000 | 8  | 8          | foo
 428  | 608 | 00428_trig_update      | 1970-01-29 00:00:00.000000 -08:00 | 1970-01-29 00:00:00.000000 | 8  | 8          | foo
 438  | 608 | 00438_trig_update      | 1970-02-08 00:00:00.000000 -08:00 | 1970-02-08 00:00:00.000000 | 8  | 8          | foo
 448  | 608 | 00448_trig_update      | 1970-02-18 00:00:00.000000 -08:00 | 1970-02-18 00:00:00.000000 | 8  | 8          | foo
 458  | 608 | 00458_trig_update      | 1970-02-28 00:00:00.000000 -08:00 | 1970-02-28 00:00:00.000000 | 8  | 8          | foo
 468  | 608 | 00468_trig_update      | 1970-03-10 00:00:00.000000 -08:00 | 1970-03-10 00:00:00.000000 | 8  | 8          | foo
 478  | 608 | 00478_trig_update      | 1970-03-20 00:00:00.000000 -08:00 | 1970-03-20 00:00:00.000000 | 8  | 8          | foo
 488  | 608 | 00488_trig_update      | 1970-03-30 00:00:00.000000 -08:00 | 1970-03-30 00:00:00.000000 | 8  | 8          | foo
 498  | 608 | 00498_trig_update      | 1970-04-09 00:00:00.000000 -08:00 | 1970-04-09 00:00:00.000000 | 8  | 8          | foo
 508  | 608 | 00508_trig_update      | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 518  | 608 | 00518_trig_update      | 1970-01-19 00:00:00.000000 -08:00 | 1970-01-19 00:00:00.000000 | 8  | 8          | foo
 528  | 608 | 00528_trig_update      | 1970-01-29 00:00:00.000000 -08:00 | 1970-01-29 00:00:00.000000 | 8  | 8          | foo
 538  | 608 | 00538_trig_update      | 1970-02-08 00:00:00.000000 -08:00 | 1970-02-08 00:00:00.000000 | 8  | 8          | foo
 548  | 608 | 00548_trig_update      | 1970-02-18 00:00:00.000000 -08:00 | 1970-02-18 00:00:00.000000 | 8  | 8          | foo
 558  | 608 | 00558_trig_update      | 1970-02-28 00:00:00.000000 -08:00 | 1970-02-28 00:00:00.000000 | 8  | 8          | foo
 568  | 608 | 00568_trig_update      | 1970-03-10 00:00:00.000000 -08:00 | 1970-03-10 00:00:00.000000 | 8  | 8          | foo
 578  | 608 | 00578_trig_update      | 1970-03-20 00:00:00.000000 -08:00 | 1970-03-20 00:00:00.000000 | 8  | 8          | foo
 588  | 608 | 00588_trig_update      | 1970-03-30 00:00:00.000000 -08:00 | 1970-03-30 00:00:00.000000 | 8  | 8          | foo
 598  | 608 | 00598_trig_update      | 1970-04-09 00:00:00.000000 -08:00 | 1970-04-09 00:00:00.000000 | 8  | 8          | foo
 608  | 608 | 00608_trig_update      | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 618  | 608 | 00618_trig_update      | 1970-01-19 00:00:00.000000 -08:00 | 1970-01-19 00:00:00.000000 | 8  | 8          | foo
 628  | 608 | 00628_trig_update      | 1970-01-29 00:00:00.000000 -08:00 | 1970-01-29 00:00:00.000000 | 8  | 8          | foo
 638  | 608 | 00638_trig_update      | 1970-02-08 00:00:00.000000 -08:00 | 1970-02-08 00:00:00.000000 | 8  | 8          | foo
 648  | 608 | 00648_trig_update      | 1970-02-18 00:00:00.000000 -08:00 | 1970-02-18 00:00:00.000000 | 8  | 8          | foo
 658  | 608 | 00658_trig_update      | 1970-02-28 00:00:00.000000 -08:00 | 1970-02-28 00:00:00.000000 | 8  | 8          | foo
 668  | 608 | 00668_trig_update      | 1970-03-10 00:00:00.000000 -08:00 | 1970-03-10 00:00:00.000000 | 8  | 8          | foo
 678  | 608 | 00678_trig_update      | 1970-03-20 00:00:00.000000 -08:00 | 1970-03-20 00:00:00.000000 | 8  | 8          | foo
 688  | 608 | 00688_trig_update      | 1970-03-30 00:00:00.000000 -08:00 | 1970-03-30 00:00:00.000000 | 8  | 8          | foo
 698  | 608 | 00698_trig_update      | 1970-04-09 00:00:00.000000 -08:00 | 1970-04-09 00:00:00.000000 | 8  | 8          | foo
 708  | 608 | 00708_trig_update      | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 718  | 608 | 00718_trig_update      | 1970-01-19 00:00:00.000000 -08:00 | 1970-01-19 00:00:00.000000 | 8  | 8          | foo
 728  | 608 | 00728_trig_update      | 1970-01-29 00:00:00.000000 -08:00 | 1970-01-29 00:00:00.000000 | 8  | 8          | foo
 738  | 608 | 00738_trig_update      | 1970-02-08 00:00:00.000000 -08:00 | 1970-02-08 00:00:00.000000 | 8  | 8          | foo
 748  | 608 | 00748_trig_update      | 1970-02-18 00:00:00.000000 -08:00 | 1970-02-18 00:00:00.000000 | 8  | 8          | foo
 758  | 608 | 00758_trig_update      | 1970-02-28 00:00:00.000000 -08:00 | 1970-02-28 00:00:00.000000 | 8  | 8          | foo
 768  | 608 | 00768_trig_update      | 1970-03-10 00:00:00.000000 -08:00 | 1970-03-10 00:00:00.000000 | 8  | 8          | foo
 778  | 608 | 00778_trig_update      | 1970-03-20 00:00:00.000000 -08:00 | 1970-03-20 00:00:00.000000 | 8  | 8          | foo
 788  | 608 | 00788_trig_update      | 1970-03-30 00:00:00.000000 -08:00 | 1970-03-30 00:00:00.000000 | 8  | 8          | foo
 798  | 608 | 00798_trig_update      | 1970-04-09 00:00:00.000000 -08:00 | 1970-04-09 00:00:00.000000 | 8  | 8          | foo
 808  | 608 | 00808_trig_update      | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 818  | 608 | 00818_trig_update      | 1970-01-19 00:00:00.000000 -08:00 | 1970-01-19 00:00:00.000000 | 8  | 8          | foo
 828  | 608 | 00828_trig_update      | 1970-01-29 00:00:00.000000 -08:00 | 1970-01-29 00:00:00.000000 | 8  | 8          | foo
 838  | 608 | 00838_trig_update      | 1970-02-08 00:00:00.000000 -08:00 | 1970-02-08 00:00:00.000000 | 8  | 8          | foo
 848  | 608 | 00848_trig_update      | 1970-02-18 00:00:00.000000 -08:00 | 1970-02-18 00:00:00.000000 | 8  | 8          | foo
 858  | 608 | 00858_trig_update      | 1970-02-28 00:00:00.000000 -08:00 | 1970-02-28 00:00:00.000000 | 8  | 8          | foo
 868  | 608 | 00868_trig_update      | 1970-03-10 00:00:00.000000 -08:00 | 1970-03-10 00:00:00.000000 | 8  | 8          | foo
 878  | 608 | 00878_trig_update      | 1970-03-20 00:00:00.000000 -08:00 | 1970-03-20 00:00:00.000000 | 8  | 8          | foo
 888  | 608 | 00888_trig_update      | 1970-03-30 00:00:00.000000 -08:00 | 1970-03-30 00:00:00.000000 | 8  | 8          | foo
 898  | 608 | 00898_trig_update      | 1970-04-09 00:00:00.000000 -08:00 | 1970-04-09 00:00:00.000000 | 8  | 8          | foo
 908  | 608 | 00908_trig_update      | 1970-01-09 00:00:00.000000 -08:00 | 1970-01-09 00:00:00.000000 | 8  | 8          | foo
 918  | 608 | 00918_trig_update      | 1970-01-19 00:00:00.000000 -08:00 | 1970-01-19 00:00:00.000000 | 8  | 8          | foo
 928  | 608 | 00928_trig_update      | 1970-01-29 00:00:00.000000 -08:00 | 1970-01-29 00:00:00.000000 | 8  | 8          | foo
 938  | 608 | 00938_trig_update      | 1970-02-08 00:00:00.000000 -08:00 | 1970-02-08 00:00:00.000000 | 8  | 8          | foo
 948  | 608 | 00948_trig_update      | 1970-02-18 00:00:00.000000 -08:00 | 1970-02-18 00:00:00.000000 | 8  | 8          | foo
 958  | 608 | 00958_trig_update      | 1970-02-28 00:00:00.000000 -08:00 | 1970-02-28 00:00:00.000000 | 8  | 8          | foo
 968  | 608 | 00968_trig_update      | 1970-03-10 00:00:00.000000 -08:00 | 1970-03-10 00:00:00.000000 | 8  | 8          | foo
 978  | 608 | 00978_trig_update      | 1970-03-20 00:00:00.000000 -08:00 | 1970-03-20 00:00:00.000000 | 8  | 8          | foo
 988  | 608 | 00988_trig_update      | 1970-03-30 00:00:00.000000 -08:00 | 1970-03-30 00:00:00.000000 | 8  | 8          | foo
 998  | 608 | 00998_trig_update      | 1970-04-09 00:00:00.000000 -08:00 | 1970-04-09 00:00:00.000000 | 8  | 8          | foo
 1008 | 708 | 0000800008_trig_update |                                   |                            |    | ft2        | 
 1018 | 708 | 0001800018_trig_update |                                   |                            |    | ft2        | 
(102 rows)

-- Test errors thrown on remote side during update
ALTER TABLE "S 1"."T 1" ADD CONSTRAINT c2positive CHECK (c2 >= 0);
INSERT INTO ft1(c1, c2) VALUES(11, 12);  -- duplicate key
ERROR:  duplicate key value violates unique constraint "t1_pkey"
DETAIL:  Key ("C 1")=(11) already exists.
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT DO NOTHING; -- works
INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO NOTHING; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO UPDATE SET c3 = 'ffg'; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1111, -2, _trig_update, null, null, null, ft1       , null).
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1, -1, 00001_trig_update, 1970-01-02 08:00:00.000000 +00:00, 1970-01-02 00:00:00.000000, 1, 1         , foo).
CONTEXT:  remote SQL command: UPDATE "S 1"."T 1" SET c2 = $2 WHERE ctid = $1
-- Test savepoint/rollback behavior
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 0   |   100
 1   |   100
 4   |   100
 6   |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 0   |   100
 1   |   100
 4   |   100
 6   |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

begin;
update ft2 set c2 = 42 where c2 = 0;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 1   |   100
 4   |   100
 6   |   100
 42  |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

savepoint s1;
update ft2 set c2 = 44 where c2 = 4;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 1   |   100
 6   |   100
 42  |   100
 44  |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

release savepoint s1;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 1   |   100
 6   |   100
 42  |   100
 44  |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

savepoint s2;
update ft2 set c2 = 46 where c2 = 6;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 1   |   100
 42  |   100
 44  |   100
 46  |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

rollback to savepoint s2;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 1   |   100
 6   |   100
 42  |   100
 44  |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

release savepoint s2;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 1   |   100
 6   |   100
 42  |   100
 44  |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

savepoint s3;
update ft2 set c2 = -2 where c2 = 42 and c1 = 10; -- fail on remote side
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (10, -2, 00010_trig_update_trig_update, 1970-01-11 08:00:00.000000 +00:00, 1970-01-11 00:00:00.000000, 0, 0         , foo).
CONTEXT:  remote SQL command: UPDATE "S 1"."T 1" SET c2 = $2 WHERE ctid = $1
rollback to savepoint s3;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 1   |   100
 6   |   100
 42  |   100
 44  |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

release savepoint s3;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 1   |   100
 6   |   100
 42  |   100
 44  |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

-- none of the above is committed yet remotely
select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 0   |   100
 1   |   100
 4   |   100
 6   |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

commit;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 1   |   100
 6   |   100
 42  |   100
 44  |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
 1   |   100
 6   |   100
 42  |   100
 44  |   100
 100 |     2
 101 |     2
 104 |     2
 106 |     2
 201 |     1
 204 |     1
 303 |   100
 403 |     2
 407 |   100
(13 rows)

VACUUM ANALYZE "S 1"."T 1";
-- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
-- FIRST behavior here.
-- ORDER BY DESC NULLS LAST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795 LIMIT 10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8
         Sort Key: ft1.c6 DESC NULLS LAST, ft1.c1
         ->  Foreign Scan on public.ft1
               Output: c1, c2, c3, c4, c5, c6, c7, c8
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
  c1  | c2  |         c3         |                c4                 |             c5             |  c6  |     c7     | c8  
------+-----+--------------------+-----------------------------------+----------------------------+------+------------+-----
 960  | 42  | 00960_trig_update  | 1970-03-02 00:00:00.000000 -08:00 | 1970-03-02 00:00:00.000000 | 0    | 0          | foo
 970  | 42  | 00970_trig_update  | 1970-03-12 00:00:00.000000 -08:00 | 1970-03-12 00:00:00.000000 | 0    | 0          | foo
 980  | 42  | 00980_trig_update  | 1970-03-22 00:00:00.000000 -08:00 | 1970-03-22 00:00:00.000000 | 0    | 0          | foo
 990  | 42  | 00990_trig_update  | 1970-04-01 00:00:00.000000 -08:00 | 1970-04-01 00:00:00.000000 | 0    | 0          | foo
 1000 | 42  | 01000_trig_update  | 1970-01-01 00:00:00.000000 -08:00 | 1970-01-01 00:00:00.000000 | 0    | 0          | foo
 1218 | 818 | ggg_trig_update    |                                   |                            | (--; | ft2        | 
 1001 | 101 | 0000100001         |                                   |                            |      | ft2        | 
 1003 | 403 | 0000300003_update3 |                                   |                            |      | ft2        | 
 1004 | 104 | 0000400004         |                                   |                            |      | ft2        | 
 1006 | 106 | 0000600006         |                                   |                            |      | ft2        | 
(10 rows)

-- ORDER BY DESC NULLS FIRST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8
         Sort Key: ft1.c6 DESC, ft1.c1
         ->  Foreign Scan on public.ft1
               Output: c1, c2, c3, c4, c5, c6, c7, c8
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
  c1  | c2  |       c3        |                c4                 |             c5             | c6 |     c7     | c8  
------+-----+-----------------+-----------------------------------+----------------------------+----+------------+-----
 1020 | 100 | 0002000020      |                                   |                            |    | ft2        | 
 1101 | 201 | aaa             |                                   |                            |    | ft2        | 
 1103 | 503 | ccc_update3     |                                   |                            |    | ft2        | 
 1104 | 204 | ddd             |                                   |                            |    | ft2        | 
 1208 | 818 | fff_trig_update |                                   |                            |    | ft2        | 
 9    | 509 | 00009_update9   | 1970-01-10 00:00:00.000000 -08:00 | 1970-01-10 00:00:00.000000 | 9  | ft2        | foo
 19   | 509 | 00019_update9   | 1970-01-20 00:00:00.000000 -08:00 | 1970-01-20 00:00:00.000000 | 9  | ft2        | foo
 29   | 509 | 00029_update9   | 1970-01-30 00:00:00.000000 -08:00 | 1970-01-30 00:00:00.000000 | 9  | ft2        | foo
 39   | 509 | 00039_update9   | 1970-02-09 00:00:00.000000 -08:00 | 1970-02-09 00:00:00.000000 | 9  | ft2        | foo
 49   | 509 | 00049_update9   | 1970-02-19 00:00:00.000000 -08:00 | 1970-02-19 00:00:00.000000 | 9  | ft2        | foo
(10 rows)

-- ORDER BY ASC NULLS FIRST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8
         Sort Key: ft1.c6 NULLS FIRST, ft1.c1
         ->  Foreign Scan on public.ft1
               Output: c1, c2, c3, c4, c5, c6, c7, c8
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(8 rows)

SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
  c1  | c2  |        c3         |                c4                 |             c5             |  c6  |     c7     | c8  
------+-----+-------------------+-----------------------------------+----------------------------+------+------------+-----
 1020 | 100 | 0002000020        |                                   |                            |      | ft2        | 
 1101 | 201 | aaa               |                                   |                            |      | ft2        | 
 1103 | 503 | ccc_update3       |                                   |                            |      | ft2        | 
 1104 | 204 | ddd               |                                   |                            |      | ft2        | 
 1208 | 818 | fff_trig_update   |                                   |                            |      | ft2        | 
 1218 | 818 | ggg_trig_update   |                                   |                            | (--; | ft2        | 
 10   | 42  | 00010_trig_update | 1970-01-11 00:00:00.000000 -08:00 | 1970-01-11 00:00:00.000000 | 0    | 0          | foo
 20   | 42  | 00020_trig_update | 1970-01-21 00:00:00.000000 -08:00 | 1970-01-21 00:00:00.000000 | 0    | 0          | foo
 30   | 42  | 00030_trig_update | 1970-01-31 00:00:00.000000 -08:00 | 1970-01-31 00:00:00.000000 | 0    | 0          | foo
 40   | 42  | 00040_trig_update | 1970-02-10 00:00:00.000000 -08:00 | 1970-02-10 00:00:00.000000 | 0    | 0          | foo
(10 rows)

-- ===================================================================
-- test check constraints
-- ===================================================================
-- Consistent check constraints provide consistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2positive CHECK (c2 >= 0);
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
                   QUERY PLAN                   
------------------------------------------------
 Aggregate
   Output: count(*)
   ->  Foreign Scan on public.ft1
         Filter: (ft1.c2 < '0'::number)
         Remote SQL: SELECT c2 FROM "S 1"."T 1"
(5 rows)

SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

SET constraint_exclusion = 'on';
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

RESET constraint_exclusion;
-- check constraint is enforced on the remote side, not locally
INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1111, -2, _trig_update, null, null, null, ft1       , null).
CONTEXT:  remote SQL command: INSERT INTO "S 1"."T 1"("C 1", c2, c3, c4, c5, c6, c7, c8) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ERROR:  new row for relation "T 1" violates check constraint "c2positive"
DETAIL:  Failing row contains (1, -1, 00001_trig_update, 1970-01-02 08:00:00.000000 +00:00, 1970-01-02 00:00:00.000000, 1, 1         , foo).
CONTEXT:  remote SQL command: UPDATE "S 1"."T 1" SET c2 = $2 WHERE ctid = $1
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2positive;
-- But inconsistent check constraints provide inconsistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2negative CHECK (c2 < 0);
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
                   QUERY PLAN                   
------------------------------------------------
 Aggregate
   Output: count(*)
   ->  Foreign Scan on public.ft1
         Filter: (ft1.c2 >= '0'::number)
         Remote SQL: SELECT c2 FROM "S 1"."T 1"
(5 rows)

SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
   821
(1 row)

SET constraint_exclusion = 'on';
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
     0
(1 row)

RESET constraint_exclusion;
-- local check constraint is not actually enforced
INSERT INTO ft1(c1, c2) VALUES(1111, 2);
UPDATE ft1 SET c2 = c2 + 1 WHERE c1 = 1;
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2negative;
-- ===================================================================
-- test WITH CHECK OPTION constraints
-- ===================================================================
CREATE FUNCTION row_before_insupd_trigfunc() RETURNS trigger AS $$BEGIN NEW.a := NEW.a + 10; RETURN NEW; END$$ LANGUAGE plpgsql;
/
CREATE TABLE base_tbl (a number(38,0), b number(38,0));
ALTER TABLE base_tbl SET (autovacuum_enabled = 'false');
CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON base_tbl FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
CREATE FOREIGN TABLE foreign_tbl (a int, b int)
  SERVER loopback OPTIONS (table_name 'base_tbl');
CREATE VIEW rw_view AS SELECT * FROM foreign_tbl
  WHERE a < b WITH CHECK OPTION;
\d+ rw_view
                               View "public.rw_view"
 Column |      Type       | Collation | Nullable | Default | Storage | Description 
--------+-----------------+-----------+----------+---------+---------+-------------
 a      | pg_catalog.int4 |           |          |         | plain   | 
 b      | pg_catalog.int4 |           |          |         | plain   | 
View definition:
 SELECT a,
    b
   FROM foreign_tbl
  WHERE a < b;
Options: check_option=cascaded

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 5);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Insert on public.foreign_tbl
   Remote SQL: INSERT INTO public.base_tbl(a, b) VALUES ($1, $2) RETURNING a, b
   Batch Size: 1
   ->  Result
         Output: 0, 5
(5 rows)

INSERT INTO rw_view VALUES (0, 5); -- should fail
ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (10, 5).
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 15);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Insert on public.foreign_tbl
   Remote SQL: INSERT INTO public.base_tbl(a, b) VALUES ($1, $2) RETURNING a, b
   Batch Size: 1
   ->  Result
         Output: 0, 15
(5 rows)

INSERT INTO rw_view VALUES (0, 15); -- ok
SELECT * FROM foreign_tbl;
 a  | b  
----+----
 10 | 15
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 5;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Update on public.foreign_tbl
   Remote SQL: UPDATE public.base_tbl SET b = $2 WHERE ctid = $1 RETURNING a, b
   ->  Foreign Scan on public.foreign_tbl
         Output: (foreign_tbl.b + 5), foreign_tbl.ctid, foreign_tbl.*
         Remote SQL: SELECT a, b, ctid FROM public.base_tbl WHERE ((a < b)) FOR UPDATE
(5 rows)

UPDATE rw_view SET b = b + 5; -- should fail
ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (20, 20).
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 15;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Update on public.foreign_tbl
   Remote SQL: UPDATE public.base_tbl SET b = $2 WHERE ctid = $1 RETURNING a, b
   ->  Foreign Scan on public.foreign_tbl
         Output: (foreign_tbl.b + 15), foreign_tbl.ctid, foreign_tbl.*
         Remote SQL: SELECT a, b, ctid FROM public.base_tbl WHERE ((a < b)) FOR UPDATE
(5 rows)

UPDATE rw_view SET b = b + 15; -- ok
SELECT * FROM foreign_tbl;
 a  | b  
----+----
 20 | 30
(1 row)

-- We don't allow batch insert when there are any WCO constraints
ALTER SERVER loopback OPTIONS (ADD batch_size '10');
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 15), (0, 5);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Insert on public.foreign_tbl
   Remote SQL: INSERT INTO public.base_tbl(a, b) VALUES ($1, $2) RETURNING a, b
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1, "*VALUES*".column2
(5 rows)

INSERT INTO rw_view VALUES (0, 15), (0, 5); -- should fail
ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (10, 5).
SELECT * FROM foreign_tbl;
 a  | b  
----+----
 20 | 30
(1 row)

ALTER SERVER loopback OPTIONS (DROP batch_size);
DROP FOREIGN TABLE foreign_tbl CASCADE;
NOTICE:  drop cascades to view rw_view
DROP TRIGGER row_before_insupd_trigger ON base_tbl;
DROP TABLE base_tbl;
-- test WCO for partitions
CREATE TABLE child_tbl (a number(38,0), b number(38,0));
ALTER TABLE child_tbl SET (autovacuum_enabled = 'false');
CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON child_tbl FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
CREATE FOREIGN TABLE foreign_tbl (a number(38,0), b number(38,0))
  SERVER loopback OPTIONS (table_name 'child_tbl');
CREATE TABLE parent_tbl (a number(38,0), b number(38,0)) PARTITION BY RANGE(a);
ALTER TABLE parent_tbl ATTACH PARTITION foreign_tbl FOR VALUES FROM (0) TO (100);
-- Detach and re-attach once, to stress the concurrent detach case.
ALTER TABLE parent_tbl DETACH PARTITION foreign_tbl CONCURRENTLY;
ALTER TABLE parent_tbl ATTACH PARTITION foreign_tbl FOR VALUES FROM (0) TO (100);
CREATE VIEW rw_view AS SELECT * FROM parent_tbl
  WHERE a < b WITH CHECK OPTION;
\d+ rw_view
                             View "public.rw_view"
 Column |     Type     | Collation | Nullable | Default | Storage | Description 
--------+--------------+-----------+----------+---------+---------+-------------
 a      | number(38,0) |           |          |         | main    | 
 b      | number(38,0) |           |          |         | main    | 
View definition:
 SELECT a,
    b
   FROM parent_tbl
  WHERE a < b;
Options: check_option=cascaded

EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 5);
                      QUERY PLAN                      
------------------------------------------------------
 Insert on public.parent_tbl
   ->  Result
         Output: '0'::number(38,0), '5'::number(38,0)
(3 rows)

INSERT INTO rw_view VALUES (0, 5); -- should fail
ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (10, 5).
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 15);
                      QUERY PLAN                       
-------------------------------------------------------
 Insert on public.parent_tbl
   ->  Result
         Output: '0'::number(38,0), '15'::number(38,0)
(3 rows)

INSERT INTO rw_view VALUES (0, 15); -- ok
SELECT * FROM foreign_tbl;
 a  | b  
----+----
 10 | 15
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 5;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Update on public.parent_tbl
   Foreign Update on public.foreign_tbl parent_tbl_1
     Remote SQL: UPDATE public.child_tbl SET b = $2 WHERE ctid = $1 RETURNING a, b
   ->  Foreign Scan on public.foreign_tbl parent_tbl_1
         Output: (parent_tbl_1.b + '5'::number), parent_tbl_1.tableoid, parent_tbl_1.ctid, parent_tbl_1.*
         Filter: (parent_tbl_1.a < parent_tbl_1.b)
         Remote SQL: SELECT a, b, ctid FROM public.child_tbl FOR UPDATE
(7 rows)

UPDATE rw_view SET b = b + 5; -- should fail
ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (20, 20).
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = b + 15;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Update on public.parent_tbl
   Foreign Update on public.foreign_tbl parent_tbl_1
     Remote SQL: UPDATE public.child_tbl SET b = $2 WHERE ctid = $1 RETURNING a, b
   ->  Foreign Scan on public.foreign_tbl parent_tbl_1
         Output: (parent_tbl_1.b + '15'::number), parent_tbl_1.tableoid, parent_tbl_1.ctid, parent_tbl_1.*
         Filter: (parent_tbl_1.a < parent_tbl_1.b)
         Remote SQL: SELECT a, b, ctid FROM public.child_tbl FOR UPDATE
(7 rows)

UPDATE rw_view SET b = b + 15; -- ok
SELECT * FROM foreign_tbl;
 a  | b  
----+----
 20 | 30
(1 row)

-- We don't allow batch insert when there are any WCO constraints
ALTER SERVER loopback OPTIONS (ADD batch_size '10');
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO rw_view VALUES (0, 15), (0, 5);
                       QUERY PLAN                       
--------------------------------------------------------
 Insert on public.parent_tbl
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1, "*VALUES*".column2
(3 rows)

INSERT INTO rw_view VALUES (0, 15), (0, 5); -- should fail
ERROR:  new row violates check option for view "rw_view"
DETAIL:  Failing row contains (10, 5).
SELECT * FROM foreign_tbl;
 a  | b  
----+----
 20 | 30
(1 row)

ALTER SERVER loopback OPTIONS (DROP batch_size);
DROP FOREIGN TABLE foreign_tbl CASCADE;
DROP TRIGGER row_before_insupd_trigger ON child_tbl;
DROP TABLE parent_tbl CASCADE;
NOTICE:  drop cascades to view rw_view
DROP FUNCTION row_before_insupd_trigfunc;
-- Try a more complex permutation of WCO where there are multiple levels of
-- partitioned tables with columns not all in the same order
CREATE TABLE parent_tbl (a number(38,0), b varchar2(1024), c number) PARTITION BY RANGE(a);
CREATE TABLE sub_parent (c number, a number(38,0), b varchar2(1024)) PARTITION BY RANGE(a);
ALTER TABLE parent_tbl ATTACH PARTITION sub_parent FOR VALUES FROM (1) TO (10);
CREATE TABLE child_local (b varchar2(1024), c number, a number(38,0));
CREATE FOREIGN TABLE child_foreign (b varchar2(1024), c number, a number(38,0))
  SERVER loopback OPTIONS (table_name 'child_local');
ALTER TABLE sub_parent ATTACH PARTITION child_foreign FOR VALUES FROM (1) TO (10);
CREATE VIEW rw_view AS SELECT * FROM parent_tbl WHERE a < 5 WITH CHECK OPTION;
INSERT INTO parent_tbl (a) VALUES(1),(5);
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE rw_view SET b = 'text', c = 123.456;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Update on public.parent_tbl
   Foreign Update on public.child_foreign parent_tbl_1
     Remote SQL: UPDATE public.child_local SET b = $2, c = $3 WHERE ctid = $1 RETURNING a
   ->  Foreign Scan on public.child_foreign parent_tbl_1
         Output: 'text'::varchar2(1024), '123.456'::number, parent_tbl_1.tableoid, parent_tbl_1.ctid, parent_tbl_1.*
         Filter: (parent_tbl_1.a < '5'::number)
         Remote SQL: SELECT b, c, a, ctid FROM public.child_local FOR UPDATE
(7 rows)

UPDATE rw_view SET b = 'text', c = 123.456;
SELECT * FROM parent_tbl ORDER BY a;
 a |  b   |    c    
---+------+---------
 1 | text | 123.456
 5 |      | 
(2 rows)

DROP VIEW rw_view;
DROP TABLE child_local;
DROP FOREIGN TABLE child_foreign;
DROP TABLE sub_parent;
DROP TABLE parent_tbl;
-- ===================================================================
-- test serial columns (ie, sequence-based defaults)
-- ===================================================================
create table loc1 (f1 serial, f2 varchar2(1024));
alter table loc1 set (autovacuum_enabled = 'false');
create foreign table rem1 (f1 serial, f2 varchar2(1024))
  server loopback options(table_name 'loc1');
select pg_catalog.setval('rem1_f1_seq', 10, false);
 setval 
--------
     10
(1 row)

insert into loc1(f2) values('hi');
insert into rem1(f2) values('hi remote');
insert into loc1(f2) values('bye');
insert into rem1(f2) values('bye remote');
select * from loc1;
 f1 |     f2     
----+------------
  1 | hi
 10 | hi remote
  2 | bye
 11 | bye remote
(4 rows)

select * from rem1;
 f1 |     f2     
----+------------
  1 | hi
 10 | hi remote
  2 | bye
 11 | bye remote
(4 rows)

-- ===================================================================
-- test generated columns
-- ===================================================================
create table gloc1 (
  a number(38,0),
  b number(38,0) generated always as (a * 2) stored);
alter table gloc1 set (autovacuum_enabled = 'false');
create foreign table grem1 (
  a number(38,0),
  b number(38,0) generated always as (a * 2) stored)
  server loopback options(table_name 'gloc1');
explain (verbose, costs off)
insert into grem1 (a) values (1), (2);
                            QUERY PLAN                             
-------------------------------------------------------------------
 Insert on public.grem1
   Remote SQL: INSERT INTO public.gloc1(a, b) VALUES ($1, DEFAULT)
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1, NULL::number
(5 rows)

insert into grem1 (a) values (1), (2);
explain (verbose, costs off)
update grem1 set a = 22 where a = 2;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Update on public.grem1
   Remote SQL: UPDATE public.gloc1 SET a = $2, b = DEFAULT WHERE ctid = $1
   ->  Foreign Scan on public.grem1
         Output: '22'::number(38,0), ctid, grem1.*
         Filter: (grem1.a = '2'::number)
         Remote SQL: SELECT a, b, ctid FROM public.gloc1 FOR UPDATE
(6 rows)

update grem1 set a = 22 where a = 2;
select * from gloc1;
 a  | b  
----+----
 1  | 2
 22 | 44
(2 rows)

select * from grem1;
 a  | b  
----+----
 1  | 2
 22 | 44
(2 rows)

delete from grem1;
-- test copy from
copy grem1 from stdin;
select * from gloc1;
 a | b 
---+---
 1 | 2
 2 | 4
(2 rows)

select * from grem1;
 a | b 
---+---
 1 | 2
 2 | 4
(2 rows)

delete from grem1;
-- test batch insert
alter server loopback options (add batch_size '10');
explain (verbose, costs off)
insert into grem1 (a) values (1), (2);
                            QUERY PLAN                             
-------------------------------------------------------------------
 Insert on public.grem1
   Remote SQL: INSERT INTO public.gloc1(a, b) VALUES ($1, DEFAULT)
   Batch Size: 10
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1, NULL::number
(5 rows)

insert into grem1 (a) values (1), (2);
select * from gloc1;
 a | b 
---+---
 1 | 2
 2 | 4
(2 rows)

select * from grem1;
 a | b 
---+---
 1 | 2
 2 | 4
(2 rows)

delete from grem1;
-- batch insert with foreign partitions.
-- This schema uses two partitions, one local and one remote with a modulo
-- to loop across all of them in batches.
create table tab_batch_local (id number(38,0), data varchar2(1024));
insert into tab_batch_local select i, 'test'|| i from generate_series(1, 45) i;
create table tab_batch_sharded (id number(38,0), data varchar2(1024)) partition by hash(id);
create table tab_batch_sharded_p0 partition of tab_batch_sharded
  for values with (modulus 2, remainder 0);
create table tab_batch_sharded_p1_remote (id number(38,0), data varchar(1024));
create foreign table tab_batch_sharded_p1 partition of tab_batch_sharded
  for values with (modulus 2, remainder 1)
  server loopback options (table_name 'tab_batch_sharded_p1_remote');
insert into tab_batch_sharded select * from tab_batch_local;
select count(*) from tab_batch_sharded;
 count 
-------
    45
(1 row)

drop table tab_batch_local;
drop table tab_batch_sharded;
drop table tab_batch_sharded_p1_remote;
alter server loopback options (drop batch_size);
-- ===================================================================
-- test local triggers
-- ===================================================================
-- Trigger functions "borrowed" from triggers regress test.
CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
	RAISE NOTICE 'trigger_func(%) called: action = %, when = %, level = %',
		TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;
	RETURN NULL;
END;$$;
/
CREATE TRIGGER trig_stmt_before BEFORE DELETE OR INSERT OR UPDATE OR TRUNCATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
CREATE TRIGGER trig_stmt_after AFTER DELETE OR INSERT OR UPDATE OR TRUNCATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger
LANGUAGE plpgsql AS $$

declare
	oldnew text[];
	relid text;
    argstr text;
begin

	relid := TG_relid::regclass;
	argstr := '';
	for i in 0 .. TG_nargs - 1 loop
		if i > 0 then
			argstr := argstr || ', ';
		end if;
		argstr := argstr || TG_argv[i];
	end loop;

    RAISE NOTICE '%(%) % % % ON %',
		tg_name, argstr, TG_when, TG_level, TG_OP, relid;
    oldnew := '{}'::text[];
	if TG_OP != 'INSERT' then
		oldnew := array_append(oldnew, format('OLD: %s', OLD));
	end if;

	if TG_OP != 'DELETE' then
		oldnew := array_append(oldnew, format('NEW: %s', NEW));
	end if;

    RAISE NOTICE '%', array_to_string(oldnew, ',');

	if TG_OP = 'DELETE' then
		return OLD;
	else
		return NEW;
	end if;
end;
$$;
/
-- Test basic functionality
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
delete from rem1;
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1
NOTICE:  OLD: (1,hi)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1
NOTICE:  OLD: (10,"hi remote")
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1
NOTICE:  OLD: (2,bye)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON rem1
NOTICE:  OLD: (11,"bye remote")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1
NOTICE:  OLD: (1,hi)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1
NOTICE:  OLD: (10,"hi remote")
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1
NOTICE:  OLD: (2,bye)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON rem1
NOTICE:  OLD: (11,"bye remote")
NOTICE:  trigger_func(<NULL>) called: action = DELETE, when = AFTER, level = STATEMENT
insert into rem1 values(1,'insert');
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1
NOTICE:  NEW: (1,insert)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1
NOTICE:  NEW: (1,insert)
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = AFTER, level = STATEMENT
update rem1 set f2  = 'update' where f1 = 1;
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1
NOTICE:  OLD: (1,insert),NEW: (1,update)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1
NOTICE:  OLD: (1,insert),NEW: (1,update)
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = AFTER, level = STATEMENT
update rem1 set f2 = f2 || f2;
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1
NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1
NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
NOTICE:  trigger_func(<NULL>) called: action = UPDATE, when = AFTER, level = STATEMENT
truncate rem1;
NOTICE:  trigger_func(<NULL>) called: action = TRUNCATE, when = BEFORE, level = STATEMENT
NOTICE:  trigger_func(<NULL>) called: action = TRUNCATE, when = AFTER, level = STATEMENT
-- cleanup
DROP TRIGGER trig_row_before ON rem1;
DROP TRIGGER trig_row_after ON rem1;
DROP TRIGGER trig_stmt_before ON rem1;
DROP TRIGGER trig_stmt_after ON rem1;
DELETE from rem1;
-- Test multiple AFTER ROW triggers on a foreign table
CREATE TRIGGER trig_row_after1
AFTER INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after2
AFTER INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
insert into rem1 values(1,'insert');
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW INSERT ON rem1
NOTICE:  NEW: (1,insert)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW INSERT ON rem1
NOTICE:  NEW: (1,insert)
update rem1 set f2  = 'update' where f1 = 1;
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW UPDATE ON rem1
NOTICE:  OLD: (1,insert),NEW: (1,update)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW UPDATE ON rem1
NOTICE:  OLD: (1,insert),NEW: (1,update)
update rem1 set f2 = f2 || f2;
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW UPDATE ON rem1
NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW UPDATE ON rem1
NOTICE:  OLD: (1,update),NEW: (1,updateupdate)
delete from rem1;
NOTICE:  trig_row_after1(23, skidoo) AFTER ROW DELETE ON rem1
NOTICE:  OLD: (1,updateupdate)
NOTICE:  trig_row_after2(23, skidoo) AFTER ROW DELETE ON rem1
NOTICE:  OLD: (1,updateupdate)
-- cleanup
DROP TRIGGER trig_row_after1 ON rem1;
DROP TRIGGER trig_row_after2 ON rem1;
-- Test WHEN conditions
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after_insupd
AFTER INSERT OR UPDATE ON rem1
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Insert or update not matching: nothing happens
INSERT INTO rem1 values(1, 'insert');
UPDATE rem1 set f2 = 'test';
-- Insert or update matching: triggers are fired
INSERT INTO rem1 values(2, 'update');
NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW INSERT ON rem1
NOTICE:  NEW: (2,update)
NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW INSERT ON rem1
NOTICE:  NEW: (2,update)
UPDATE rem1 set f2 = 'update update' where f1 = '2';
NOTICE:  trig_row_before_insupd(23, skidoo) BEFORE ROW UPDATE ON rem1
NOTICE:  OLD: (2,update),NEW: (2,"update update")
NOTICE:  trig_row_after_insupd(23, skidoo) AFTER ROW UPDATE ON rem1
NOTICE:  OLD: (2,update),NEW: (2,"update update")
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Trigger is fired for f1=2, not for f1=1
DELETE FROM rem1;
NOTICE:  trig_row_before_delete(23, skidoo) BEFORE ROW DELETE ON rem1
NOTICE:  OLD: (2,"update update")
NOTICE:  trig_row_after_delete(23, skidoo) AFTER ROW DELETE ON rem1
NOTICE:  OLD: (2,"update update")
-- cleanup
DROP TRIGGER trig_row_before_insupd ON rem1;
DROP TRIGGER trig_row_after_insupd ON rem1;
DROP TRIGGER trig_row_before_delete ON rem1;
DROP TRIGGER trig_row_after_delete ON rem1;
-- Test various RETURN statements in BEFORE triggers.
CREATE FUNCTION trig_row_before_insupdate() RETURNS TRIGGER AS $$
  BEGIN
    NEW.f2 := NEW.f2 || ' triggered !';
    RETURN NEW;
  END
$$ language plpgsql;
/
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- The new values should have 'triggered' appended
INSERT INTO rem1 values(1, 'insert');
SELECT * from loc1;
 f1 |         f2         
----+--------------------
  1 | insert triggered !
(1 row)

INSERT INTO rem1 values(2, 'insert') RETURNING f2;
         f2         
--------------------
 insert triggered !
(1 row)

SELECT * from loc1;
 f1 |         f2         
----+--------------------
  1 | insert triggered !
  2 | insert triggered !
(2 rows)

UPDATE rem1 set f2 = '';
SELECT * from loc1;
 f1 |      f2      
----+--------------
  1 |  triggered !
  2 |  triggered !
(2 rows)

UPDATE rem1 set f2 = 'skidoo' RETURNING f2;
         f2         
--------------------
 skidoo triggered !
 skidoo triggered !
(2 rows)

SELECT * from loc1;
 f1 |         f2         
----+--------------------
  1 | skidoo triggered !
  2 | skidoo triggered !
(2 rows)

EXPLAIN (verbose, costs off)
UPDATE rem1 set f1 = 10;          -- all columns should be transmitted
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Update on public.rem1
   Remote SQL: UPDATE public.loc1 SET f1 = $2, f2 = $3 WHERE ctid = $1
   ->  Foreign Scan on public.rem1
         Output: 10, ctid, rem1.*
         Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
(5 rows)

UPDATE rem1 set f1 = 10;
SELECT * from loc1;
 f1 |               f2               
----+--------------------------------
 10 | skidoo triggered ! triggered !
 10 | skidoo triggered ! triggered !
(2 rows)

DELETE FROM rem1;
-- Add a second trigger, to check that the changes are propagated correctly
-- from trigger to trigger
CREATE TRIGGER trig_row_before_insupd2
BEFORE INSERT OR UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
INSERT INTO rem1 values(1, 'insert');
SELECT * from loc1;
 f1 |               f2               
----+--------------------------------
  1 | insert triggered ! triggered !
(1 row)

INSERT INTO rem1 values(2, 'insert') RETURNING f2;
               f2               
--------------------------------
 insert triggered ! triggered !
(1 row)

SELECT * from loc1;
 f1 |               f2               
----+--------------------------------
  1 | insert triggered ! triggered !
  2 | insert triggered ! triggered !
(2 rows)

UPDATE rem1 set f2 = '';
SELECT * from loc1;
 f1 |            f2            
----+--------------------------
  1 |  triggered ! triggered !
  2 |  triggered ! triggered !
(2 rows)

UPDATE rem1 set f2 = 'skidoo' RETURNING f2;
               f2               
--------------------------------
 skidoo triggered ! triggered !
 skidoo triggered ! triggered !
(2 rows)

SELECT * from loc1;
 f1 |               f2               
----+--------------------------------
  1 | skidoo triggered ! triggered !
  2 | skidoo triggered ! triggered !
(2 rows)

DROP TRIGGER trig_row_before_insupd ON rem1;
DROP TRIGGER trig_row_before_insupd2 ON rem1;
DELETE from rem1;
INSERT INTO rem1 VALUES (1, 'test');
-- Test with a trigger returning NULL
CREATE FUNCTION trig_null() RETURNS TRIGGER AS $$
  BEGIN
    RETURN NULL;
  END
$$ language plpgsql;
/
CREATE TRIGGER trig_null
BEFORE INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_null();
-- Nothing should have changed.
INSERT INTO rem1 VALUES (2, 'test2');
SELECT * from loc1;
 f1 |  f2  
----+------
  1 | test
(1 row)

UPDATE rem1 SET f2 = 'test2';
SELECT * from loc1;
 f1 |  f2  
----+------
  1 | test
(1 row)

DELETE from rem1;
SELECT * from loc1;
 f1 |  f2  
----+------
  1 | test
(1 row)

DROP TRIGGER trig_null ON rem1;
DELETE from rem1;
-- Test a combination of local and remote triggers
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_local_before BEFORE INSERT OR UPDATE ON loc1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
INSERT INTO rem1(f2) VALUES ('test');
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1
NOTICE:  NEW: (12,test)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1
NOTICE:  NEW: (12,"test triggered !")
UPDATE rem1 SET f2 = 'testo';
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON rem1
NOTICE:  OLD: (12,"test triggered !"),NEW: (12,testo)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON rem1
NOTICE:  OLD: (12,"test triggered !"),NEW: (12,"testo triggered !")
-- Test returning a system attribute
INSERT INTO rem1(f2) VALUES ('test') RETURNING ctid;
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem1
NOTICE:  NEW: (13,test)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem1
NOTICE:  NEW: (13,"test triggered !")
  ctid  
--------
 (0,25)
(1 row)

-- cleanup
DROP TRIGGER trig_row_before ON rem1;
DROP TRIGGER trig_row_after ON rem1;
DROP TRIGGER trig_local_before ON loc1;
-- Test direct foreign table modification functionality
EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN                  
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1 WHERE false;     -- currently can't be pushed down
                      QUERY PLAN                       
-------------------------------------------------------
 Delete on public.rem1
   Remote SQL: DELETE FROM public.loc1 WHERE ctid = $1
   ->  Result
         Output: ctid
         One-Time Filter: false
(5 rows)

SET ivorysql.enable_emptystring_to_null to off;
-- Test with statement-level triggers
CREATE TRIGGER trig_stmt_before
	BEFORE DELETE OR INSERT OR UPDATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::varchar2(1024)
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN                  
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_stmt_before ON rem1;
CREATE TRIGGER trig_stmt_after
	AFTER DELETE OR INSERT OR UPDATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::varchar2(1024)
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN                  
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_stmt_after ON rem1;
-- Test with row-level ON INSERT triggers
CREATE TRIGGER trig_row_before_insert
BEFORE INSERT ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::varchar2(1024)
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN                  
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_row_before_insert ON rem1;
CREATE TRIGGER trig_row_after_insert
AFTER INSERT ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::varchar2(1024)
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN                  
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_row_after_insert ON rem1;
-- Test with row-level ON UPDATE triggers
CREATE TRIGGER trig_row_before_update
BEFORE UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can't be pushed down
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Update on public.rem1
   Remote SQL: UPDATE public.loc1 SET f1 = $2, f2 = $3 WHERE ctid = $1
   ->  Foreign Scan on public.rem1
         Output: ''::varchar2(1024), ctid, rem1.*
         Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
(5 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN                  
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_row_before_update ON rem1;
CREATE TRIGGER trig_row_after_update
AFTER UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can't be pushed down
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Update on public.rem1
   Remote SQL: UPDATE public.loc1 SET f2 = $2 WHERE ctid = $1 RETURNING f1, f2
   ->  Foreign Scan on public.rem1
         Output: ''::varchar2(1024), ctid, rem1.*
         Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
(5 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can be pushed down
                 QUERY PLAN                  
---------------------------------------------
 Delete on public.rem1
   ->  Foreign Delete on public.rem1
         Remote SQL: DELETE FROM public.loc1
(3 rows)

DROP TRIGGER trig_row_after_update ON rem1;
-- Test with row-level ON DELETE triggers
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::varchar2(1024)
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can't be pushed down
                             QUERY PLAN                              
---------------------------------------------------------------------
 Delete on public.rem1
   Remote SQL: DELETE FROM public.loc1 WHERE ctid = $1
   ->  Foreign Scan on public.rem1
         Output: ctid, rem1.*
         Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
(5 rows)

DROP TRIGGER trig_row_before_delete ON rem1;
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
EXPLAIN (verbose, costs off)
UPDATE rem1 set f2 = '';          -- can be pushed down
                             QUERY PLAN                             
--------------------------------------------------------------------
 Update on public.rem1
   ->  Foreign Update on public.rem1
         Remote SQL: UPDATE public.loc1 SET f2 = ''::varchar2(1024)
(3 rows)

EXPLAIN (verbose, costs off)
DELETE FROM rem1;                 -- can't be pushed down
                               QUERY PLAN                               
------------------------------------------------------------------------
 Delete on public.rem1
   Remote SQL: DELETE FROM public.loc1 WHERE ctid = $1 RETURNING f1, f2
   ->  Foreign Scan on public.rem1
         Output: ctid, rem1.*
         Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
(5 rows)

DROP TRIGGER trig_row_after_delete ON rem1;
-- ===================================================================
-- test inheritance features
-- ===================================================================
CREATE TABLE a (aa varchar2(1024));
CREATE TABLE loct (aa varchar2(1024), bb varchar2(1024));
ALTER TABLE a SET (autovacuum_enabled = 'false');
ALTER TABLE loct SET (autovacuum_enabled = 'false');
CREATE FOREIGN TABLE b (bb varchar2(1024)) INHERITS (a)
  SERVER loopback OPTIONS (table_name 'loct');
INSERT INTO a(aa) VALUES('aaa');
INSERT INTO a(aa) VALUES('aaaa');
INSERT INTO a(aa) VALUES('aaaaa');
INSERT INTO b(aa) VALUES('bbb');
INSERT INTO b(aa) VALUES('bbbb');
INSERT INTO b(aa) VALUES('bbbbb');
SELECT tableoid::regclass, * FROM a;
 tableoid |  aa   
----------+-------
 a        | aaa
 a        | aaaa
 a        | aaaaa
 b        | bbb
 b        | bbbb
 b        | bbbbb
(6 rows)

SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb 
----------+-------+----
 b        | bbb   | 
 b        | bbbb  | 
 b        | bbbbb | 
(3 rows)

SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |  aa   
----------+-------
 a        | aaa
 a        | aaaa
 a        | aaaaa
(3 rows)

UPDATE a SET aa = 'zzzzzz' WHERE aa LIKE 'aaaa%';
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
 b        | bbb
 b        | bbbb
 b        | bbbbb
(6 rows)

SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb 
----------+-------+----
 b        | bbb   | 
 b        | bbbb  | 
 b        | bbbbb | 
(3 rows)

SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

UPDATE b SET aa = 'new';
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
 b        | new
 b        | new
 b        | new
(6 rows)

SELECT tableoid::regclass, * FROM b;
 tableoid | aa  | bb 
----------+-----+----
 b        | new | 
 b        | new | 
 b        | new | 
(3 rows)

SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | aaa
 a        | zzzzzz
 a        | zzzzzz
(3 rows)

UPDATE a SET aa = 'newtoo';
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   
----------+--------
 a        | newtoo
 a        | newtoo
 a        | newtoo
 b        | newtoo
 b        | newtoo
 b        | newtoo
(6 rows)

SELECT tableoid::regclass, * FROM b;
 tableoid |   aa   | bb 
----------+--------+----
 b        | newtoo | 
 b        | newtoo | 
 b        | newtoo | 
(3 rows)

SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   
----------+--------
 a        | newtoo
 a        | newtoo
 a        | newtoo
(3 rows)

DELETE FROM a;
SELECT tableoid::regclass, * FROM a;
 tableoid | aa 
----------+----
(0 rows)

SELECT tableoid::regclass, * FROM b;
 tableoid | aa | bb 
----------+----+----
(0 rows)

SELECT tableoid::regclass, * FROM ONLY a;
 tableoid | aa 
----------+----
(0 rows)

DROP TABLE a CASCADE;
NOTICE:  drop cascades to foreign table b
DROP TABLE loct;
-- Check SELECT FOR UPDATE/SHARE with an inherited source table
create table loct1 (f1 number(38,0), f2 number(38,0), f3 number(38,0));
create table loct2 (f1 number(38,0), f2 number(38,0), f3 number(38,0));
alter table loct1 set (autovacuum_enabled = 'false');
alter table loct2 set (autovacuum_enabled = 'false');
create table foo (f1 number(38,0), f2 number(38,0));
create foreign table foo2 (f3 number(38,0)) inherits (foo)
  server loopback options (table_name 'loct1');
create table bar (f1 number(38,0), f2 number(38,0));
create foreign table bar2 (f3 number(38,0)) inherits (bar)
  server loopback options (table_name 'loct2');
alter table foo set (autovacuum_enabled = 'false');
alter table bar set (autovacuum_enabled = 'false');
insert into foo values(1,1);
insert into foo values(3,3);
insert into foo2 values(2,2,2);
insert into foo2 values(4,4,4);
insert into bar values(1,11);
insert into bar values(2,22);
insert into bar values(6,66);
insert into bar2 values(3,33,33);
insert into bar2 values(4,44,44);
insert into bar2 values(7,77,77);
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo) for update;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2 bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR UPDATE
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  HashAggregate
                     Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                     Group Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                           ->  Foreign Scan on public.foo2 foo_2
                                 Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                 Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
(23 rows)

select * from bar where f1 in (select f1 from foo) for update;
 f1 | f2 
----+----
 1  | 11
 2  | 22
 3  | 33
 4  | 44
(4 rows)

explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo) for share;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo.ctid, bar.*, bar.tableoid, foo.*, foo.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2 bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR SHARE
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  HashAggregate
                     Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                     Group Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                           ->  Foreign Scan on public.foo2 foo_2
                                 Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                 Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
(23 rows)

select * from bar where f1 in (select f1 from foo) for share;
 f1 | f2 
----+----
 1  | 11
 2  | 22
 3  | 33
 4  | 44
(4 rows)

-- Now check SELECT FOR UPDATE/SHARE with an inherited source table,
-- where the parent is itself a foreign table
create table loct4 (f1 number(38,0), f2 number(38,0), f3 number(38,0));
create foreign table foo2child (f3 number(38,0)) inherits (foo2)
  server loopback options (table_name 'loct4');
NOTICE:  moving and merging column "f3" with inherited definition
DETAIL:  User-specified column moved to the position of the inherited column.
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo2) for share;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo2.*, bar.*, bar.tableoid, foo2.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo2.*, bar.*, bar.tableoid, foo2.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo2.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2 bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR SHARE
         ->  Hash
               Output: foo2.*, foo2.f1, foo2.tableoid
               ->  HashAggregate
                     Output: foo2.*, foo2.f1, foo2.tableoid
                     Group Key: foo2.f1
                     ->  Append
                           ->  Foreign Scan on public.foo2 foo2_1
                                 Output: foo2_1.*, foo2_1.f1, foo2_1.tableoid
                                 Remote SQL: SELECT f1, f2, f3 FROM public.loct1
                           ->  Foreign Scan on public.foo2child foo2_2
                                 Output: foo2_2.*, foo2_2.f1, foo2_2.tableoid
                                 Remote SQL: SELECT f1, f2, f3 FROM public.loct4
(24 rows)

select * from bar where f1 in (select f1 from foo2) for share;
 f1 | f2 
----+----
 2  | 22
 4  | 44
(2 rows)

drop foreign table foo2child;
-- And with a local child relation of the foreign table parent
create table foo2child (f3 number(38,0)) inherits (foo2);
NOTICE:  moving and merging column "f3" with inherited definition
DETAIL:  User-specified column moved to the position of the inherited column.
explain (verbose, costs off)
select * from bar where f1 in (select f1 from foo2) for share;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 LockRows
   Output: bar.f1, bar.f2, bar.ctid, foo2.*, bar.*, bar.tableoid, foo2.ctid, foo2.tableoid
   ->  Hash Join
         Output: bar.f1, bar.f2, bar.ctid, foo2.*, bar.*, bar.tableoid, foo2.ctid, foo2.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo2.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f1, bar_1.f2, bar_1.ctid, bar_1.*, bar_1.tableoid
               ->  Foreign Scan on public.bar2 bar_2
                     Output: bar_2.f1, bar_2.f2, bar_2.ctid, bar_2.*, bar_2.tableoid
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR SHARE
         ->  Hash
               Output: foo2.*, foo2.f1, foo2.ctid, foo2.tableoid
               ->  HashAggregate
                     Output: foo2.*, foo2.f1, foo2.ctid, foo2.tableoid
                     Group Key: foo2.f1
                     ->  Append
                           ->  Foreign Scan on public.foo2 foo2_1
                                 Output: foo2_1.*, foo2_1.f1, foo2_1.ctid, foo2_1.tableoid
                                 Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
                           ->  Seq Scan on public.foo2child foo2_2
                                 Output: foo2_2.*, foo2_2.f1, foo2_2.ctid, foo2_2.tableoid
(23 rows)

select * from bar where f1 in (select f1 from foo2) for share;
 f1 | f2 
----+----
 2  | 22
 4  | 44
(2 rows)

drop table foo2child;
-- Check UPDATE with inherited target and an inherited source table
explain (verbose, costs off)
update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar bar_1
   Foreign Update on public.bar2 bar_2
     Remote SQL: UPDATE public.loct2 SET f2 = $2 WHERE ctid = $1
   ->  Hash Join
         Output: (bar.f2 + '100'::number), foo.ctid, bar.tableoid, bar.ctid, (NULL::record), foo.*, foo.tableoid
         Inner Unique: true
         Hash Cond: (bar.f1 = foo.f1)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f2, bar_1.f1, bar_1.tableoid, bar_1.ctid, NULL::record
               ->  Foreign Scan on public.bar2 bar_2
                     Output: bar_2.f2, bar_2.f1, bar_2.tableoid, bar_2.ctid, bar_2.*
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR UPDATE
         ->  Hash
               Output: foo.ctid, foo.f1, foo.*, foo.tableoid
               ->  HashAggregate
                     Output: foo.ctid, foo.f1, foo.*, foo.tableoid
                     Group Key: foo.f1
                     ->  Append
                           ->  Seq Scan on public.foo foo_1
                                 Output: foo_1.ctid, foo_1.f1, foo_1.*, foo_1.tableoid
                           ->  Foreign Scan on public.foo2 foo_2
                                 Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                 Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
(25 rows)

update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
select tableoid::regclass, * from bar order by 1,2;
 tableoid | f1 | f2  
----------+----+-----
 bar      | 1  | 111
 bar      | 2  | 122
 bar      | 6  | 66
 bar2     | 3  | 133
 bar2     | 4  | 144
 bar2     | 7  | 77
(6 rows)

-- Check UPDATE with inherited target and an appendrel subquery
explain (verbose, costs off)
update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar bar_1
   Foreign Update on public.bar2 bar_2
     Remote SQL: UPDATE public.loct2 SET f2 = $2 WHERE ctid = $1
   ->  Hash Join
         Output: (bar.f2 + '100'::number), (ROW(foo.f1)), bar.tableoid, bar.ctid, (NULL::record)
         Hash Cond: (foo.f1 = bar.f1)
         ->  Append
               ->  Seq Scan on public.foo
                     Output: ROW(foo.f1), foo.f1
               ->  Foreign Scan on public.foo2 foo_1
                     Output: ROW(foo_1.f1), foo_1.f1
                     Remote SQL: SELECT f1 FROM public.loct1
               ->  Seq Scan on public.foo foo_2
                     Output: ROW((foo_2.f1 + '3'::number)), (foo_2.f1 + '3'::number)
               ->  Foreign Scan on public.foo2 foo_3
                     Output: ROW((foo_3.f1 + '3'::number)), (foo_3.f1 + '3'::number)
                     Remote SQL: SELECT f1 FROM public.loct1
         ->  Hash
               Output: bar.f2, bar.f1, bar.tableoid, bar.ctid, (NULL::record)
               ->  Append
                     ->  Seq Scan on public.bar bar_1
                           Output: bar_1.f2, bar_1.f1, bar_1.tableoid, bar_1.ctid, NULL::record
                     ->  Foreign Scan on public.bar2 bar_2
                           Output: bar_2.f2, bar_2.f1, bar_2.tableoid, bar_2.ctid, bar_2.*
                           Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR UPDATE
(26 rows)

update bar set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar.f1 = ss.f1;
select tableoid::regclass, * from bar order by 1,2;
 tableoid | f1 | f2  
----------+----+-----
 bar      | 1  | 211
 bar      | 2  | 222
 bar      | 6  | 166
 bar2     | 3  | 233
 bar2     | 4  | 244
 bar2     | 7  | 177
(6 rows)

-- Test forcing the remote server to produce sorted data for a merge join,
-- but the foreign table is an inheritance child.
truncate table loct1;
truncate table only foo;
\set num_rows_foo 2000
insert into loct1 select generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2);
insert into foo select generate_series(1, :num_rows_foo, 2), generate_series(1, :num_rows_foo, 2);
SET enable_hashjoin to false;
SET enable_nestloop to false;
alter foreign table foo2 options (use_remote_estimate 'true');
create index i_loct1_f1 on loct1(f1);
create index i_foo_f1 on foo(f1);
analyze foo;
analyze loct1;
-- inner join; expressions in the clauses appear in the equivalence class list
explain (verbose, costs off)
	select foo.f1, loct1.f1 from foo join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: foo.f1, loct1.f1, foo.f2
   ->  Sort
         Output: foo.f1, loct1.f1, foo.f2
         Sort Key: foo.f2
         ->  Merge Join
               Output: foo.f1, loct1.f1, foo.f2
               Merge Cond: (foo.f1 = loct1.f1)
               ->  Merge Append
                     Sort Key: foo.f1
                     ->  Index Scan using i_foo_f1 on public.foo foo_1
                           Output: foo_1.f1, foo_1.f2
                     ->  Sort
                           Output: foo_2.f1, foo_2.f2
                           Sort Key: foo_2.f1
                           ->  Foreign Scan on public.foo2 foo_2
                                 Output: foo_2.f1, foo_2.f2
                                 Remote SQL: SELECT f1, f2 FROM public.loct1
               ->  Index Only Scan using i_loct1_f1 on public.loct1
                     Output: loct1.f1
(20 rows)

select foo.f1, loct1.f1 from foo join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
 f1 | f1 
----+----
 20 | 20
 22 | 22
 24 | 24
 26 | 26
 28 | 28
 30 | 30
 32 | 32
 34 | 34
 36 | 36
 38 | 38
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
explain (verbose, costs off)
	select foo.f1, loct1.f1 from foo left join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: foo.f1, loct1.f1, foo.f2
   ->  Sort
         Output: foo.f1, loct1.f1, foo.f2
         Sort Key: foo.f2
         ->  Merge Left Join
               Output: foo.f1, loct1.f1, foo.f2
               Merge Cond: (foo.f1 = loct1.f1)
               ->  Merge Append
                     Sort Key: foo.f1
                     ->  Index Scan using i_foo_f1 on public.foo foo_1
                           Output: foo_1.f1, foo_1.f2
                     ->  Sort
                           Output: foo_2.f1, foo_2.f2
                           Sort Key: foo_2.f1
                           ->  Foreign Scan on public.foo2 foo_2
                                 Output: foo_2.f1, foo_2.f2
                                 Remote SQL: SELECT f1, f2 FROM public.loct1
               ->  Index Only Scan using i_loct1_f1 on public.loct1
                     Output: loct1.f1
(20 rows)

select foo.f1, loct1.f1 from foo left join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
 f1 | f1 
----+----
 10 | 10
 11 | 
 12 | 12
 13 | 
 14 | 14
 15 | 
 16 | 16
 17 | 
 18 | 18
 19 | 
(10 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
-- Test that WHERE CURRENT OF is not supported
begin;
declare c cursor for select * from bar where f1 = 7;
fetch from c;
 f1 | f2  
----+-----
 7  | 177
(1 row)

update bar set f2 = null where current of c;
ERROR:  WHERE CURRENT OF is not supported for this table type
rollback;
explain (verbose, costs off)
delete from foo where f1 < 5 returning *;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Delete on public.foo
   Output: foo_1.f1, foo_1.f2
   Delete on public.foo foo_1
   Foreign Delete on public.foo2 foo_2
     Remote SQL: DELETE FROM public.loct1 WHERE ctid = $1 RETURNING f1, f2
   ->  Append
         ->  Index Scan using i_foo_f1 on public.foo foo_1
               Output: foo_1.tableoid, foo_1.ctid
               Index Cond: (foo_1.f1 < '5'::number)
         ->  Foreign Scan on public.foo2 foo_2
               Output: foo_2.tableoid, foo_2.ctid
               Filter: (foo_2.f1 < '5'::number)
               Remote SQL: SELECT f1, ctid FROM public.loct1 FOR UPDATE
(13 rows)

delete from foo where f1 < 5 returning *;
 f1 | f2 
----+----
 1  | 1
 3  | 3
 0  | 0
 2  | 2
 4  | 4
(5 rows)

explain (verbose, costs off)
update bar set f2 = f2 + 100 returning *;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Update on public.bar
   Output: bar_1.f1, bar_1.f2
   Update on public.bar bar_1
   Foreign Update on public.bar2 bar_2
     Remote SQL: UPDATE public.loct2 SET f2 = $2 WHERE ctid = $1 RETURNING f1, f2
   ->  Result
         Output: (bar.f2 + '100'::number), bar.tableoid, bar.ctid, (NULL::record)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f2, bar_1.tableoid, bar_1.ctid, NULL::record
               ->  Foreign Scan on public.bar2 bar_2
                     Output: bar_2.f2, bar_2.tableoid, bar_2.ctid, bar_2.*
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR UPDATE
(13 rows)

update bar set f2 = f2 + 100 returning *;
 f1 | f2  
----+-----
 1  | 311
 2  | 322
 6  | 266
 3  | 333
 4  | 344
 7  | 277
(6 rows)

-- Test that UPDATE/DELETE with inherited target works with row-level triggers
CREATE TRIGGER trig_row_before
BEFORE UPDATE OR DELETE ON bar2
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after
AFTER UPDATE OR DELETE ON bar2
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
explain (verbose, costs off)
update bar set f2 = f2 + 100;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Update on public.bar
   Update on public.bar bar_1
   Foreign Update on public.bar2 bar_2
     Remote SQL: UPDATE public.loct2 SET f1 = $2, f2 = $3, f3 = $4 WHERE ctid = $1 RETURNING f1, f2, f3
   ->  Result
         Output: (bar.f2 + '100'::number), bar.tableoid, bar.ctid, (NULL::record)
         ->  Append
               ->  Seq Scan on public.bar bar_1
                     Output: bar_1.f2, bar_1.tableoid, bar_1.ctid, NULL::record
               ->  Foreign Scan on public.bar2 bar_2
                     Output: bar_2.f2, bar_2.tableoid, bar_2.ctid, bar_2.*
                     Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR UPDATE
(12 rows)

update bar set f2 = f2 + 100;
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON bar2
NOTICE:  OLD: (3,333,33),NEW: (3,433,33)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON bar2
NOTICE:  OLD: (4,344,44),NEW: (4,444,44)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON bar2
NOTICE:  OLD: (7,277,77),NEW: (7,377,77)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON bar2
NOTICE:  OLD: (3,333,33),NEW: (3,433,33)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON bar2
NOTICE:  OLD: (4,344,44),NEW: (4,444,44)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW UPDATE ON bar2
NOTICE:  OLD: (7,277,77),NEW: (7,377,77)
explain (verbose, costs off)
delete from bar where f2 < 400;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Delete on public.bar
   Delete on public.bar bar_1
   Foreign Delete on public.bar2 bar_2
     Remote SQL: DELETE FROM public.loct2 WHERE ctid = $1 RETURNING f1, f2, f3
   ->  Append
         ->  Seq Scan on public.bar bar_1
               Output: bar_1.tableoid, bar_1.ctid, NULL::record
               Filter: (bar_1.f2 < '400'::number)
         ->  Foreign Scan on public.bar2 bar_2
               Output: bar_2.tableoid, bar_2.ctid, bar_2.*
               Filter: (bar_2.f2 < '400'::number)
               Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR UPDATE
(12 rows)

delete from bar where f2 < 400;
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON bar2
NOTICE:  OLD: (7,377,77)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW DELETE ON bar2
NOTICE:  OLD: (7,377,77)
-- cleanup
drop table foo cascade;
NOTICE:  drop cascades to foreign table foo2
drop table bar cascade;
NOTICE:  drop cascades to foreign table bar2
drop table loct1;
drop table loct2;
-- Test pushing down UPDATE/DELETE joins to the remote server
create table parent (a number(38,0), b varchar2(1024 byte));
create table loct1 (a number(38,0), b varchar2(1024 byte));
create table loct2 (a number(38,0), b varchar2(1024 byte));
create foreign table remt1 (a number(38,0), b varchar2(1024 byte))
  server loopback options (table_name 'loct1');
create foreign table remt2 (a number(38,0), b varchar2(1024 byte))
  server loopback options (table_name 'loct2');
alter foreign table remt1 inherit parent;
insert into remt1 values (1, 'foo');
insert into remt1 values (2, 'bar');
insert into remt2 values (1, 'foo');
insert into remt2 values (2, 'bar');
analyze remt1;
analyze remt2;
explain (verbose, costs off)
update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Update on public.parent
   Output: parent_1.a, parent_1.b, remt2.a, remt2.b
   Update on public.parent parent_1
   Foreign Update on public.remt1 parent_2
     Remote SQL: UPDATE public.loct1 SET b = $2 WHERE ctid = $1 RETURNING a, b
   ->  Nested Loop
         Output: ((parent.b)::text || (remt2.b)::text), remt2.*, remt2.a, remt2.b, parent.tableoid, parent.ctid, (NULL::record)
         Join Filter: (parent.a = remt2.a)
         ->  Append
               ->  Seq Scan on public.parent parent_1
                     Output: parent_1.b, parent_1.a, parent_1.tableoid, parent_1.ctid, NULL::record
               ->  Foreign Scan on public.remt1 parent_2
                     Output: parent_2.b, parent_2.a, parent_2.tableoid, parent_2.ctid, parent_2.*
                     Remote SQL: SELECT a, b, ctid FROM public.loct1 FOR UPDATE
         ->  Materialize
               Output: remt2.b, remt2.*, remt2.a
               ->  Foreign Scan on public.remt2
                     Output: remt2.b, remt2.*, remt2.a
                     Remote SQL: SELECT a, b FROM public.loct2
(19 rows)

update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
 a |   b    | a |  b  
---+--------+---+-----
 1 | foofoo | 1 | foo
 2 | barbar | 2 | bar
(2 rows)

explain (verbose, costs off)
delete from parent using remt2 where parent.a = remt2.a returning parent;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Delete on public.parent
   Output: parent_1.*
   Delete on public.parent parent_1
   Foreign Delete on public.remt1 parent_2
     Remote SQL: DELETE FROM public.loct1 WHERE ctid = $1 RETURNING a, b
   ->  Nested Loop
         Output: remt2.*, parent.tableoid, parent.ctid
         Join Filter: (parent.a = remt2.a)
         ->  Append
               ->  Seq Scan on public.parent parent_1
                     Output: parent_1.a, parent_1.tableoid, parent_1.ctid
               ->  Foreign Scan on public.remt1 parent_2
                     Output: parent_2.a, parent_2.tableoid, parent_2.ctid
                     Remote SQL: SELECT a, ctid FROM public.loct1 FOR UPDATE
         ->  Materialize
               Output: remt2.*, remt2.a
               ->  Foreign Scan on public.remt2
                     Output: remt2.*, remt2.a
                     Remote SQL: SELECT a, b FROM public.loct2
(19 rows)

delete from parent using remt2 where parent.a = remt2.a returning parent;
   parent   
------------
 (1,foofoo)
 (2,barbar)
(2 rows)

-- cleanup
drop foreign table remt1;
drop foreign table remt2;
drop table loct1;
drop table loct2;
drop table parent;
create table parent (a number(38,0), b varchar2(1024 char));
create table loct1 (a number(38,0), b varchar2(1024 char));
create table loct2 (a number(38,0), b varchar2(1024 char));
create foreign table remt1 (a number(38,0), b varchar2(1024 char))
  server loopback options (table_name 'loct1');
create foreign table remt2 (a number(38,0), b varchar2(1024 char))
  server loopback options (table_name 'loct2');
alter foreign table remt1 inherit parent;
insert into remt1 values (1, 'foo');
insert into remt1 values (2, 'bar');
insert into remt2 values (1, 'foo');
insert into remt2 values (2, 'bar');
analyze remt1;
analyze remt2;
explain (verbose, costs off)
update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Update on public.parent
   Output: parent_1.a, parent_1.b, remt2.a, remt2.b
   Update on public.parent parent_1
   Foreign Update on public.remt1 parent_2
     Remote SQL: UPDATE public.loct1 SET b = $2 WHERE ctid = $1 RETURNING a, b
   ->  Nested Loop
         Output: (parent.b || remt2.b), remt2.*, remt2.a, remt2.b, parent.tableoid, parent.ctid, (NULL::record)
         Join Filter: (parent.a = remt2.a)
         ->  Append
               ->  Seq Scan on public.parent parent_1
                     Output: parent_1.b, parent_1.a, parent_1.tableoid, parent_1.ctid, NULL::record
               ->  Foreign Scan on public.remt1 parent_2
                     Output: parent_2.b, parent_2.a, parent_2.tableoid, parent_2.ctid, parent_2.*
                     Remote SQL: SELECT a, b, ctid FROM public.loct1 FOR UPDATE
         ->  Materialize
               Output: remt2.b, remt2.*, remt2.a
               ->  Foreign Scan on public.remt2
                     Output: remt2.b, remt2.*, remt2.a
                     Remote SQL: SELECT a, b FROM public.loct2
(19 rows)

update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
 a |   b    | a |  b  
---+--------+---+-----
 1 | foofoo | 1 | foo
 2 | barbar | 2 | bar
(2 rows)

explain (verbose, costs off)
delete from parent using remt2 where parent.a = remt2.a returning parent;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Delete on public.parent
   Output: parent_1.*
   Delete on public.parent parent_1
   Foreign Delete on public.remt1 parent_2
     Remote SQL: DELETE FROM public.loct1 WHERE ctid = $1 RETURNING a, b
   ->  Nested Loop
         Output: remt2.*, parent.tableoid, parent.ctid
         Join Filter: (parent.a = remt2.a)
         ->  Append
               ->  Seq Scan on public.parent parent_1
                     Output: parent_1.a, parent_1.tableoid, parent_1.ctid
               ->  Foreign Scan on public.remt1 parent_2
                     Output: parent_2.a, parent_2.tableoid, parent_2.ctid
                     Remote SQL: SELECT a, ctid FROM public.loct1 FOR UPDATE
         ->  Materialize
               Output: remt2.*, remt2.a
               ->  Foreign Scan on public.remt2
                     Output: remt2.*, remt2.a
                     Remote SQL: SELECT a, b FROM public.loct2
(19 rows)

delete from parent using remt2 where parent.a = remt2.a returning parent;
   parent   
------------
 (1,foofoo)
 (2,barbar)
(2 rows)

-- cleanup
drop foreign table remt1;
drop foreign table remt2;
drop table loct1;
drop table loct2;
drop table parent;
-- ===================================================================
-- test tuple routing for foreign-table partitions
-- ===================================================================
-- Test insert tuple routing
create table itrtest (a number(38,0), b varchar2(1024)) partition by list (a);
create table loct1 (a number(38,0) check (a in (1)), b varchar2(1024));
create foreign table remp1 (a number(38,0) check (a in (1)), b varchar2(1024)) server loopback options (table_name 'loct1');
create table loct2 (a number(38,0) check (a in (2)), b varchar2(1024));
create foreign table remp2 (b varchar2(1024), a number(38,0) check (a in (2))) server loopback options (table_name 'loct2');
alter table itrtest attach partition remp1 for values in (1);
alter table itrtest attach partition remp2 for values in (2);
insert into itrtest values (1, 'foo');
insert into itrtest values (1, 'bar') returning *;
 a |  b  
---+-----
 1 | bar
(1 row)

insert into itrtest values (2, 'baz');
insert into itrtest values (2, 'qux') returning *;
 a |  b  
---+-----
 2 | qux
(1 row)

insert into itrtest values (1, 'test1'), (2, 'test2') returning *;
 a |   b   
---+-------
 1 | test1
 2 | test2
(2 rows)

select tableoid::regclass, * FROM itrtest;
 tableoid | a |   b   
----------+---+-------
 remp1    | 1 | foo
 remp1    | 1 | bar
 remp1    | 1 | test1
 remp2    | 2 | baz
 remp2    | 2 | qux
 remp2    | 2 | test2
(6 rows)

select tableoid::regclass, * FROM remp1;
 tableoid | a |   b   
----------+---+-------
 remp1    | 1 | foo
 remp1    | 1 | bar
 remp1    | 1 | test1
(3 rows)

select tableoid::regclass, * FROM remp2;
 tableoid |   b   | a 
----------+-------+---
 remp2    | baz   | 2
 remp2    | qux   | 2
 remp2    | test2 | 2
(3 rows)

delete from itrtest;
-- MERGE ought to fail cleanly
create unique index loct1_idx on loct1 (a);
-- DO NOTHING without an inference specification is supported
insert into itrtest values (1, 'foo') on conflict do nothing returning *;
 a |  b  
---+-----
 1 | foo
(1 row)

insert into itrtest values (1, 'foo') on conflict do nothing returning *;
 a | b 
---+---
(0 rows)

-- But other cases are not supported
insert into itrtest values (1, 'bar') on conflict (a) do nothing;
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
insert into itrtest values (1, 'bar') on conflict (a) do update set b = excluded.b;
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
select tableoid::regclass, * FROM itrtest;
 tableoid | a |  b  
----------+---+-----
 remp1    | 1 | foo
(1 row)

delete from itrtest;
drop index loct1_idx;
-- Test that remote triggers work with insert tuple routing
create function br_insert_trigfunc() returns trigger as $$
begin
	new.b := new.b || ' triggered !';
	return new;
end
$$ language plpgsql;
/
create trigger loct1_br_insert_trigger before insert on loct1
	for each row execute procedure br_insert_trigfunc();
create trigger loct2_br_insert_trigger before insert on loct2
	for each row execute procedure br_insert_trigfunc();
-- The new values are concatenated with ' triggered !'
insert into itrtest values (1, 'foo') returning *;
 a |        b        
---+-----------------
 1 | foo triggered !
(1 row)

insert into itrtest values (2, 'qux') returning *;
 a |        b        
---+-----------------
 2 | qux triggered !
(1 row)

insert into itrtest values (1, 'test1'), (2, 'test2') returning *;
 a |         b         
---+-------------------
 1 | test1 triggered !
 2 | test2 triggered !
(2 rows)

with result as (insert into itrtest values (1, 'test1'), (2, 'test2') returning *) select * from result;
 a |         b         
---+-------------------
 1 | test1 triggered !
 2 | test2 triggered !
(2 rows)

drop trigger loct1_br_insert_trigger on loct1;
drop trigger loct2_br_insert_trigger on loct2;
drop table itrtest;
drop table loct1;
drop table loct2;
-- Test update tuple routing
create table utrtest (a number(38,0), b varchar2(1024)) partition by list (a);
create table loct (a number(38,0) check (a in (1)), b varchar2(1024));
create foreign table remp (a number(38,0) check (a in (1)), b varchar2(1024)) server loopback options (table_name 'loct');
create table locp (a number(38,0) check (a in (2)), b varchar2(1024));
alter table utrtest attach partition remp for values in (1);
alter table utrtest attach partition locp for values in (2);
insert into utrtest values (1, 'foo');
insert into utrtest values (2, 'qux');
select tableoid::regclass, * FROM utrtest;
 tableoid | a |  b  
----------+---+-----
 remp     | 1 | foo
 locp     | 2 | qux
(2 rows)

select tableoid::regclass, * FROM remp;
 tableoid | a |  b  
----------+---+-----
 remp     | 1 | foo
(1 row)

select tableoid::regclass, * FROM locp;
 tableoid | a |  b  
----------+---+-----
 locp     | 2 | qux
(1 row)

-- It's not allowed to move a row from a partition that is foreign to another
update utrtest set a = 2 where b = 'foo' returning *;
ERROR:  new row for relation "loct" violates check constraint "loct_a_check"
DETAIL:  Failing row contains (2, foo).
CONTEXT:  remote SQL command: UPDATE public.loct SET a = $2 WHERE ctid = $1 RETURNING a, b
-- But the reverse is allowed
update utrtest set a = 1 where b = 'qux' returning *;
ERROR:  cannot route tuples into foreign table to be updated "remp"
select tableoid::regclass, * FROM utrtest;
 tableoid | a |  b  
----------+---+-----
 remp     | 1 | foo
 locp     | 2 | qux
(2 rows)

select tableoid::regclass, * FROM remp;
 tableoid | a |  b  
----------+---+-----
 remp     | 1 | foo
(1 row)

select tableoid::regclass, * FROM locp;
 tableoid | a |  b  
----------+---+-----
 locp     | 2 | qux
(1 row)

-- The executor should not let unexercised FDWs shut down
update utrtest set a = 1 where b = 'foo';
-- Test that remote triggers work with update tuple routing
create trigger loct_br_insert_trigger before insert on loct
	for each row execute procedure br_insert_trigfunc();
delete from utrtest;
insert into utrtest values (2, 'qux');
-- Check case where the foreign partition is a subplan target rel
explain (verbose, costs off)
update utrtest set a = 1 where a = 1 or a = 2 returning *;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Update on public.utrtest
   Output: utrtest_1.a, utrtest_1.b
   Foreign Update on public.remp utrtest_1
     Remote SQL: UPDATE public.loct SET a = $2 WHERE ctid = $1 RETURNING a, b
   Update on public.locp utrtest_2
   ->  Append
         ->  Foreign Scan on public.remp utrtest_1
               Output: '1'::number(38,0), utrtest_1.tableoid, utrtest_1.ctid, utrtest_1.*
               Filter: ((utrtest_1.a = '1'::number) OR (utrtest_1.a = '2'::number))
               Remote SQL: SELECT a, b, ctid FROM public.loct FOR UPDATE
         ->  Seq Scan on public.locp utrtest_2
               Output: '1'::number(38,0), utrtest_2.tableoid, utrtest_2.ctid, NULL::record
               Filter: ((utrtest_2.a = '1'::number) OR (utrtest_2.a = '2'::number))
(13 rows)

-- The new values are concatenated with ' triggered !'
update utrtest set a = 1 where a = 1 or a = 2 returning *;
ERROR:  cannot route tuples into foreign table to be updated "remp"
delete from utrtest;
insert into utrtest values (2, 'qux');
-- Check case where the foreign partition isn't a subplan target rel
explain (verbose, costs off)
update utrtest set a = 1 where a = 2 returning *;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Update on public.utrtest
   Output: utrtest_1.a, utrtest_1.b
   Update on public.locp utrtest_1
   ->  Seq Scan on public.locp utrtest_1
         Output: '1'::number(38,0), utrtest_1.tableoid, utrtest_1.ctid
         Filter: (utrtest_1.a = '2'::number)
(6 rows)

-- The new values are concatenated with ' triggered !'
update utrtest set a = 1 where a = 2 returning *;
 a |        b        
---+-----------------
 1 | qux triggered !
(1 row)

drop trigger loct_br_insert_trigger on loct;
-- We can move rows to a foreign partition that has been updated already,
-- but can't move rows to a foreign partition that hasn't been updated yet
delete from utrtest;
insert into utrtest values (1, 'foo');
insert into utrtest values (2, 'qux');
-- Test the former case:
-- with a direct modification plan
explain (verbose, costs off)
update utrtest set a = 1 returning *;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Update on public.utrtest
   Output: utrtest_1.a, utrtest_1.b
   Foreign Update on public.remp utrtest_1
   Update on public.locp utrtest_2
   ->  Append
         ->  Foreign Update on public.remp utrtest_1
               Remote SQL: UPDATE public.loct SET a = '1'::number(38,0) RETURNING a, b
         ->  Seq Scan on public.locp utrtest_2
               Output: '1'::number(38,0), utrtest_2.tableoid, utrtest_2.ctid, NULL::record
(9 rows)

update utrtest set a = 1 returning *;
ERROR:  cannot route tuples into foreign table to be updated "remp"
delete from utrtest;
insert into utrtest values (1, 'foo');
insert into utrtest values (2, 'qux');
-- with a non-direct modification plan
explain (verbose, costs off)
update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Update on public.utrtest
   Output: utrtest_1.a, utrtest_1.b, "*VALUES*".column1
   Foreign Update on public.remp utrtest_1
     Remote SQL: UPDATE public.loct SET a = $2 WHERE ctid = $1 RETURNING a, b
   Update on public.locp utrtest_2
   ->  Hash Join
         Output: '1'::number(38,0), "*VALUES*".*, "*VALUES*".column1, utrtest.tableoid, utrtest.ctid, utrtest.*
         Hash Cond: (utrtest.a = ("*VALUES*".column1)::number)
         ->  Append
               ->  Foreign Scan on public.remp utrtest_1
                     Output: utrtest_1.a, utrtest_1.tableoid, utrtest_1.ctid, utrtest_1.*
                     Remote SQL: SELECT a, b, ctid FROM public.loct FOR UPDATE
               ->  Seq Scan on public.locp utrtest_2
                     Output: utrtest_2.a, utrtest_2.tableoid, utrtest_2.ctid, NULL::record
         ->  Hash
               Output: "*VALUES*".*, "*VALUES*".column1
               ->  Values Scan on "*VALUES*"
                     Output: "*VALUES*".*, "*VALUES*".column1
(18 rows)

update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;
ERROR:  cannot route tuples into foreign table to be updated "remp"
-- Change the definition of utrtest so that the foreign partition get updated
-- after the local partition
delete from utrtest;
alter table utrtest detach partition remp;
drop foreign table remp;
alter table loct drop constraint loct_a_check;
alter table loct add check (a in (3));
create foreign table remp (a number(38,0) check (a in (3)), b varchar2(1024)) server loopback options (table_name 'loct');
alter table utrtest attach partition remp for values in (3);
insert into utrtest values (2, 'qux');
insert into utrtest values (3, 'xyzzy');
-- Test the latter case:
-- with a direct modification plan
explain (verbose, costs off)
update utrtest set a = 3 returning *;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Update on public.utrtest
   Output: utrtest_1.a, utrtest_1.b
   Update on public.locp utrtest_1
   Foreign Update on public.remp utrtest_2
   ->  Append
         ->  Seq Scan on public.locp utrtest_1
               Output: '3'::number(38,0), utrtest_1.tableoid, utrtest_1.ctid, NULL::record
         ->  Foreign Update on public.remp utrtest_2
               Remote SQL: UPDATE public.loct SET a = '3'::number(38,0) RETURNING a, b
(9 rows)

update utrtest set a = 3 returning *; -- ERROR
ERROR:  cannot route tuples into foreign table to be updated "remp"
-- with a non-direct modification plan
explain (verbose, costs off)
update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Update on public.utrtest
   Output: utrtest_1.a, utrtest_1.b, "*VALUES*".column1
   Update on public.locp utrtest_1
   Foreign Update on public.remp utrtest_2
     Remote SQL: UPDATE public.loct SET a = $2 WHERE ctid = $1 RETURNING a, b
   ->  Hash Join
         Output: '3'::number(38,0), "*VALUES*".*, "*VALUES*".column1, utrtest.tableoid, utrtest.ctid, (NULL::record)
         Hash Cond: (utrtest.a = ("*VALUES*".column1)::number)
         ->  Append
               ->  Seq Scan on public.locp utrtest_1
                     Output: utrtest_1.a, utrtest_1.tableoid, utrtest_1.ctid, NULL::record
               ->  Foreign Scan on public.remp utrtest_2
                     Output: utrtest_2.a, utrtest_2.tableoid, utrtest_2.ctid, utrtest_2.*
                     Remote SQL: SELECT a, b, ctid FROM public.loct FOR UPDATE
         ->  Hash
               Output: "*VALUES*".*, "*VALUES*".column1
               ->  Values Scan on "*VALUES*"
                     Output: "*VALUES*".*, "*VALUES*".column1
(18 rows)

update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *; -- ERROR
ERROR:  cannot route tuples into foreign table to be updated "remp"
drop table utrtest;
drop table loct;
-- Test copy tuple routing
create table ctrtest (a number(38,0), b varchar2(1024)) partition by list (a);
create table loct1 (a number(38,0) check (a in (1)), b varchar2(1024));
create foreign table remp1 (a number(38,0) check (a in (1)), b varchar2(1024)) server loopback options (table_name 'loct1');
create table loct2 (a number(38,0) check (a in (2)), b varchar2(1024));
create foreign table remp2 (b varchar2(1024), a number(38,0) check (a in (2))) server loopback options (table_name 'loct2');
alter table ctrtest attach partition remp1 for values in (1);
alter table ctrtest attach partition remp2 for values in (2);
copy ctrtest from stdin;
select tableoid::regclass, * FROM ctrtest;
 tableoid | a |  b  
----------+---+-----
 remp1    | 1 | foo
 remp2    | 2 | qux
(2 rows)

select tableoid::regclass, * FROM remp1;
 tableoid | a |  b  
----------+---+-----
 remp1    | 1 | foo
(1 row)

select tableoid::regclass, * FROM remp2;
 tableoid |  b  | a 
----------+-----+---
 remp2    | qux | 2
(1 row)

-- Copying into foreign partitions directly should work as well
copy remp1 from stdin;
select tableoid::regclass, * FROM remp1;
 tableoid | a |  b  
----------+---+-----
 remp1    | 1 | foo
 remp1    | 1 | bar
(2 rows)

delete from ctrtest;
-- Test copy tuple routing with the batch_size option enabled
alter server loopback options (add batch_size '2');
copy ctrtest from stdin;
select tableoid::regclass, * FROM ctrtest;
 tableoid | a |   b   
----------+---+-------
 remp1    | 1 | foo
 remp1    | 1 | bar
 remp1    | 1 | test1
 remp2    | 2 | baz
 remp2    | 2 | qux
 remp2    | 2 | test2
(6 rows)

select tableoid::regclass, * FROM remp1;
 tableoid | a |   b   
----------+---+-------
 remp1    | 1 | foo
 remp1    | 1 | bar
 remp1    | 1 | test1
(3 rows)

select tableoid::regclass, * FROM remp2;
 tableoid |   b   | a 
----------+-------+---
 remp2    | baz   | 2
 remp2    | qux   | 2
 remp2    | test2 | 2
(3 rows)

delete from ctrtest;
alter server loopback options (drop batch_size);
drop table ctrtest;
drop table loct1;
drop table loct2;
-- ===================================================================
-- test COPY FROM
-- ===================================================================
create table loc2 (f1 number(38,0), f2 varchar2(1024));
alter table loc2 set (autovacuum_enabled = 'false');
create foreign table rem2 (f1 number(38,0), f2 varchar2(1024)) server loopback options(table_name 'loc2');
-- Test basic functionality
copy rem2 from stdin;
select * from rem2;
 f1 | f2  
----+-----
 1  | foo
 2  | bar
(2 rows)

delete from rem2;
-- Test check constraints
alter table loc2 add constraint loc2_f1positive check (f1 >= 0);
alter foreign table rem2 add constraint rem2_f1positive check (f1 >= 0);
-- check constraint is enforced on the remote side, not locally
copy rem2 from stdin;
copy rem2 from stdin; -- ERROR
ERROR:  new row for relation "loc2" violates check constraint "loc2_f1positive"
DETAIL:  Failing row contains (-1, xyzzy).
CONTEXT:  remote SQL command: INSERT INTO public.loc2(f1, f2) VALUES ($1, $2)
COPY rem2, line 1: "-1	xyzzy"
select * from rem2;
 f1 | f2  
----+-----
 1  | foo
 2  | bar
(2 rows)

alter foreign table rem2 drop constraint rem2_f1positive;
alter table loc2 drop constraint loc2_f1positive;
delete from rem2;
-- Test local triggers
create trigger trig_stmt_before before insert on rem2
	for each statement execute procedure trigger_func();
create trigger trig_stmt_after after insert on rem2
	for each statement execute procedure trigger_func();
create trigger trig_row_before before insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger trig_row_after after insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
copy rem2 from stdin;
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = BEFORE, level = STATEMENT
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem2
NOTICE:  NEW: (1,foo)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem2
NOTICE:  NEW: (2,bar)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem2
NOTICE:  NEW: (1,foo)
NOTICE:  trig_row_after(23, skidoo) AFTER ROW INSERT ON rem2
NOTICE:  NEW: (2,bar)
NOTICE:  trigger_func(<NULL>) called: action = INSERT, when = AFTER, level = STATEMENT
select * from rem2;
 f1 | f2  
----+-----
 1  | foo
 2  | bar
(2 rows)

drop trigger trig_row_before on rem2;
drop trigger trig_row_after on rem2;
drop trigger trig_stmt_before on rem2;
drop trigger trig_stmt_after on rem2;
delete from rem2;
create trigger trig_row_before_insert before insert on rem2
	for each row execute procedure trig_row_before_insupdate();
-- The new values are concatenated with ' triggered !'
copy rem2 from stdin;
select * from rem2;
 f1 |       f2        
----+-----------------
 1  | foo triggered !
 2  | bar triggered !
(2 rows)

drop trigger trig_row_before_insert on rem2;
delete from rem2;
create trigger trig_null before insert on rem2
	for each row execute procedure trig_null();
-- Nothing happens
copy rem2 from stdin;
select * from rem2;
 f1 | f2 
----+----
(0 rows)

drop trigger trig_null on rem2;
delete from rem2;
-- Test remote triggers
create trigger trig_row_before_insert before insert on loc2
	for each row execute procedure trig_row_before_insupdate();
-- The new values are concatenated with ' triggered !'
copy rem2 from stdin;
select * from rem2;
 f1 |       f2        
----+-----------------
 1  | foo triggered !
 2  | bar triggered !
(2 rows)

drop trigger trig_row_before_insert on loc2;
delete from rem2;
create trigger trig_null before insert on loc2
	for each row execute procedure trig_null();
-- Nothing happens
copy rem2 from stdin;
select * from rem2;
 f1 | f2 
----+----
(0 rows)

drop trigger trig_null on loc2;
delete from rem2;
-- Test a combination of local and remote triggers
create trigger rem2_trig_row_before before insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger rem2_trig_row_after after insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger loc2_trig_row_before_insert before insert on loc2
	for each row execute procedure trig_row_before_insupdate();
copy rem2 from stdin;
NOTICE:  rem2_trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem2
NOTICE:  NEW: (1,foo)
NOTICE:  rem2_trig_row_before(23, skidoo) BEFORE ROW INSERT ON rem2
NOTICE:  NEW: (2,bar)
NOTICE:  rem2_trig_row_after(23, skidoo) AFTER ROW INSERT ON rem2
NOTICE:  NEW: (1,"foo triggered !")
NOTICE:  rem2_trig_row_after(23, skidoo) AFTER ROW INSERT ON rem2
NOTICE:  NEW: (2,"bar triggered !")
select * from rem2;
 f1 |       f2        
----+-----------------
 1  | foo triggered !
 2  | bar triggered !
(2 rows)

drop trigger rem2_trig_row_before on rem2;
drop trigger rem2_trig_row_after on rem2;
drop trigger loc2_trig_row_before_insert on loc2;
delete from rem2;
-- test COPY FROM with foreign table created in the same transaction
create table loc3 (f1 number(38,0), f2 varchar(1024));
begin;
create foreign table rem3 (f1 number(38,0), f2 varchar(1024))
	server loopback options(table_name 'loc3');
copy rem3 from stdin;
commit;
select * from rem3;
 f1 | f2  
----+-----
 1  | foo
 2  | bar
(2 rows)

drop foreign table rem3;
drop table loc3;
-- Test COPY FROM with the batch_size option enabled
alter server loopback options (add batch_size '2');
-- Test basic functionality
copy rem2 from stdin;
select * from rem2;
 f1 | f2  
----+-----
 1  | foo
 2  | bar
 3  | baz
(3 rows)

delete from rem2;
-- Test check constraints
alter table loc2 add constraint loc2_f1positive check (f1 >= 0);
alter foreign table rem2 add constraint rem2_f1positive check (f1 >= 0);
-- check constraint is enforced on the remote side, not locally
copy rem2 from stdin;
copy rem2 from stdin; -- ERROR
ERROR:  new row for relation "loc2" violates check constraint "loc2_f1positive"
DETAIL:  Failing row contains (-1, xyzzy).
CONTEXT:  remote SQL command: INSERT INTO public.loc2(f1, f2) VALUES ($1, $2)
COPY rem2
select * from rem2;
 f1 | f2  
----+-----
 1  | foo
 2  | bar
 3  | baz
(3 rows)

alter foreign table rem2 drop constraint rem2_f1positive;
alter table loc2 drop constraint loc2_f1positive;
delete from rem2;
-- Test remote triggers
create trigger trig_row_before_insert before insert on loc2
	for each row execute procedure trig_row_before_insupdate();
-- The new values are concatenated with ' triggered !'
copy rem2 from stdin;
select * from rem2;
 f1 |       f2        
----+-----------------
 1  | foo triggered !
 2  | bar triggered !
 3  | baz triggered !
(3 rows)

drop trigger trig_row_before_insert on loc2;
delete from rem2;
create trigger trig_null before insert on loc2
	for each row execute procedure trig_null();
-- Nothing happens
copy rem2 from stdin;
select * from rem2;
 f1 | f2 
----+----
(0 rows)

drop trigger trig_null on loc2;
delete from rem2;
-- Check with zero-column foreign table; batch insert will be disabled
alter table loc2 drop column f1;
alter table loc2 drop column f2;
alter table rem2 drop column f1;
alter table rem2 drop column f2;
copy rem2 from stdin;
select * from rem2;
--
(3 rows)

delete from rem2;
alter server loopback options (drop batch_size);
-- ===================================================================
-- test for TRUNCATE
-- ===================================================================
CREATE TABLE tru_rtable0 (id number(38,0) primary key);
CREATE FOREIGN TABLE tru_ftable (id number(38,0))
       SERVER loopback OPTIONS (table_name 'tru_rtable0');
INSERT INTO tru_rtable0 (SELECT x FROM generate_series(1,10) x);
CREATE TABLE tru_ptable (id int) PARTITION BY HASH(id);
CREATE TABLE tru_ptable__p0 PARTITION OF tru_ptable
                            FOR VALUES WITH (MODULUS 2, REMAINDER 0);
CREATE TABLE tru_rtable1 (id number(38,0) primary key);
CREATE FOREIGN TABLE tru_ftable__p1 PARTITION OF tru_ptable
                                    FOR VALUES WITH (MODULUS 2, REMAINDER 1)
       SERVER loopback OPTIONS (table_name 'tru_rtable1');
INSERT INTO tru_ptable (SELECT x FROM generate_series(11,20) x);
CREATE TABLE tru_pk_table(id number(38,0) primary key);
CREATE TABLE tru_fk_table(fkey number(38,0) references tru_pk_table(id));
INSERT INTO tru_pk_table (SELECT x FROM generate_series(1,10) x);
INSERT INTO tru_fk_table (SELECT x % 10 + 1 FROM generate_series(5,25) x);
CREATE FOREIGN TABLE tru_pk_ftable (id number(38,0))
       SERVER loopback OPTIONS (table_name 'tru_pk_table');
CREATE TABLE tru_rtable_parent (id number(38,0));
CREATE TABLE tru_rtable_child (id number(38,0));
CREATE FOREIGN TABLE tru_ftable_parent (id number(38,0))
       SERVER loopback OPTIONS (table_name 'tru_rtable_parent');
CREATE FOREIGN TABLE tru_ftable_child () INHERITS (tru_ftable_parent)
       SERVER loopback OPTIONS (table_name 'tru_rtable_child');
INSERT INTO tru_rtable_parent (SELECT x FROM generate_series(1,8) x);
INSERT INTO tru_rtable_child  (SELECT x FROM generate_series(10, 18) x);
-- normal truncate
SELECT sum(id) FROM tru_ftable;        -- 55
 sum 
-----
 55
(1 row)

TRUNCATE tru_ftable;
SELECT count(*) FROM tru_rtable0;		-- 0
 count 
-------
     0
(1 row)

SELECT count(*) FROM tru_ftable;		-- 0
 count 
-------
     0
(1 row)

-- 'truncatable' option
ALTER SERVER loopback OPTIONS (ADD truncatable 'false');
TRUNCATE tru_ftable;			-- error
ERROR:  foreign table "tru_ftable" does not allow truncates
ALTER FOREIGN TABLE tru_ftable OPTIONS (ADD truncatable 'true');
TRUNCATE tru_ftable;			-- accepted
ALTER FOREIGN TABLE tru_ftable OPTIONS (SET truncatable 'false');
TRUNCATE tru_ftable;			-- error
ERROR:  foreign table "tru_ftable" does not allow truncates
ALTER SERVER loopback OPTIONS (DROP truncatable);
ALTER FOREIGN TABLE tru_ftable OPTIONS (SET truncatable 'false');
TRUNCATE tru_ftable;			-- error
ERROR:  foreign table "tru_ftable" does not allow truncates
ALTER FOREIGN TABLE tru_ftable OPTIONS (SET truncatable 'true');
TRUNCATE tru_ftable;			-- accepted
-- partitioned table with both local and foreign tables as partitions
SELECT sum(id) FROM tru_ptable;        -- 155
 sum 
-----
 155
(1 row)

TRUNCATE tru_ptable;
SELECT count(*) FROM tru_ptable;		-- 0
 count 
-------
     0
(1 row)

SELECT count(*) FROM tru_ptable__p0;	-- 0
 count 
-------
     0
(1 row)

SELECT count(*) FROM tru_ftable__p1;	-- 0
 count 
-------
     0
(1 row)

SELECT count(*) FROM tru_rtable1;		-- 0
 count 
-------
     0
(1 row)

-- 'CASCADE' option
SELECT sum(id) FROM tru_pk_ftable;      -- 55
 sum 
-----
 55
(1 row)

TRUNCATE tru_pk_ftable;	-- failed by FK reference
ERROR:  cannot truncate a table referenced in a foreign key constraint
DETAIL:  Table "tru_fk_table" references "tru_pk_table".
HINT:  Truncate table "tru_fk_table" at the same time, or use TRUNCATE ... CASCADE.
CONTEXT:  remote SQL command: TRUNCATE public.tru_pk_table CONTINUE IDENTITY RESTRICT
TRUNCATE tru_pk_ftable CASCADE;
SELECT count(*) FROM tru_pk_ftable;    -- 0
 count 
-------
     0
(1 row)

SELECT count(*) FROM tru_fk_table;		-- also truncated,0
 count 
-------
     0
(1 row)

-- truncate two tables at a command
INSERT INTO tru_ftable (SELECT x FROM generate_series(1,8) x);
INSERT INTO tru_pk_ftable (SELECT x FROM generate_series(3,10) x);
SELECT count(*) from tru_ftable; -- 8
 count 
-------
     8
(1 row)

SELECT count(*) from tru_pk_ftable; -- 8
 count 
-------
     8
(1 row)

TRUNCATE tru_ftable, tru_pk_ftable CASCADE;
SELECT count(*) from tru_ftable; -- 0
 count 
-------
     0
(1 row)

SELECT count(*) from tru_pk_ftable; -- 0
 count 
-------
     0
(1 row)

-- truncate with ONLY clause
-- Since ONLY is specified, the table tru_ftable_child that inherits
-- tru_ftable_parent locally is not truncated.
TRUNCATE ONLY tru_ftable_parent;
SELECT sum(id) FROM tru_ftable_parent;  -- 126
 sum 
-----
 126
(1 row)

TRUNCATE tru_ftable_parent;
SELECT count(*) FROM tru_ftable_parent; -- 0
 count 
-------
     0
(1 row)

-- in case when remote table has inherited children
CREATE TABLE tru_rtable0_child () INHERITS (tru_rtable0);
INSERT INTO tru_rtable0 (SELECT x FROM generate_series(5,9) x);
INSERT INTO tru_rtable0_child (SELECT x FROM generate_series(10,14) x);
SELECT sum(id) FROM tru_ftable;   -- 95
 sum 
-----
 95
(1 row)

-- Both parent and child tables in the foreign server are truncated
-- even though ONLY is specified because ONLY has no effect
-- when truncating a foreign table.
TRUNCATE ONLY tru_ftable;
SELECT count(*) FROM tru_ftable;   -- 0
 count 
-------
     0
(1 row)

INSERT INTO tru_rtable0 (SELECT x FROM generate_series(21,25) x);
INSERT INTO tru_rtable0_child (SELECT x FROM generate_series(26,30) x);
SELECT sum(id) FROM tru_ftable;		-- 255
 sum 
-----
 255
(1 row)

TRUNCATE tru_ftable;			-- truncate both of parent and child
SELECT count(*) FROM tru_ftable;    -- 0
 count 
-------
     0
(1 row)

-- cleanup
DROP FOREIGN TABLE tru_ftable_parent, tru_ftable_child, tru_pk_ftable,tru_ftable__p1,tru_ftable;
DROP TABLE tru_rtable0, tru_rtable1, tru_ptable, tru_ptable__p0, tru_pk_table, tru_fk_table,
tru_rtable_parent,tru_rtable_child, tru_rtable0_child;
-- ===================================================================
-- test IMPORT FOREIGN SCHEMA
-- ===================================================================
CREATE SCHEMA import_source;
CREATE TABLE import_source.t1 (c1 number(38,0), c2 pg_catalog.varchar(42) NOT NULL);
CREATE TABLE import_source.t2 (c1 number(38,0) default 42, c2 pg_catalog.varchar(42) NULL, c3 varchar2(1024) collate "POSIX");
CREATE TYPE typ1 AS (m1 number(38,0), m2 pg_catalog.varchar(42));
CREATE TABLE import_source.t3 (c1 timestamptz default now(), c2 typ1);
CREATE TABLE import_source."x 4" (c1 binary_double, "C 2" varchar2(1024), c3 varchar(42));
CREATE TABLE import_source."x 5" (c1 binary_double);
ALTER TABLE import_source."x 5" DROP COLUMN c1;
CREATE TABLE import_source."x 6" (c1 number(38,0), c2 number(38,0) generated always as (c1 * 2) stored);
CREATE TABLE import_source.t4 (c1 number(38,0)) PARTITION BY RANGE (c1);
CREATE TABLE import_source.t4_part PARTITION OF import_source.t4
  FOR VALUES FROM (1) TO (100);
CREATE TABLE import_source.t4_part2 PARTITION OF import_source.t4
  FOR VALUES FROM (100) TO (200);
CREATE SCHEMA import_dest1;
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest1;
\det+ import_dest1.*
                                     List of foreign tables
    Schema    | Table |  Server  |                   FDW options                   | Description 
--------------+-------+----------+-------------------------------------------------+-------------
 import_dest1 | t1    | loopback | (schema_name 'import_source', table_name 't1')  | 
 import_dest1 | t2    | loopback | (schema_name 'import_source', table_name 't2')  | 
 import_dest1 | t3    | loopback | (schema_name 'import_source', table_name 't3')  | 
 import_dest1 | t4    | loopback | (schema_name 'import_source', table_name 't4')  | 
 import_dest1 | x 4   | loopback | (schema_name 'import_source', table_name 'x 4') | 
 import_dest1 | x 5   | loopback | (schema_name 'import_source', table_name 'x 5') | 
 import_dest1 | x 6   | loopback | (schema_name 'import_source', table_name 'x 6') | 
(7 rows)

\d import_dest1.*
                            Foreign table "import_dest1.t1"
 Column |          Type          | Collation | Nullable | Default |    FDW options     
--------+------------------------+-----------+----------+---------+--------------------
 c1     | number(38,0)           |           |          |         | (column_name 'c1')
 c2     | pg_catalog.varchar(42) |           | not null |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't1')

                            Foreign table "import_dest1.t2"
 Column |          Type          | Collation | Nullable | Default |    FDW options     
--------+------------------------+-----------+----------+---------+--------------------
 c1     | number(38,0)           |           |          |         | (column_name 'c1')
 c2     | pg_catalog.varchar(42) |           |          |         | (column_name 'c2')
 c3     | varchar2(1024)         | POSIX     |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't2')

                              Foreign table "import_dest1.t3"
 Column |            Type             | Collation | Nullable | Default |    FDW options     
--------+-----------------------------+-----------+----------+---------+--------------------
 c1     | timestamp(6) with time zone |           |          |         | (column_name 'c1')
 c2     | typ1                        |           |          |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't3')

                       Foreign table "import_dest1.t4"
 Column |     Type     | Collation | Nullable | Default |    FDW options     
--------+--------------+-----------+----------+---------+--------------------
 c1     | number(38,0) |           |          |         | (column_name 'c1')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't4')

                        Foreign table "import_dest1.x 4"
 Column |      Type      | Collation | Nullable | Default |     FDW options     
--------+----------------+-----------+----------+---------+---------------------
 c1     | binary_double  |           |          |         | (column_name 'c1')
 C 2    | varchar2(1024) |           |          |         | (column_name 'C 2')
 c3     | varchar2(42)   |           |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest1.x 5"
 Column | Type | Collation | Nullable | Default | FDW options 
--------+------+-----------+----------+---------+-------------
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 5')

                                         Foreign table "import_dest1.x 6"
 Column |     Type     | Collation | Nullable |                    Default                    |    FDW options     
--------+--------------+-----------+----------+-----------------------------------------------+--------------------
 c1     | number(38,0) |           |          |                                               | (column_name 'c1')
 c2     | number(38,0) |           |          | generated always as ((c1 * 2::number)) stored | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 6')

-- Options
CREATE SCHEMA import_dest2;
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest2
  OPTIONS (import_default 'true');
\det+ import_dest2.*
                                     List of foreign tables
    Schema    | Table |  Server  |                   FDW options                   | Description 
--------------+-------+----------+-------------------------------------------------+-------------
 import_dest2 | t1    | loopback | (schema_name 'import_source', table_name 't1')  | 
 import_dest2 | t2    | loopback | (schema_name 'import_source', table_name 't2')  | 
 import_dest2 | t3    | loopback | (schema_name 'import_source', table_name 't3')  | 
 import_dest2 | t4    | loopback | (schema_name 'import_source', table_name 't4')  | 
 import_dest2 | x 4   | loopback | (schema_name 'import_source', table_name 'x 4') | 
 import_dest2 | x 5   | loopback | (schema_name 'import_source', table_name 'x 5') | 
 import_dest2 | x 6   | loopback | (schema_name 'import_source', table_name 'x 6') | 
(7 rows)

\d import_dest2.*
                            Foreign table "import_dest2.t1"
 Column |          Type          | Collation | Nullable | Default |    FDW options     
--------+------------------------+-----------+----------+---------+--------------------
 c1     | number(38,0)           |           |          |         | (column_name 'c1')
 c2     | pg_catalog.varchar(42) |           | not null |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't1')

                            Foreign table "import_dest2.t2"
 Column |          Type          | Collation | Nullable | Default |    FDW options     
--------+------------------------+-----------+----------+---------+--------------------
 c1     | number(38,0)           |           |          | 42      | (column_name 'c1')
 c2     | pg_catalog.varchar(42) |           |          |         | (column_name 'c2')
 c3     | varchar2(1024)         | POSIX     |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't2')

                              Foreign table "import_dest2.t3"
 Column |            Type             | Collation | Nullable | Default |    FDW options     
--------+-----------------------------+-----------+----------+---------+--------------------
 c1     | timestamp(6) with time zone |           |          | now()   | (column_name 'c1')
 c2     | typ1                        |           |          |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't3')

                       Foreign table "import_dest2.t4"
 Column |     Type     | Collation | Nullable | Default |    FDW options     
--------+--------------+-----------+----------+---------+--------------------
 c1     | number(38,0) |           |          |         | (column_name 'c1')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't4')

                        Foreign table "import_dest2.x 4"
 Column |      Type      | Collation | Nullable | Default |     FDW options     
--------+----------------+-----------+----------+---------+---------------------
 c1     | binary_double  |           |          |         | (column_name 'c1')
 C 2    | varchar2(1024) |           |          |         | (column_name 'C 2')
 c3     | varchar2(42)   |           |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest2.x 5"
 Column | Type | Collation | Nullable | Default | FDW options 
--------+------+-----------+----------+---------+-------------
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 5')

                                         Foreign table "import_dest2.x 6"
 Column |     Type     | Collation | Nullable |                    Default                    |    FDW options     
--------+--------------+-----------+----------+-----------------------------------------------+--------------------
 c1     | number(38,0) |           |          |                                               | (column_name 'c1')
 c2     | number(38,0) |           |          | generated always as ((c1 * 2::number)) stored | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 6')

CREATE SCHEMA import_dest3;
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest3
  OPTIONS (import_collate 'false', import_generated 'false', import_not_null 'false');
\det+ import_dest3.*
                                     List of foreign tables
    Schema    | Table |  Server  |                   FDW options                   | Description 
--------------+-------+----------+-------------------------------------------------+-------------
 import_dest3 | t1    | loopback | (schema_name 'import_source', table_name 't1')  | 
 import_dest3 | t2    | loopback | (schema_name 'import_source', table_name 't2')  | 
 import_dest3 | t3    | loopback | (schema_name 'import_source', table_name 't3')  | 
 import_dest3 | t4    | loopback | (schema_name 'import_source', table_name 't4')  | 
 import_dest3 | x 4   | loopback | (schema_name 'import_source', table_name 'x 4') | 
 import_dest3 | x 5   | loopback | (schema_name 'import_source', table_name 'x 5') | 
 import_dest3 | x 6   | loopback | (schema_name 'import_source', table_name 'x 6') | 
(7 rows)

\d import_dest3.*
                            Foreign table "import_dest3.t1"
 Column |          Type          | Collation | Nullable | Default |    FDW options     
--------+------------------------+-----------+----------+---------+--------------------
 c1     | number(38,0)           |           |          |         | (column_name 'c1')
 c2     | pg_catalog.varchar(42) |           |          |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't1')

                            Foreign table "import_dest3.t2"
 Column |          Type          | Collation | Nullable | Default |    FDW options     
--------+------------------------+-----------+----------+---------+--------------------
 c1     | number(38,0)           |           |          |         | (column_name 'c1')
 c2     | pg_catalog.varchar(42) |           |          |         | (column_name 'c2')
 c3     | varchar2(1024)         |           |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't2')

                              Foreign table "import_dest3.t3"
 Column |            Type             | Collation | Nullable | Default |    FDW options     
--------+-----------------------------+-----------+----------+---------+--------------------
 c1     | timestamp(6) with time zone |           |          |         | (column_name 'c1')
 c2     | typ1                        |           |          |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't3')

                       Foreign table "import_dest3.t4"
 Column |     Type     | Collation | Nullable | Default |    FDW options     
--------+--------------+-----------+----------+---------+--------------------
 c1     | number(38,0) |           |          |         | (column_name 'c1')
Server: loopback
FDW options: (schema_name 'import_source', table_name 't4')

                        Foreign table "import_dest3.x 4"
 Column |      Type      | Collation | Nullable | Default |     FDW options     
--------+----------------+-----------+----------+---------+---------------------
 c1     | binary_double  |           |          |         | (column_name 'c1')
 C 2    | varchar2(1024) |           |          |         | (column_name 'C 2')
 c3     | varchar2(42)   |           |          |         | (column_name 'c3')
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest3.x 5"
 Column | Type | Collation | Nullable | Default | FDW options 
--------+------+-----------+----------+---------+-------------
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 5')

                      Foreign table "import_dest3.x 6"
 Column |     Type     | Collation | Nullable | Default |    FDW options     
--------+--------------+-----------+----------+---------+--------------------
 c1     | number(38,0) |           |          |         | (column_name 'c1')
 c2     | number(38,0) |           |          |         | (column_name 'c2')
Server: loopback
FDW options: (schema_name 'import_source', table_name 'x 6')

-- Check LIMIT TO and EXCEPT
CREATE SCHEMA import_dest4;
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t1, nonesuch, t4_part)
  FROM SERVER loopback INTO import_dest4;
\det+ import_dest4.*
                                        List of foreign tables
    Schema    |  Table  |  Server  |                     FDW options                     | Description 
--------------+---------+----------+-----------------------------------------------------+-------------
 import_dest4 | t1      | loopback | (schema_name 'import_source', table_name 't1')      | 
 import_dest4 | t4_part | loopback | (schema_name 'import_source', table_name 't4_part') | 
(2 rows)

IMPORT FOREIGN SCHEMA import_source EXCEPT (t1, "x 4", nonesuch, t4_part)
  FROM SERVER loopback INTO import_dest4;
\det+ import_dest4.*
                                        List of foreign tables
    Schema    |  Table  |  Server  |                     FDW options                     | Description 
--------------+---------+----------+-----------------------------------------------------+-------------
 import_dest4 | t1      | loopback | (schema_name 'import_source', table_name 't1')      | 
 import_dest4 | t2      | loopback | (schema_name 'import_source', table_name 't2')      | 
 import_dest4 | t3      | loopback | (schema_name 'import_source', table_name 't3')      | 
 import_dest4 | t4      | loopback | (schema_name 'import_source', table_name 't4')      | 
 import_dest4 | t4_part | loopback | (schema_name 'import_source', table_name 't4_part') | 
 import_dest4 | x 5     | loopback | (schema_name 'import_source', table_name 'x 5')     | 
 import_dest4 | x 6     | loopback | (schema_name 'import_source', table_name 'x 6')     | 
(7 rows)

-- Assorted error cases
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest4;
ERROR:  relation "t1" already exists
CONTEXT:  importing foreign table "t1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER loopback INTO import_dest4;
ERROR:  schema "nonesuch" is not present on foreign server "loopback"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER loopback INTO notthere;
ERROR:  schema "notthere" does not exist
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER nowhere INTO notthere;
ERROR:  server "nowhere" does not exist
-- Check case of a type present only on the remote server.
-- We can fake this by dropping the type locally in our transaction.
CREATE TYPE "Colors" AS ENUM ('red', 'green', 'blue');
CREATE TABLE import_source.t5 (c1 number(38,0), c2 varchar2(1024) collate "C", "Col" "Colors");
CREATE SCHEMA import_dest5;
BEGIN;
DROP TYPE "Colors" CASCADE;
NOTICE:  drop cascades to column Col of table import_source.t5
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t5)
  FROM SERVER loopback INTO import_dest5;  -- ERROR
ERROR:  type "public.Colors" does not exist
LINE 4:   "Col" public."Colors" OPTIONS (column_name 'Col')
                ^
QUERY:  CREATE FOREIGN TABLE t5 (
  c1 number(38,0) OPTIONS (column_name 'c1'),
  c2 varchar2(1024) OPTIONS (column_name 'c2') COLLATE pg_catalog."C",
  "Col" public."Colors" OPTIONS (column_name 'Col')
) SERVER loopback
OPTIONS (schema_name 'import_source', table_name 't5');
CONTEXT:  importing foreign table "t5"
ROLLBACK;
BEGIN;
CREATE SERVER fetch101 FOREIGN DATA WRAPPER postgres_fdw OPTIONS( fetch_size '101' );
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];
 count 
-------
     1
(1 row)

ALTER SERVER fetch101 OPTIONS( SET fetch_size '202' );
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];
 count 
-------
     0
(1 row)

SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=202'];
 count 
-------
     1
(1 row)

CREATE FOREIGN TABLE table30000 ( x number(38,0) ) SERVER fetch101 OPTIONS ( fetch_size '30000' );
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=30000'];
 count 
-------
     1
(1 row)

ALTER FOREIGN TABLE table30000 OPTIONS ( SET fetch_size '60000');
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=30000'];
 count 
-------
     0
(1 row)

SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=60000'];
 count 
-------
     1
(1 row)

ROLLBACK;
-- ===================================================================
-- test partitionwise joins
-- ===================================================================
SET enable_partitionwise_join=on;
CREATE TABLE fprt1 (a number(38,0), b number(38,0), c pg_catalog.varchar(42)) PARTITION BY RANGE(a);
CREATE TABLE fprt1_p1 (LIKE fprt1);
CREATE TABLE fprt1_p2 (LIKE fprt1);
ALTER TABLE fprt1_p1 SET (autovacuum_enabled = 'false');
ALTER TABLE fprt1_p2 SET (autovacuum_enabled = 'false');
INSERT INTO fprt1_p1 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(0, 249, 2) i;
INSERT INTO fprt1_p2 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(250, 499, 2) i;
CREATE FOREIGN TABLE ftprt1_p1 PARTITION OF fprt1 FOR VALUES FROM (0) TO (250)
	SERVER loopback OPTIONS (table_name 'fprt1_p1', use_remote_estimate 'true');
CREATE FOREIGN TABLE ftprt1_p2 PARTITION OF fprt1 FOR VALUES FROM (250) TO (500)
	SERVER loopback OPTIONS (TABLE_NAME 'fprt1_p2');
ANALYZE fprt1;
ANALYZE fprt1_p1;
ANALYZE fprt1_p2;
CREATE TABLE fprt2 (a number(38,0), b number(38,0), c pg_catalog.varchar(42)) PARTITION BY RANGE(b);
CREATE TABLE fprt2_p1 (LIKE fprt2);
CREATE TABLE fprt2_p2 (LIKE fprt2);
ALTER TABLE fprt2_p1 SET (autovacuum_enabled = 'false');
ALTER TABLE fprt2_p2 SET (autovacuum_enabled = 'false');
INSERT INTO fprt2_p1 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(0, 249, 3) i;
INSERT INTO fprt2_p2 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(250, 499, 3) i;
CREATE FOREIGN TABLE ftprt2_p1 (b number(38,0), c pg_catalog.varchar(42), a number(38,0))
	SERVER loopback OPTIONS (table_name 'fprt2_p1', use_remote_estimate 'true');
ALTER TABLE fprt2 ATTACH PARTITION ftprt2_p1 FOR VALUES FROM (0) TO (250);
CREATE FOREIGN TABLE ftprt2_p2 PARTITION OF fprt2 FOR VALUES FROM (250) TO (500)
	SERVER loopback OPTIONS (table_name 'fprt2_p2', use_remote_estimate 'true');
ANALYZE fprt2;
ANALYZE fprt2_p1;
ANALYZE fprt2_p2;
-- inner join three tables
EXPLAIN (COSTS OFF)
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort
   Sort Key: t1.a, t3.c
   ->  Append
         ->  Nested Loop
               Join Filter: (t1_1.a = t3_1.a)
               ->  Nested Loop
                     Join Filter: (t1_1.a = t2_1.b)
                     ->  Foreign Scan on ftprt1_p1 t1_1
                           Filter: ((a % '25'::number) = '0'::number)
                     ->  Foreign Scan on ftprt2_p1 t2_1
               ->  Foreign Scan on ftprt1_p1 t3_1
         ->  Nested Loop
               Join Filter: (t1_2.a = t3_2.a)
               ->  Nested Loop
                     Join Filter: (t1_2.a = t2_2.b)
                     ->  Foreign Scan on ftprt1_p2 t1_2
                           Filter: ((a % '25'::number) = '0'::number)
                     ->  Foreign Scan on ftprt2_p2 t2_2
               ->  Foreign Scan on ftprt1_p2 t3_2
(19 rows)

SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
  a  |  b  |  c   
-----+-----+------
 0   | 0   | 0000
 150 | 150 | 0003
 250 | 250 | 0005
 400 | 400 | 0008
(4 rows)

-- left outer join + nullable clause
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Incremental Sort
   Output: t1.a, fprt2.b, fprt2.c
   Sort Key: t1.a, fprt2.b, fprt2.c
   Presorted Key: t1.a
   ->  Merge Left Join
         Output: t1.a, fprt2.b, fprt2.c
         Merge Cond: ((t1.a = fprt2.b) AND (t1.b = fprt2.a))
         ->  Sort
               Output: t1.a, t1.b
               Sort Key: t1.a, t1.b
               ->  Foreign Scan on public.ftprt1_p1 t1
                     Output: t1.a, t1.b
                     Filter: (t1.a < '10'::number)
                     Remote SQL: SELECT a, b FROM public.fprt1_p1
         ->  Sort
               Output: fprt2.b, fprt2.c, fprt2.a
               Sort Key: fprt2.b, fprt2.a
               ->  Foreign Scan on public.ftprt2_p1 fprt2
                     Output: fprt2.b, fprt2.c, fprt2.a
                     Filter: (fprt2.a < '10'::number)
                     Remote SQL: SELECT b, c, a FROM public.fprt2_p1
(21 rows)

SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
 a | b |  c   
---+---+------
 0 | 0 | 0000
 2 |   | 
 4 |   | 
 6 | 6 | 0000
 8 |   | 
(5 rows)

-- with whole-row reference; partitionwise join does not apply
EXPLAIN (COSTS OFF)
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort
   Sort Key: ((t1.*)::fprt1), ((t2.*)::fprt2)
   ->  Hash Full Join
         Hash Cond: (t1.a = t2.b)
         ->  Append
               ->  Foreign Scan on ftprt1_p1 t1_1
                     Filter: ((a % '25'::number) = '0'::number)
               ->  Foreign Scan on ftprt1_p2 t1_2
                     Filter: ((a % '25'::number) = '0'::number)
         ->  Hash
               ->  Append
                     ->  Foreign Scan on ftprt2_p1 t2_1
                           Filter: ((b % '25'::number) = '0'::number)
                     ->  Foreign Scan on ftprt2_p2 t2_2
                           Filter: ((b % '25'::number) = '0'::number)
(15 rows)

SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
       wr       |       wr       
----------------+----------------
 (0,0,0000)     | (0,0,0000)
 (50,50,0001)   | 
 (100,100,0002) | 
 (150,150,0003) | (150,150,0003)
 (200,200,0004) | 
 (250,250,0005) | (250,250,0005)
 (300,300,0006) | 
 (350,350,0007) | 
 (400,400,0008) | (400,400,0008)
 (450,450,0009) | 
                | (75,75,0001)
                | (225,225,0004)
                | (325,325,0006)
                | (475,475,0009)
(14 rows)

-- join with lateral reference
EXPLAIN (COSTS OFF)
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort
   Sort Key: t1.a, t1.b
   ->  Append
         ->  Nested Loop
               Join Filter: ((t1_1.a = t2_1.b) AND (t1_1.b = t2_1.a))
               ->  Foreign Scan on ftprt1_p1 t1_1
                     Filter: ((a % '25'::number) = '0'::number)
               ->  Foreign Scan on ftprt2_p1 t2_1
         ->  Nested Loop
               Join Filter: ((t1_2.a = t2_2.b) AND (t1_2.b = t2_2.a))
               ->  Foreign Scan on ftprt1_p2 t1_2
                     Filter: ((a % '25'::number) = '0'::number)
               ->  Foreign Scan on ftprt2_p2 t2_2
(13 rows)

SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
  a  |  b  
-----+-----
 0   | 0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

-- with PHVs, partitionwise join selected but no join pushdown
EXPLAIN (COSTS OFF)
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Sort
   Sort Key: fprt1.a, fprt2.b
   ->  Append
         ->  Hash Full Join
               Hash Cond: (fprt1_1.a = fprt2_1.b)
               ->  Foreign Scan on ftprt1_p1 fprt1_1
                     Filter: ((a % '25'::number) = '0'::number)
               ->  Hash
                     ->  Foreign Scan on ftprt2_p1 fprt2_1
                           Filter: ((b % '25'::number) = '0'::number)
         ->  Hash Full Join
               Hash Cond: (fprt1_2.a = fprt2_2.b)
               ->  Foreign Scan on ftprt1_p2 fprt1_2
                     Filter: ((a % '25'::number) = '0'::number)
               ->  Hash
                     ->  Foreign Scan on ftprt2_p2 fprt2_2
                           Filter: ((b % '25'::number) = '0'::number)
(17 rows)

SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
  a  |  phv   |  b  |  phv   
-----+--------+-----+--------
 0   | t1_phv | 0   | t2_phv
 50  | t1_phv |     | 
 100 | t1_phv |     | 
 150 | t1_phv | 150 | t2_phv
 200 | t1_phv |     | 
 250 | t1_phv | 250 | t2_phv
 300 | t1_phv |     | 
 350 | t1_phv |     | 
 400 | t1_phv | 400 | t2_phv
 450 | t1_phv |     | 
     |        | 75  | t2_phv
     |        | 225 | t2_phv
     |        | 325 | t2_phv
     |        | 475 | t2_phv
(14 rows)

-- test FOR UPDATE; partitionwise join does not apply
EXPLAIN (COSTS OFF)
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 LockRows
   ->  Sort
         Sort Key: t1.a
         ->  Hash Join
               Hash Cond: (t2.b = t1.a)
               ->  Append
                     ->  Foreign Scan on ftprt2_p1 t2_1
                     ->  Foreign Scan on ftprt2_p2 t2_2
               ->  Hash
                     ->  Append
                           ->  Foreign Scan on ftprt1_p1 t1_1
                                 Filter: ((a % '25'::number) = '0'::number)
                           ->  Foreign Scan on ftprt1_p2 t1_2
                                 Filter: ((a % '25'::number) = '0'::number)
(14 rows)

SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
  a  |  b  
-----+-----
 0   | 0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

RESET enable_partitionwise_join;
-- ===================================================================
-- test partitionwise aggregates
-- ===================================================================
CREATE TABLE pagg_tab (a number(38,0), b number(38,0), c varchar2(1024)) PARTITION BY RANGE(a);
CREATE TABLE pagg_tab_p1 (LIKE pagg_tab);
CREATE TABLE pagg_tab_p2 (LIKE pagg_tab);
CREATE TABLE pagg_tab_p3 (LIKE pagg_tab);
INSERT INTO pagg_tab_p1 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 10;
INSERT INTO pagg_tab_p2 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 20 and (i % 30) >= 10;
INSERT INTO pagg_tab_p3 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 30 and (i % 30) >= 20;
-- Create foreign partitions
CREATE FOREIGN TABLE fpagg_tab_p1 PARTITION OF pagg_tab FOR VALUES FROM (0) TO (10) SERVER loopback OPTIONS (table_name 'pagg_tab_p1');
CREATE FOREIGN TABLE fpagg_tab_p2 PARTITION OF pagg_tab FOR VALUES FROM (10) TO (20) SERVER loopback OPTIONS (table_name 'pagg_tab_p2');
CREATE FOREIGN TABLE fpagg_tab_p3 PARTITION OF pagg_tab FOR VALUES FROM (20) TO (30) SERVER loopback OPTIONS (table_name 'pagg_tab_p3');
ANALYZE pagg_tab;
ANALYZE fpagg_tab_p1;
ANALYZE fpagg_tab_p2;
ANALYZE fpagg_tab_p3;
-- When GROUP BY clause matches with PARTITION KEY.
-- Plan with partitionwise aggregates is disabled
SET enable_partitionwise_aggregate TO false;
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                        QUERY PLAN                         
-----------------------------------------------------------
 Sort
   Sort Key: pagg_tab.a
   ->  HashAggregate
         Group Key: pagg_tab.a
         Filter: (avg(pagg_tab.b) < '22'::number)
         ->  Append
               ->  Foreign Scan on fpagg_tab_p1 pagg_tab_1
               ->  Foreign Scan on fpagg_tab_p2 pagg_tab_2
               ->  Foreign Scan on fpagg_tab_p3 pagg_tab_3
(9 rows)

-- Plan with partitionwise aggregates is enabled
SET enable_partitionwise_aggregate TO true;
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                        QUERY PLAN                         
-----------------------------------------------------------
 Sort
   Sort Key: pagg_tab.a
   ->  Append
         ->  HashAggregate
               Group Key: pagg_tab.a
               Filter: (avg(pagg_tab.b) < '22'::number)
               ->  Foreign Scan on fpagg_tab_p1 pagg_tab
         ->  HashAggregate
               Group Key: pagg_tab_1.a
               Filter: (avg(pagg_tab_1.b) < '22'::number)
               ->  Foreign Scan on fpagg_tab_p2 pagg_tab_1
         ->  HashAggregate
               Group Key: pagg_tab_2.a
               Filter: (avg(pagg_tab_2.b) < '22'::number)
               ->  Foreign Scan on fpagg_tab_p3 pagg_tab_2
(15 rows)

SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | sum  | min | count 
----+------+-----+-------
 0  | 2000 | 0   |   100
 1  | 2100 | 1   |   100
 10 | 2000 | 0   |   100
 11 | 2100 | 1   |   100
 20 | 2000 | 0   |   100
 21 | 2100 | 1   |   100
(6 rows)

-- Check with whole-row reference
-- Should have all the columns in the target list for the given relation
EXPLAIN (VERBOSE, COSTS OFF)
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort
   Output: t1.a, (count(((t1.*)::pagg_tab)))
   Sort Key: t1.a
   ->  Append
         ->  HashAggregate
               Output: t1.a, count(((t1.*)::pagg_tab))
               Group Key: t1.a
               Filter: (avg(t1.b) < '22'::number)
               ->  Foreign Scan on public.fpagg_tab_p1 t1
                     Output: t1.a, t1.*, t1.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p1
         ->  HashAggregate
               Output: t1_1.a, count(((t1_1.*)::pagg_tab))
               Group Key: t1_1.a
               Filter: (avg(t1_1.b) < '22'::number)
               ->  Foreign Scan on public.fpagg_tab_p2 t1_1
                     Output: t1_1.a, t1_1.*, t1_1.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p2
         ->  HashAggregate
               Output: t1_2.a, count(((t1_2.*)::pagg_tab))
               Group Key: t1_2.a
               Filter: (avg(t1_2.b) < '22'::number)
               ->  Foreign Scan on public.fpagg_tab_p3 t1_2
                     Output: t1_2.a, t1_2.*, t1_2.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p3
(25 rows)

SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | count 
----+-------
 0  |   100
 1  |   100
 10 |   100
 11 |   100
 20 |   100
 21 |   100
(6 rows)

-- When GROUP BY clause does not match with PARTITION KEY.
EXPLAIN (COSTS OFF)
SELECT b, avg(a), max(a), count(*) FROM pagg_tab GROUP BY b HAVING sum(a) < 700 ORDER BY 1;
                        QUERY PLAN                         
-----------------------------------------------------------
 Sort
   Sort Key: pagg_tab.b
   ->  HashAggregate
         Group Key: pagg_tab.b
         Filter: (sum(pagg_tab.a) < '700'::number)
         ->  Append
               ->  Foreign Scan on fpagg_tab_p1 pagg_tab_1
               ->  Foreign Scan on fpagg_tab_p2 pagg_tab_2
               ->  Foreign Scan on fpagg_tab_p3 pagg_tab_3
(9 rows)

-- ===================================================================
-- access rights and superuser
-- ===================================================================
-- Non-superuser cannot create a FDW without a password in the connstr
CREATE ROLE regress_nosuper NOSUPERUSER;
GRANT USAGE ON FOREIGN DATA WRAPPER postgres_fdw TO regress_nosuper;
SET ROLE regress_nosuper;
SHOW is_superuser;
 is_superuser 
--------------
 off
(1 row)

-- This will be OK, we can create the FDW
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER loopback_nopw FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('ivorysql.port')||$$'
            )$$;
    END;
$d$;
-- But creation of user mappings for non-superusers should fail
CREATE USER MAPPING FOR public SERVER loopback_nopw;
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback_nopw;
CREATE FOREIGN TABLE pg_temp.ft1_nopw (
	c1 number(38,0) NOT NULL,
	c2 number(38,0) NOT NULL,
	c3 varchar2(1024),
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum
) SERVER loopback_nopw OPTIONS (schema_name 'public', table_name 'ft1');
SELECT 1 FROM ft1_nopw LIMIT 1;
ERROR:  password or GSSAPI delegated credentials required
DETAIL:  Non-superusers must delegate GSSAPI credentials or provide a password in the user mapping.
-- If we add a password to the connstr it'll fail, because we don't allow passwords
-- in connstrs only in user mappings.
ALTER SERVER loopback_nopw OPTIONS (ADD password 'dummypw');
ERROR:  invalid option "password"
HINT:  Perhaps you meant the option "passfile".
-- If we add a password for our user mapping instead, we should get a different
-- error because the password wasn't actually *used* when we run with trust auth.
--
-- This won't work with installcheck, but neither will most of the FDW checks.
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD password 'dummypw');
SELECT 1 FROM ft1_nopw LIMIT 1;
ERROR:  password or GSSAPI delegated credentials required
DETAIL:  Non-superuser cannot connect if the server does not request a password or use GSSAPI with delegated credentials.
HINT:  Target server's authentication method must be changed or password_required=false set in the user mapping attributes.
-- Unpriv user cannot make the mapping passwordless
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD password_required 'false');
ERROR:  password_required=false is superuser-only
HINT:  User mappings with the password_required option set to false may only be created or modified by the superuser.
SELECT 1 FROM ft1_nopw LIMIT 1;
ERROR:  password or GSSAPI delegated credentials required
DETAIL:  Non-superuser cannot connect if the server does not request a password or use GSSAPI with delegated credentials.
HINT:  Target server's authentication method must be changed or password_required=false set in the user mapping attributes.
RESET ROLE;
-- But the superuser can
ALTER USER MAPPING FOR regress_nosuper SERVER loopback_nopw OPTIONS (ADD password_required 'false');
SET ROLE regress_nosuper;
-- Should finally work now
SELECT 1 FROM ft1_nopw LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- unpriv user also cannot set sslcert / sslkey on the user mapping
-- first set password_required so we see the right error messages
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (SET password_required 'true');
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD sslcert 'foo.crt');
ERROR:  sslcert and sslkey are superuser-only
HINT:  User mappings with the sslcert or sslkey options set may only be created or modified by the superuser.
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback_nopw OPTIONS (ADD sslkey 'foo.key');
ERROR:  sslcert and sslkey are superuser-only
HINT:  User mappings with the sslcert or sslkey options set may only be created or modified by the superuser.
-- We're done with the role named after a specific user and need to check the
-- changes to the public mapping.
DROP USER MAPPING FOR CURRENT_USER SERVER loopback_nopw;
-- This will fail again as it'll resolve the user mapping for public, which
-- lacks password_required=false
SELECT 1 FROM ft1_nopw LIMIT 1;
ERROR:  password or GSSAPI delegated credentials required
DETAIL:  Non-superusers must delegate GSSAPI credentials or provide a password in the user mapping.
RESET ROLE;
-- The user mapping for public is passwordless and lacks the password_required=false
-- mapping option, but will work because the current user is a superuser.
SELECT 1 FROM ft1_nopw LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- cleanup
DROP USER MAPPING FOR public SERVER loopback_nopw;
DROP OWNED BY regress_nosuper;
DROP ROLE regress_nosuper;
-- Clean-up
RESET enable_partitionwise_aggregate;
-- Two-phase transactions are not supported.
BEGIN;
SELECT count(*) FROM ft1;
 count 
-------
   822
(1 row)

-- error here
PREPARE TRANSACTION 'fdw_tpc';
ERROR:  cannot PREPARE a transaction that has operated on postgres_fdw foreign tables
ROLLBACK;
WARNING:  there is no transaction in progress
-- ===================================================================
-- reestablish new connection
-- ===================================================================
-- Change application_name of remote connection to special one
-- so that we can easily terminate the connection later.
ALTER SERVER loopback OPTIONS (application_name 'fdw_retry_check');
-- Make sure we have a remote connection.
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- Terminate the remote connection and wait for the termination to complete.
-- (If a cache flush happens, the remote connection might have already been
-- dropped; so code this step in a way that doesn't fail if no connection.)
DO $$ BEGIN
PERFORM pg_terminate_backend(pid, 180000) FROM pg_stat_activity
	WHERE application_name = 'fdw_retry_check';
END $$;
-- This query should detect the broken connection when starting new remote
-- transaction, reestablish new connection, and then succeed.
BEGIN;
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- If we detect the broken connection when starting a new remote
-- subtransaction, we should fail instead of establishing a new connection.
-- Terminate the remote connection and wait for the termination to complete.
DO $$ BEGIN
PERFORM pg_terminate_backend(pid, 180000) FROM pg_stat_activity
	WHERE application_name = 'fdw_retry_check';
END $$;
SAVEPOINT s;
-- The text of the error might vary across platforms, so only show SQLSTATE.
\set VERBOSITY sqlstate
SELECT 1 FROM ft1 LIMIT 1;    -- should fail
ERROR:  08006
\set VERBOSITY default
COMMIT;
-- =============================================================================
-- test connection invalidation cases and postgres_fdw_get_connections function
-- =============================================================================
-- Let's ensure to close all the existing cached connections.
SELECT 1 FROM postgres_fdw_disconnect_all();
 ?column? 
----------
        1
(1 row)

-- No cached connections, so no records should be output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
(0 rows)

-- This test case is for closing the connection in pgfdw_xact_callback
BEGIN;
-- Connection xact depth becomes 1 i.e. the connection is in midst of the xact.
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

SELECT 1 FROM ft7 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- List all the existing cached connections. loopback and loopback3 should be
-- output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
 loopback
 loopback3
(2 rows)

-- Connections are not closed at the end of the alter and drop statements.
-- That's because the connections are in midst of this xact,
-- they are just marked as invalid in pgfdw_inval_callback.
ALTER SERVER loopback OPTIONS (ADD use_remote_estimate 'off');
DROP SERVER loopback3 CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to user mapping for public on server loopback3
drop cascades to foreign table ft7
-- List all the existing cached connections. loopback and loopback3
-- should be output as invalid connections. Also the server name for
-- loopback3 should be NULL because the server was dropped.
SELECT * FROM postgres_fdw_get_connections() ORDER BY 1;
 server_name | valid 
-------------+-------
 loopback    | f
             | f
(2 rows)

-- The invalid connections get closed in pgfdw_xact_callback during commit.
COMMIT;
-- All cached connections were closed while committing above xact, so no
-- records should be output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
(0 rows)

-- =======================================================================
-- test postgres_fdw_disconnect and postgres_fdw_disconnect_all functions
-- =======================================================================
BEGIN;
-- Ensure to cache loopback connection.
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- Ensure to cache loopback2 connection.
SELECT 1 FROM ft6 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- List all the existing cached connections. loopback and loopback2 should be
-- output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
 loopback
 loopback2
(2 rows)

-- Issue a warning and return false as loopback connection is still in use and
-- can not be closed.
SELECT postgres_fdw_disconnect('loopback');
WARNING:  cannot close connection for server "loopback" because it is still in use
 postgres_fdw_disconnect 
-------------------------
 f
(1 row)

-- List all the existing cached connections. loopback and loopback2 should be
-- output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
 loopback
 loopback2
(2 rows)

-- Return false as connections are still in use, warnings are issued.
-- But disable warnings temporarily because the order of them is not stable.
SET client_min_messages = 'ERROR';
SELECT postgres_fdw_disconnect_all();
 postgres_fdw_disconnect_all 
-----------------------------
 f
(1 row)

RESET client_min_messages;
COMMIT;
-- Ensure that loopback2 connection is closed.
SELECT 1 FROM postgres_fdw_disconnect('loopback2');
 ?column? 
----------
        1
(1 row)

SELECT server_name FROM postgres_fdw_get_connections() WHERE server_name = 'loopback2';
 server_name 
-------------
(0 rows)

-- Return false as loopback2 connection is closed already.
SELECT postgres_fdw_disconnect('loopback2');
 postgres_fdw_disconnect 
-------------------------
 f
(1 row)

-- Return an error as there is no foreign server with given name.
SELECT postgres_fdw_disconnect('unknownserver');
ERROR:  server "unknownserver" does not exist
-- Let's ensure to close all the existing cached connections.
SELECT 1 FROM postgres_fdw_disconnect_all();
 ?column? 
----------
        1
(1 row)

-- No cached connections, so no records should be output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
(0 rows)

-- =============================================================================
-- test case for having multiple cached connections for a foreign server
-- =============================================================================
CREATE ROLE regress_multi_conn_user1 SUPERUSER;
CREATE ROLE regress_multi_conn_user2 SUPERUSER;
CREATE USER MAPPING FOR regress_multi_conn_user1 SERVER loopback;
CREATE USER MAPPING FOR regress_multi_conn_user2 SERVER loopback;
BEGIN;
-- Will cache loopback connection with user mapping for regress_multi_conn_user1
SET ROLE regress_multi_conn_user1;
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

RESET ROLE;
-- Will cache loopback connection with user mapping for regress_multi_conn_user2
SET ROLE regress_multi_conn_user2;
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

RESET ROLE;
-- Should output two connections for loopback server
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
 loopback
 loopback
(2 rows)

COMMIT;
-- Let's ensure to close all the existing cached connections.
SELECT 1 FROM postgres_fdw_disconnect_all();
 ?column? 
----------
        1
(1 row)

-- No cached connections, so no records should be output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
(0 rows)

-- Clean up
DROP USER MAPPING FOR regress_multi_conn_user1 SERVER loopback;
DROP USER MAPPING FOR regress_multi_conn_user2 SERVER loopback;
DROP ROLE regress_multi_conn_user1;
DROP ROLE regress_multi_conn_user2;
-- ===================================================================
-- Test foreign server level option keep_connections
-- ===================================================================
-- By default, the connections associated with foreign server are cached i.e.
-- keep_connections option is on. Set it to off.
ALTER SERVER loopback OPTIONS (keep_connections 'off');
-- connection to loopback server is closed at the end of xact
-- as keep_connections was set to off.
SELECT 1 FROM ft1 LIMIT 1;
 ?column? 
----------
        1
(1 row)

-- No cached connections, so no records should be output.
SELECT server_name FROM postgres_fdw_get_connections() ORDER BY 1;
 server_name 
-------------
(0 rows)

ALTER SERVER loopback OPTIONS (SET keep_connections 'on');
-- ===================================================================
-- batch insert
-- ===================================================================
BEGIN;
CREATE SERVER batch10 FOREIGN DATA WRAPPER postgres_fdw OPTIONS( batch_size '10' );
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'batch10'
AND srvoptions @> array['batch_size=10'];
 count 
-------
     1
(1 row)

ALTER SERVER batch10 OPTIONS( SET batch_size '20' );
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'batch10'
AND srvoptions @> array['batch_size=10'];
 count 
-------
     0
(1 row)

SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'batch10'
AND srvoptions @> array['batch_size=20'];
 count 
-------
     1
(1 row)

CREATE FOREIGN TABLE table30 ( x number(38,0) ) SERVER batch10 OPTIONS ( batch_size '30' );
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30'::regclass
AND ftoptions @> array['batch_size=30'];
 count 
-------
     1
(1 row)

ALTER FOREIGN TABLE table30 OPTIONS ( SET batch_size '40');
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30'::regclass
AND ftoptions @> array['batch_size=30'];
 count 
-------
     0
(1 row)

SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30'::regclass
AND ftoptions @> array['batch_size=40'];
 count 
-------
     1
(1 row)

ROLLBACK;
CREATE TABLE batch_table ( x number(38,0) );
CREATE FOREIGN TABLE ftable ( x number(38,0) ) SERVER loopback OPTIONS ( table_name 'batch_table', batch_size '10' );
EXPLAIN (VERBOSE, COSTS OFF) INSERT INTO ftable SELECT * FROM generate_series(1, 10) i;
                         QUERY PLAN                          
-------------------------------------------------------------
 Insert on public.ftable
   Remote SQL: INSERT INTO public.batch_table(x) VALUES ($1)
   Batch Size: 10
   ->  Function Scan on pg_catalog.generate_series i
         Output: i.i
         Function Call: generate_series(1, 10)
(6 rows)

INSERT INTO ftable SELECT * FROM generate_series(1, 10) i;
INSERT INTO ftable SELECT * FROM generate_series(11, 31) i;
INSERT INTO ftable VALUES (32);
INSERT INTO ftable VALUES (33), (34);
SELECT COUNT(*) FROM ftable;
 count 
-------
    34
(1 row)

TRUNCATE batch_table;
DROP FOREIGN TABLE ftable;
-- try if large batches exceed max number of bind parameters
CREATE FOREIGN TABLE ftable ( x number(38,0) ) SERVER loopback OPTIONS ( table_name 'batch_table', batch_size '100000' );
INSERT INTO ftable SELECT * FROM generate_series(1, 70000) i;
SELECT COUNT(*) FROM ftable;
 count 
-------
 70000
(1 row)

TRUNCATE batch_table;
DROP FOREIGN TABLE ftable;
-- Disable batch insert
CREATE FOREIGN TABLE ftable ( x number(38,0) ) SERVER loopback OPTIONS ( table_name 'batch_table', batch_size '1' );
EXPLAIN (VERBOSE, COSTS OFF) INSERT INTO ftable VALUES (1), (2);
                         QUERY PLAN                          
-------------------------------------------------------------
 Insert on public.ftable
   Remote SQL: INSERT INTO public.batch_table(x) VALUES ($1)
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1
(5 rows)

INSERT INTO ftable VALUES (1), (2);
SELECT COUNT(*) FROM ftable;
 count 
-------
     2
(1 row)

-- Disable batch inserting into foreign tables with BEFORE ROW INSERT triggers
-- even if the batch_size option is enabled.
ALTER FOREIGN TABLE ftable OPTIONS ( SET batch_size '10' );
CREATE TRIGGER trig_row_before BEFORE INSERT ON ftable
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
EXPLAIN (VERBOSE, COSTS OFF) INSERT INTO ftable VALUES (3), (4);
                         QUERY PLAN                          
-------------------------------------------------------------
 Insert on public.ftable
   Remote SQL: INSERT INTO public.batch_table(x) VALUES ($1)
   Batch Size: 1
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1
(5 rows)

INSERT INTO ftable VALUES (3), (4);
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON ftable
NOTICE:  NEW: (3)
NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON ftable
NOTICE:  NEW: (4)
SELECT COUNT(*) FROM ftable;
 count 
-------
     4
(1 row)

-- Clean up
DROP TRIGGER trig_row_before ON ftable;
DROP FOREIGN TABLE ftable;
DROP TABLE batch_table;
-- Use partitioning
CREATE TABLE batch_table ( x number(38,0) ) PARTITION BY HASH (x);
CREATE TABLE batch_table_p0 (LIKE batch_table);
CREATE FOREIGN TABLE batch_table_p0f
	PARTITION OF batch_table
	FOR VALUES WITH (MODULUS 3, REMAINDER 0)
	SERVER loopback
	OPTIONS (table_name 'batch_table_p0', batch_size '10');
CREATE TABLE batch_table_p1 (LIKE batch_table);
CREATE FOREIGN TABLE batch_table_p1f
	PARTITION OF batch_table
	FOR VALUES WITH (MODULUS 3, REMAINDER 1)
	SERVER loopback
	OPTIONS (table_name 'batch_table_p1', batch_size '1');
CREATE TABLE batch_table_p2
	PARTITION OF batch_table
	FOR VALUES WITH (MODULUS 3, REMAINDER 2);
INSERT INTO batch_table SELECT * FROM generate_series(1, 66) i;
SELECT COUNT(*) FROM batch_table;
 count 
-------
    66
(1 row)

-- Clean up
DROP TABLE batch_table;
DROP TABLE batch_table_p0;
DROP TABLE batch_table_p1;
-- Check that batched mode also works for some inserts made during
-- cross-partition updates
CREATE TABLE batch_cp_upd_test (a int) PARTITION BY LIST (a);
CREATE TABLE batch_cp_upd_test1 (LIKE batch_cp_upd_test);
CREATE FOREIGN TABLE batch_cp_upd_test1_f
	PARTITION OF batch_cp_upd_test
	FOR VALUES IN (1)
	SERVER loopback
	OPTIONS (table_name 'batch_cp_upd_test1', batch_size '10');
CREATE TABLE batch_cp_upd_test2 PARTITION OF batch_cp_upd_test
	FOR VALUES IN (2);
CREATE TABLE batch_cp_upd_test3 (LIKE batch_cp_upd_test);
CREATE FOREIGN TABLE batch_cp_upd_test3_f
	PARTITION OF batch_cp_upd_test
	FOR VALUES IN (3)
	SERVER loopback
	OPTIONS (table_name 'batch_cp_upd_test3', batch_size '1');
-- Create statement triggers on remote tables that "log" any INSERTs
-- performed on them.
CREATE TABLE cmdlog (cmd varchar2(1024));
CREATE FUNCTION log_stmt() RETURNS TRIGGER LANGUAGE plpgsql AS $$
	BEGIN INSERT INTO public.cmdlog VALUES (TG_OP || ' on ' || TG_RELNAME); RETURN NULL; END;
$$;
/
CREATE TRIGGER stmt_trig AFTER INSERT ON batch_cp_upd_test1
	FOR EACH STATEMENT EXECUTE FUNCTION log_stmt();
CREATE TRIGGER stmt_trig AFTER INSERT ON batch_cp_upd_test3
	FOR EACH STATEMENT EXECUTE FUNCTION log_stmt();
-- This update moves rows from the local partition 'batch_cp_upd_test2' to the
-- foreign partition 'batch_cp_upd_test1', one that has insert batching
-- enabled, so a single INSERT for both rows.
INSERT INTO batch_cp_upd_test VALUES (2), (2);
UPDATE batch_cp_upd_test t SET a = 1 FROM (VALUES (1), (2)) s(a) WHERE t.a = s.a AND s.a = 2;
-- This one moves rows from the local partition 'batch_cp_upd_test2' to the
-- foreign partition 'batch_cp_upd_test2', one that has insert batching
-- disabled, so separate INSERTs for the two rows.
INSERT INTO batch_cp_upd_test VALUES (2), (2);
UPDATE batch_cp_upd_test t SET a = 3 FROM (VALUES (1), (2)) s(a) WHERE t.a = s.a AND s.a = 2;
SELECT tableoid::regclass, * FROM batch_cp_upd_test ORDER BY 1;
       tableoid       | a 
----------------------+---
 batch_cp_upd_test1_f | 1
 batch_cp_upd_test1_f | 1
 batch_cp_upd_test3_f | 3
 batch_cp_upd_test3_f | 3
(4 rows)

-- Should see 1 INSERT on batch_cp_upd_test1 and 2 on batch_cp_upd_test3 as
-- described above.
SELECT * FROM cmdlog ORDER BY 1;
             cmd              
------------------------------
 INSERT on batch_cp_upd_test1
 INSERT on batch_cp_upd_test3
 INSERT on batch_cp_upd_test3
(3 rows)

-- Clean up
DROP TABLE batch_cp_upd_test;
DROP TABLE batch_cp_upd_test1;
DROP TABLE batch_cp_upd_test3;
DROP TABLE cmdlog;
DROP FUNCTION log_stmt();
-- Use partitioning
ALTER SERVER loopback OPTIONS (ADD batch_size '10');
CREATE TABLE batch_table ( x number(38,0), field1 varchar2(1024), field2 varchar2(1024)) PARTITION BY HASH (x);
CREATE TABLE batch_table_p0 (LIKE batch_table);
ALTER TABLE batch_table_p0 ADD CONSTRAINT p0_pkey PRIMARY KEY (x);
CREATE FOREIGN TABLE batch_table_p0f
	PARTITION OF batch_table
	FOR VALUES WITH (MODULUS 2, REMAINDER 0)
	SERVER loopback
	OPTIONS (table_name 'batch_table_p0');
CREATE TABLE batch_table_p1 (LIKE batch_table);
ALTER TABLE batch_table_p1 ADD CONSTRAINT p1_pkey PRIMARY KEY (x);
CREATE FOREIGN TABLE batch_table_p1f
	PARTITION OF batch_table
	FOR VALUES WITH (MODULUS 2, REMAINDER 1)
	SERVER loopback
	OPTIONS (table_name 'batch_table_p1');
INSERT INTO batch_table SELECT i, 'test'||i, 'test'|| i FROM generate_series(1, 50) i;
SELECT COUNT(*) FROM batch_table;
 count 
-------
    50
(1 row)

SELECT * FROM batch_table ORDER BY x;
 x  | field1 | field2 
----+--------+--------
 1  | test1  | test1
 2  | test2  | test2
 3  | test3  | test3
 4  | test4  | test4
 5  | test5  | test5
 6  | test6  | test6
 7  | test7  | test7
 8  | test8  | test8
 9  | test9  | test9
 10 | test10 | test10
 11 | test11 | test11
 12 | test12 | test12
 13 | test13 | test13
 14 | test14 | test14
 15 | test15 | test15
 16 | test16 | test16
 17 | test17 | test17
 18 | test18 | test18
 19 | test19 | test19
 20 | test20 | test20
 21 | test21 | test21
 22 | test22 | test22
 23 | test23 | test23
 24 | test24 | test24
 25 | test25 | test25
 26 | test26 | test26
 27 | test27 | test27
 28 | test28 | test28
 29 | test29 | test29
 30 | test30 | test30
 31 | test31 | test31
 32 | test32 | test32
 33 | test33 | test33
 34 | test34 | test34
 35 | test35 | test35
 36 | test36 | test36
 37 | test37 | test37
 38 | test38 | test38
 39 | test39 | test39
 40 | test40 | test40
 41 | test41 | test41
 42 | test42 | test42
 43 | test43 | test43
 44 | test44 | test44
 45 | test45 | test45
 46 | test46 | test46
 47 | test47 | test47
 48 | test48 | test48
 49 | test49 | test49
 50 | test50 | test50
(50 rows)

-- Clean up
DROP TABLE batch_table;
DROP TABLE batch_table_p0;
DROP TABLE batch_table_p1;
ALTER SERVER loopback OPTIONS (DROP batch_size);
-- Test that pending inserts are handled properly when needed
CREATE TABLE batch_table (a varchar2(1024), b number(38,0));
CREATE FOREIGN TABLE ftable (a varchar2(1024), b number(38,0))
	SERVER loopback
	OPTIONS (table_name 'batch_table', batch_size '2');
CREATE TABLE ltable (a varchar2(1024), b number(38,0));
CREATE FUNCTION ftable_rowcount_trigf() RETURNS trigger LANGUAGE plpgsql AS
$$
begin
	raise notice '%: there are % rows in ftable',
		TG_NAME, (SELECT count(*) FROM ftable);
	if TG_OP = 'DELETE' then
		return OLD;
	else
		return NEW;
	end if;
end;
$$;
/
CREATE TRIGGER ftable_rowcount_trigger
BEFORE INSERT OR UPDATE OR DELETE ON ltable
FOR EACH ROW EXECUTE PROCEDURE ftable_rowcount_trigf();
WITH t AS (
	INSERT INTO ltable VALUES ('AAA', 42), ('BBB', 42) RETURNING *
)
INSERT INTO ftable SELECT * FROM t;
NOTICE:  ftable_rowcount_trigger: there are 0 rows in ftable
NOTICE:  ftable_rowcount_trigger: there are 1 rows in ftable
SELECT * FROM ltable;
  a  | b  
-----+----
 AAA | 42
 BBB | 42
(2 rows)

SELECT * FROM ftable;
  a  | b  
-----+----
 AAA | 42
 BBB | 42
(2 rows)

DELETE FROM ftable;
WITH t AS (
	UPDATE ltable SET b = b + 100 RETURNING *
)
INSERT INTO ftable SELECT * FROM t;
NOTICE:  ftable_rowcount_trigger: there are 0 rows in ftable
NOTICE:  ftable_rowcount_trigger: there are 1 rows in ftable
SELECT * FROM ltable;
  a  |  b  
-----+-----
 AAA | 142
 BBB | 142
(2 rows)

SELECT * FROM ftable;
  a  |  b  
-----+-----
 AAA | 142
 BBB | 142
(2 rows)

DELETE FROM ftable;
WITH t AS (
	DELETE FROM ltable RETURNING *
)
INSERT INTO ftable SELECT * FROM t;
NOTICE:  ftable_rowcount_trigger: there are 0 rows in ftable
NOTICE:  ftable_rowcount_trigger: there are 1 rows in ftable
SELECT * FROM ltable;
 a | b 
---+---
(0 rows)

SELECT * FROM ftable;
  a  |  b  
-----+-----
 AAA | 142
 BBB | 142
(2 rows)

DELETE FROM ftable;
-- Clean up
DROP FOREIGN TABLE ftable;
DROP TABLE batch_table;
DROP TRIGGER ftable_rowcount_trigger ON ltable;
DROP TABLE ltable;
CREATE TABLE parent (a varchar2(1024), b number(38,0)) PARTITION BY LIST (a);
CREATE TABLE batch_table (a varchar2(1024), b number(38,0));
CREATE FOREIGN TABLE ftable
	PARTITION OF parent
	FOR VALUES IN ('AAA')
	SERVER loopback
	OPTIONS (table_name 'batch_table', batch_size '2');
CREATE TABLE ltable
	PARTITION OF parent
	FOR VALUES IN ('BBB');
CREATE TRIGGER ftable_rowcount_trigger
BEFORE INSERT ON ltable
FOR EACH ROW EXECUTE PROCEDURE ftable_rowcount_trigf();
INSERT INTO parent VALUES ('AAA', 42), ('BBB', 42), ('AAA', 42), ('BBB', 42);
NOTICE:  ftable_rowcount_trigger: there are 1 rows in ftable
NOTICE:  ftable_rowcount_trigger: there are 2 rows in ftable
SELECT tableoid::regclass, * FROM parent;
 tableoid |  a  | b  
----------+-----+----
 ftable   | AAA | 42
 ftable   | AAA | 42
 ltable   | BBB | 42
 ltable   | BBB | 42
(4 rows)

-- Clean up
DROP FOREIGN TABLE ftable;
DROP TABLE batch_table;
DROP TRIGGER ftable_rowcount_trigger ON ltable;
DROP TABLE ltable;
DROP TABLE parent;
DROP FUNCTION ftable_rowcount_trigf;
-- ===================================================================
-- test asynchronous execution
-- ===================================================================
ALTER SERVER loopback OPTIONS (DROP extensions);
ALTER SERVER loopback OPTIONS (ADD async_capable 'true');
ALTER SERVER loopback2 OPTIONS (ADD async_capable 'true');
CREATE TABLE async_pt (a number(38,0), b number(38,0), c varchar2(1024)) PARTITION BY RANGE (a);
CREATE TABLE base_tbl1 (a number(38,0), b number(38,0), c varchar2(1024));
CREATE TABLE base_tbl2 (a number(38,0), b number(38,0), c varchar2(1024));
CREATE FOREIGN TABLE async_p1 PARTITION OF async_pt FOR VALUES FROM (1000) TO (2000)
  SERVER loopback OPTIONS (table_name 'base_tbl1');
CREATE FOREIGN TABLE async_p2 PARTITION OF async_pt FOR VALUES FROM (2000) TO (3000)
  SERVER loopback2 OPTIONS (table_name 'base_tbl2');
INSERT INTO async_p1 SELECT 1000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
INSERT INTO async_p2 SELECT 2000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
ANALYZE async_pt;
-- simple queries
CREATE TABLE result_tbl (a number(38,0), b number(38,0), c varchar2(1024));
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b % 100 = 0;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Insert on public.result_tbl
   ->  Append
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
               Filter: ((async_pt_1.b % '100'::number) = '0'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Async Foreign Scan on public.async_p2 async_pt_2
               Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
               Filter: ((async_pt_2.b % '100'::number) = '0'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
(10 rows)

INSERT INTO result_tbl SELECT * FROM async_pt WHERE b % 100 = 0;
SELECT * FROM result_tbl ORDER BY a;
  a   |  b  |  c   
------+-----+------
 1000 | 0   | 0000
 1100 | 100 | 0100
 1200 | 200 | 0200
 1300 | 300 | 0300
 1400 | 400 | 0400
 1500 | 500 | 0500
 1600 | 600 | 0600
 1700 | 700 | 0700
 1800 | 800 | 0800
 1900 | 900 | 0900
 2000 | 0   | 0000
 2100 | 100 | 0100
 2200 | 200 | 0200
 2300 | 300 | 0300
 2400 | 400 | 0400
 2500 | 500 | 0500
 2600 | 600 | 0600
 2700 | 700 | 0700
 2800 | 800 | 0800
 2900 | 900 | 0900
(20 rows)

DELETE FROM result_tbl;
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
                           QUERY PLAN                           
----------------------------------------------------------------
 Insert on public.result_tbl
   ->  Append
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
               Filter: (async_pt_1.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Async Foreign Scan on public.async_p2 async_pt_2
               Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
               Filter: (async_pt_2.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
(10 rows)

INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
SELECT * FROM result_tbl ORDER BY a;
  a   |  b  |  c   
------+-----+------
 1505 | 505 | 0505
 2505 | 505 | 0505
(2 rows)

DELETE FROM result_tbl;
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl SELECT a, b, 'AAA' || c FROM async_pt WHERE b === 505;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Insert on public.result_tbl
   ->  Append
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.a, async_pt_1.b, ('AAA'::text || (async_pt_1.c)::text)
               Filter: (async_pt_1.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Async Foreign Scan on public.async_p2 async_pt_2
               Output: async_pt_2.a, async_pt_2.b, ('AAA'::text || (async_pt_2.c)::text)
               Filter: (async_pt_2.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
(10 rows)

INSERT INTO result_tbl SELECT a, b, 'AAA' || c FROM async_pt WHERE b === 505;
SELECT * FROM result_tbl ORDER BY a;
  a   |  b  |    c    
------+-----+---------
 1505 | 505 | AAA0505
 2505 | 505 | AAA0505
(2 rows)

DELETE FROM result_tbl;
-- Check case where multiple partitions use the same connection
CREATE TABLE base_tbl3 (a number(38,0), b number(38,0), c varchar2(1024));
CREATE FOREIGN TABLE async_p3 PARTITION OF async_pt FOR VALUES FROM (3000) TO (4000)
  SERVER loopback2 OPTIONS (table_name 'base_tbl3');
INSERT INTO async_p3 SELECT 3000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
ANALYZE async_pt;
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
                           QUERY PLAN                           
----------------------------------------------------------------
 Insert on public.result_tbl
   ->  Append
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
               Filter: (async_pt_1.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Async Foreign Scan on public.async_p2 async_pt_2
               Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
               Filter: (async_pt_2.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
         ->  Async Foreign Scan on public.async_p3 async_pt_3
               Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
               Filter: (async_pt_3.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl3
(14 rows)

INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
SELECT * FROM result_tbl ORDER BY a;
  a   |  b  |  c   
------+-----+------
 1505 | 505 | 0505
 2505 | 505 | 0505
 3505 | 505 | 0505
(3 rows)

DELETE FROM result_tbl;
DROP FOREIGN TABLE async_p3;
DROP TABLE base_tbl3;
-- Check case where the partitioned table has local/remote partitions
CREATE TABLE async_p3 PARTITION OF async_pt FOR VALUES FROM (3000) TO (4000);
INSERT INTO async_p3 SELECT 3000 + i, i, to_char(i, 'FM0000') FROM generate_series(0, 999, 5) i;
ANALYZE async_pt;
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
                           QUERY PLAN                           
----------------------------------------------------------------
 Insert on public.result_tbl
   ->  Append
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
               Filter: (async_pt_1.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Async Foreign Scan on public.async_p2 async_pt_2
               Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
               Filter: (async_pt_2.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
         ->  Seq Scan on public.async_p3 async_pt_3
               Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
               Filter: (async_pt_3.b === '505'::number)
(13 rows)

INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
SELECT * FROM result_tbl ORDER BY a;
  a   |  b  |  c   
------+-----+------
 1505 | 505 | 0505
 2505 | 505 | 0505
 3505 | 505 | 0505
(3 rows)

DELETE FROM result_tbl;
-- partitionwise joins
SET enable_partitionwise_join TO true;
CREATE TABLE join_tbl (a1 number(38,0), b1 number(38,0), c1 varchar2(1024), a2 number(38,0), b2 number(38,0), c2 varchar2(1024));
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO join_tbl SELECT * FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Insert on public.join_tbl
   ->  Append
         ->  Nested Loop
               Output: t1_1.a, t1_1.b, t1_1.c, t2_1.a, t2_1.b, t2_1.c
               Join Filter: ((t1_1.a = t2_1.a) AND (t1_1.b = t2_1.b))
               ->  Foreign Scan on public.async_p1 t1_1
                     Output: t1_1.a, t1_1.b, t1_1.c
                     Filter: ((t1_1.b % '100'::number) = '0'::number)
                     Remote SQL: SELECT a, b, c FROM public.base_tbl1
               ->  Foreign Scan on public.async_p1 t2_1
                     Output: t2_1.a, t2_1.b, t2_1.c
                     Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Nested Loop
               Output: t1_2.a, t1_2.b, t1_2.c, t2_2.a, t2_2.b, t2_2.c
               Join Filter: ((t1_2.a = t2_2.a) AND (t1_2.b = t2_2.b))
               ->  Foreign Scan on public.async_p2 t1_2
                     Output: t1_2.a, t1_2.b, t1_2.c
                     Filter: ((t1_2.b % '100'::number) = '0'::number)
                     Remote SQL: SELECT a, b, c FROM public.base_tbl2
               ->  Foreign Scan on public.async_p2 t2_2
                     Output: t2_2.a, t2_2.b, t2_2.c
                     Remote SQL: SELECT a, b, c FROM public.base_tbl2
         ->  Hash Join
               Output: t1_3.a, t1_3.b, t1_3.c, t2_3.a, t2_3.b, t2_3.c
               Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.b = t1_3.b))
               ->  Seq Scan on public.async_p3 t2_3
                     Output: t2_3.a, t2_3.b, t2_3.c
               ->  Hash
                     Output: t1_3.a, t1_3.b, t1_3.c
                     ->  Seq Scan on public.async_p3 t1_3
                           Output: t1_3.a, t1_3.b, t1_3.c
                           Filter: ((t1_3.b % '100'::number) = '0'::number)
(32 rows)

INSERT INTO join_tbl SELECT * FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
SELECT * FROM join_tbl ORDER BY a1;
  a1  | b1  |  c1  |  a2  | b2  |  c2  
------+-----+------+------+-----+------
 1000 | 0   | 0000 | 1000 | 0   | 0000
 1100 | 100 | 0100 | 1100 | 100 | 0100
 1200 | 200 | 0200 | 1200 | 200 | 0200
 1300 | 300 | 0300 | 1300 | 300 | 0300
 1400 | 400 | 0400 | 1400 | 400 | 0400
 1500 | 500 | 0500 | 1500 | 500 | 0500
 1600 | 600 | 0600 | 1600 | 600 | 0600
 1700 | 700 | 0700 | 1700 | 700 | 0700
 1800 | 800 | 0800 | 1800 | 800 | 0800
 1900 | 900 | 0900 | 1900 | 900 | 0900
 2000 | 0   | 0000 | 2000 | 0   | 0000
 2100 | 100 | 0100 | 2100 | 100 | 0100
 2200 | 200 | 0200 | 2200 | 200 | 0200
 2300 | 300 | 0300 | 2300 | 300 | 0300
 2400 | 400 | 0400 | 2400 | 400 | 0400
 2500 | 500 | 0500 | 2500 | 500 | 0500
 2600 | 600 | 0600 | 2600 | 600 | 0600
 2700 | 700 | 0700 | 2700 | 700 | 0700
 2800 | 800 | 0800 | 2800 | 800 | 0800
 2900 | 900 | 0900 | 2900 | 900 | 0900
 3000 | 0   | 0000 | 3000 | 0   | 0000
 3100 | 100 | 0100 | 3100 | 100 | 0100
 3200 | 200 | 0200 | 3200 | 200 | 0200
 3300 | 300 | 0300 | 3300 | 300 | 0300
 3400 | 400 | 0400 | 3400 | 400 | 0400
 3500 | 500 | 0500 | 3500 | 500 | 0500
 3600 | 600 | 0600 | 3600 | 600 | 0600
 3700 | 700 | 0700 | 3700 | 700 | 0700
 3800 | 800 | 0800 | 3800 | 800 | 0800
 3900 | 900 | 0900 | 3900 | 900 | 0900
(30 rows)

DELETE FROM join_tbl;
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO join_tbl SELECT t1.a, t1.b, 'AAA' || t1.c, t2.a, t2.b, 'AAA' || t2.c FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Insert on public.join_tbl
   ->  Append
         ->  Nested Loop
               Output: t1_1.a, t1_1.b, ('AAA'::text || (t1_1.c)::text), t2_1.a, t2_1.b, ('AAA'::text || (t2_1.c)::text)
               Join Filter: ((t1_1.a = t2_1.a) AND (t1_1.b = t2_1.b))
               ->  Foreign Scan on public.async_p1 t1_1
                     Output: t1_1.a, t1_1.b, t1_1.c
                     Filter: ((t1_1.b % '100'::number) = '0'::number)
                     Remote SQL: SELECT a, b, c FROM public.base_tbl1
               ->  Foreign Scan on public.async_p1 t2_1
                     Output: t2_1.a, t2_1.b, t2_1.c
                     Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Nested Loop
               Output: t1_2.a, t1_2.b, ('AAA'::text || (t1_2.c)::text), t2_2.a, t2_2.b, ('AAA'::text || (t2_2.c)::text)
               Join Filter: ((t1_2.a = t2_2.a) AND (t1_2.b = t2_2.b))
               ->  Foreign Scan on public.async_p2 t1_2
                     Output: t1_2.a, t1_2.b, t1_2.c
                     Filter: ((t1_2.b % '100'::number) = '0'::number)
                     Remote SQL: SELECT a, b, c FROM public.base_tbl2
               ->  Foreign Scan on public.async_p2 t2_2
                     Output: t2_2.a, t2_2.b, t2_2.c
                     Remote SQL: SELECT a, b, c FROM public.base_tbl2
         ->  Hash Join
               Output: t1_3.a, t1_3.b, ('AAA'::text || (t1_3.c)::text), t2_3.a, t2_3.b, ('AAA'::text || (t2_3.c)::text)
               Hash Cond: ((t2_3.a = t1_3.a) AND (t2_3.b = t1_3.b))
               ->  Seq Scan on public.async_p3 t2_3
                     Output: t2_3.a, t2_3.b, t2_3.c
               ->  Hash
                     Output: t1_3.a, t1_3.b, t1_3.c
                     ->  Seq Scan on public.async_p3 t1_3
                           Output: t1_3.a, t1_3.b, t1_3.c
                           Filter: ((t1_3.b % '100'::number) = '0'::number)
(32 rows)

INSERT INTO join_tbl SELECT t1.a, t1.b, 'AAA' || t1.c, t2.a, t2.b, 'AAA' || t2.c FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
SELECT * FROM join_tbl ORDER BY a1;
  a1  | b1  |   c1    |  a2  | b2  |   c2    
------+-----+---------+------+-----+---------
 1000 | 0   | AAA0000 | 1000 | 0   | AAA0000
 1100 | 100 | AAA0100 | 1100 | 100 | AAA0100
 1200 | 200 | AAA0200 | 1200 | 200 | AAA0200
 1300 | 300 | AAA0300 | 1300 | 300 | AAA0300
 1400 | 400 | AAA0400 | 1400 | 400 | AAA0400
 1500 | 500 | AAA0500 | 1500 | 500 | AAA0500
 1600 | 600 | AAA0600 | 1600 | 600 | AAA0600
 1700 | 700 | AAA0700 | 1700 | 700 | AAA0700
 1800 | 800 | AAA0800 | 1800 | 800 | AAA0800
 1900 | 900 | AAA0900 | 1900 | 900 | AAA0900
 2000 | 0   | AAA0000 | 2000 | 0   | AAA0000
 2100 | 100 | AAA0100 | 2100 | 100 | AAA0100
 2200 | 200 | AAA0200 | 2200 | 200 | AAA0200
 2300 | 300 | AAA0300 | 2300 | 300 | AAA0300
 2400 | 400 | AAA0400 | 2400 | 400 | AAA0400
 2500 | 500 | AAA0500 | 2500 | 500 | AAA0500
 2600 | 600 | AAA0600 | 2600 | 600 | AAA0600
 2700 | 700 | AAA0700 | 2700 | 700 | AAA0700
 2800 | 800 | AAA0800 | 2800 | 800 | AAA0800
 2900 | 900 | AAA0900 | 2900 | 900 | AAA0900
 3000 | 0   | AAA0000 | 3000 | 0   | AAA0000
 3100 | 100 | AAA0100 | 3100 | 100 | AAA0100
 3200 | 200 | AAA0200 | 3200 | 200 | AAA0200
 3300 | 300 | AAA0300 | 3300 | 300 | AAA0300
 3400 | 400 | AAA0400 | 3400 | 400 | AAA0400
 3500 | 500 | AAA0500 | 3500 | 500 | AAA0500
 3600 | 600 | AAA0600 | 3600 | 600 | AAA0600
 3700 | 700 | AAA0700 | 3700 | 700 | AAA0700
 3800 | 800 | AAA0800 | 3800 | 800 | AAA0800
 3900 | 900 | AAA0900 | 3900 | 900 | AAA0900
(30 rows)

DELETE FROM join_tbl;
RESET enable_partitionwise_join;
-- Test rescan of an async Append node with do_exec_prune=false
SET enable_hashjoin TO false;
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO join_tbl SELECT * FROM async_p1 t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Insert on public.join_tbl
   ->  Nested Loop
         Output: t1.a, t1.b, t1.c, t2.a, t2.b, t2.c
         Join Filter: ((t1.a = t2.a) AND (t1.b = t2.b))
         ->  Foreign Scan on public.async_p1 t1
               Output: t1.a, t1.b, t1.c
               Filter: ((t1.b % '100'::number) = '0'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Append
               ->  Async Foreign Scan on public.async_p1 t2_1
                     Output: t2_1.a, t2_1.b, t2_1.c
                     Remote SQL: SELECT a, b, c FROM public.base_tbl1
               ->  Async Foreign Scan on public.async_p2 t2_2
                     Output: t2_2.a, t2_2.b, t2_2.c
                     Remote SQL: SELECT a, b, c FROM public.base_tbl2
               ->  Seq Scan on public.async_p3 t2_3
                     Output: t2_3.a, t2_3.b, t2_3.c
(17 rows)

INSERT INTO join_tbl SELECT * FROM async_p1 t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
SELECT * FROM join_tbl ORDER BY a1;
  a1  | b1  |  c1  |  a2  | b2  |  c2  
------+-----+------+------+-----+------
 1000 | 0   | 0000 | 1000 | 0   | 0000
 1100 | 100 | 0100 | 1100 | 100 | 0100
 1200 | 200 | 0200 | 1200 | 200 | 0200
 1300 | 300 | 0300 | 1300 | 300 | 0300
 1400 | 400 | 0400 | 1400 | 400 | 0400
 1500 | 500 | 0500 | 1500 | 500 | 0500
 1600 | 600 | 0600 | 1600 | 600 | 0600
 1700 | 700 | 0700 | 1700 | 700 | 0700
 1800 | 800 | 0800 | 1800 | 800 | 0800
 1900 | 900 | 0900 | 1900 | 900 | 0900
(10 rows)

DELETE FROM join_tbl;
RESET enable_hashjoin;
-- Test interaction of async execution with plan-time partition pruning
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM async_pt WHERE a < 3000;
                        QUERY PLAN                        
----------------------------------------------------------
 Append
   ->  Async Foreign Scan on public.async_p1 async_pt_1
         Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
         Filter: (async_pt_1.a < '3000'::number)
         Remote SQL: SELECT a, b, c FROM public.base_tbl1
   ->  Async Foreign Scan on public.async_p2 async_pt_2
         Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
         Filter: (async_pt_2.a < '3000'::number)
         Remote SQL: SELECT a, b, c FROM public.base_tbl2
(9 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM async_pt WHERE a < 2000;
                     QUERY PLAN                     
----------------------------------------------------
 Foreign Scan on public.async_p1 async_pt
   Output: async_pt.a, async_pt.b, async_pt.c
   Filter: (async_pt.a < '2000'::number)
   Remote SQL: SELECT a, b, c FROM public.base_tbl1
(4 rows)

-- Test interaction of async execution with run-time partition pruning
SET plan_cache_mode TO force_generic_plan;
PREPARE async_pt_query (number(38,0), number(38,0)) AS
  INSERT INTO result_tbl SELECT * FROM async_pt WHERE a < $1 AND b === $2;
EXPLAIN (VERBOSE, COSTS OFF)
EXECUTE async_pt_query (3000, 505);
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Insert on public.result_tbl
   ->  Append
         Subplans Removed: 1
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
               Filter: ((async_pt_1.a < $1) AND (async_pt_1.b === $2))
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Async Foreign Scan on public.async_p2 async_pt_2
               Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
               Filter: ((async_pt_2.a < $1) AND (async_pt_2.b === $2))
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
(11 rows)

EXECUTE async_pt_query (3000, 505);
SELECT * FROM result_tbl ORDER BY a;
  a   |  b  |  c   
------+-----+------
 1505 | 505 | 0505
 2505 | 505 | 0505
(2 rows)

DELETE FROM result_tbl;
EXPLAIN (VERBOSE, COSTS OFF)
EXECUTE async_pt_query (2000, 505);
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Insert on public.result_tbl
   ->  Append
         Subplans Removed: 2
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
               Filter: ((async_pt_1.a < $1) AND (async_pt_1.b === $2))
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
(7 rows)

EXECUTE async_pt_query (2000, 505);
SELECT * FROM result_tbl ORDER BY a;
  a   |  b  |  c   
------+-----+------
 1505 | 505 | 0505
(1 row)

DELETE FROM result_tbl;
RESET plan_cache_mode;
CREATE TABLE local_tbl(a number(38,0), b number(38,0), c varchar2(1024));
INSERT INTO local_tbl VALUES (1505, 505, 'foo'), (2505, 505, 'bar');
ANALYZE local_tbl;
CREATE INDEX base_tbl1_idx ON base_tbl1 (a);
CREATE INDEX base_tbl2_idx ON base_tbl2 (a);
CREATE INDEX async_p3_idx ON async_p3 (a);
ANALYZE base_tbl1;
ANALYZE base_tbl2;
ANALYZE async_p3;
ALTER FOREIGN TABLE async_p1 OPTIONS (use_remote_estimate 'true');
ALTER FOREIGN TABLE async_p2 OPTIONS (use_remote_estimate 'true');
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Hash Join
   Output: local_tbl.a, local_tbl.b, local_tbl.c, async_pt.a, async_pt.b, async_pt.c
   Hash Cond: (async_pt.a = local_tbl.a)
   ->  Append
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Async Foreign Scan on public.async_p2 async_pt_2
               Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
         ->  Seq Scan on public.async_p3 async_pt_3
               Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
   ->  Hash
         Output: local_tbl.a, local_tbl.b, local_tbl.c
         ->  Seq Scan on public.local_tbl
               Output: local_tbl.a, local_tbl.b, local_tbl.c
               Filter: (local_tbl.c = 'bar'::varchar2)
(17 rows)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Hash Join (actual rows=1 loops=1)
   Hash Cond: (async_pt.a = local_tbl.a)
   ->  Append (actual rows=600 loops=1)
         ->  Async Foreign Scan on async_p1 async_pt_1 (actual rows=200 loops=1)
         ->  Async Foreign Scan on async_p2 async_pt_2 (actual rows=200 loops=1)
         ->  Seq Scan on async_p3 async_pt_3 (actual rows=200 loops=1)
   ->  Hash (actual rows=1 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 9kB
         ->  Seq Scan on local_tbl (actual rows=1 loops=1)
               Filter: (c = 'bar'::varchar2)
               Rows Removed by Filter: 1
(11 rows)

SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';
  a   |  b  |  c  |  a   |  b  |  c   
------+-----+-----+------+-----+------
 2505 | 505 | bar | 2505 | 505 | 0505
(1 row)

ALTER FOREIGN TABLE async_p1 OPTIONS (DROP use_remote_estimate);
ALTER FOREIGN TABLE async_p2 OPTIONS (DROP use_remote_estimate);
DROP TABLE local_tbl;
DROP INDEX base_tbl1_idx;
DROP INDEX base_tbl2_idx;
DROP INDEX async_p3_idx;
-- UNION queries
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl
(SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
UNION
(SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Insert on public.result_tbl
   ->  Subquery Scan on "*SELECT*"
         Output: "*SELECT*".a, "*SELECT*".b, "*SELECT*"."?column?"
         ->  HashAggregate
               Output: async_p1.a, async_p1.b, (('AAA'::text || (async_p1.c)::text))
               Group Key: async_p1.a, async_p1.b, (('AAA'::text || (async_p1.c)::text))
               ->  Append
                     ->  Limit
                           Output: async_p1.a, async_p1.b, (('AAA'::text || (async_p1.c)::text))
                           ->  Sort
                                 Output: async_p1.a, async_p1.b, (('AAA'::text || (async_p1.c)::text))
                                 Sort Key: async_p1.a
                                 ->  Foreign Scan on public.async_p1
                                       Output: async_p1.a, async_p1.b, ('AAA'::text || (async_p1.c)::text)
                                       Remote SQL: SELECT a, b, c FROM public.base_tbl1
                     ->  Async Foreign Scan on public.async_p2
                           Output: async_p2.a, async_p2.b, ('AAA'::text || (async_p2.c)::text)
                           Filter: (async_p2.b < '10'::number)
                           Remote SQL: SELECT a, b, c FROM public.base_tbl2
(19 rows)

INSERT INTO result_tbl
(SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
UNION
(SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);
SELECT * FROM result_tbl ORDER BY a;
  a   | b  |    c    
------+----+---------
 1000 | 0  | AAA0000
 1005 | 5  | AAA0005
 1010 | 10 | AAA0010
 1015 | 15 | AAA0015
 1020 | 20 | AAA0020
 1025 | 25 | AAA0025
 1030 | 30 | AAA0030
 1035 | 35 | AAA0035
 1040 | 40 | AAA0040
 1045 | 45 | AAA0045
 2000 | 0  | AAA0000
 2005 | 5  | AAA0005
(12 rows)

DELETE FROM result_tbl;
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO result_tbl
(SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
UNION ALL
(SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Insert on public.result_tbl
   ->  Result
         Output: async_p1.a, async_p1.b, (('AAA'::text || (async_p1.c)::text))
         ->  Append
               ->  Limit
                     Output: async_p1.a, async_p1.b, (('AAA'::text || (async_p1.c)::text))
                     ->  Sort
                           Output: async_p1.a, async_p1.b, (('AAA'::text || (async_p1.c)::text))
                           Sort Key: async_p1.a
                           ->  Foreign Scan on public.async_p1
                                 Output: async_p1.a, async_p1.b, ('AAA'::text || (async_p1.c)::text)
                                 Remote SQL: SELECT a, b, c FROM public.base_tbl1
               ->  Async Foreign Scan on public.async_p2
                     Output: async_p2.a, async_p2.b, ('AAA'::text || (async_p2.c)::text)
                     Filter: (async_p2.b < '10'::number)
                     Remote SQL: SELECT a, b, c FROM public.base_tbl2
(16 rows)

INSERT INTO result_tbl
(SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
UNION ALL
(SELECT a, b, 'AAA' || c FROM async_p2 WHERE b < 10);
SELECT * FROM result_tbl ORDER BY a;
  a   | b  |    c    
------+----+---------
 1000 | 0  | AAA0000
 1005 | 5  | AAA0005
 1010 | 10 | AAA0010
 1015 | 15 | AAA0015
 1020 | 20 | AAA0020
 1025 | 25 | AAA0025
 1030 | 30 | AAA0030
 1035 | 35 | AAA0035
 1040 | 40 | AAA0040
 1045 | 45 | AAA0045
 2000 | 0  | AAA0000
 2005 | 5  | AAA0005
(12 rows)

DELETE FROM result_tbl;
-- Disable async execution if we use gating Result nodes for pseudoconstant
-- quals
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM async_pt WHERE CURRENT_USER = SESSION_USER;
                           QUERY PLAN                           
----------------------------------------------------------------
 Append
   ->  Result
         Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
         One-Time Filter: (CURRENT_USER = SESSION_USER)
         ->  Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
   ->  Result
         Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
         One-Time Filter: (CURRENT_USER = SESSION_USER)
         ->  Foreign Scan on public.async_p2 async_pt_2
               Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
   ->  Result
         Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
         One-Time Filter: (CURRENT_USER = SESSION_USER)
         ->  Seq Scan on public.async_p3 async_pt_3
               Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
(18 rows)

EXPLAIN (VERBOSE, COSTS OFF)
(SELECT * FROM async_p1 WHERE CURRENT_USER = SESSION_USER)
UNION ALL
(SELECT * FROM async_p2 WHERE CURRENT_USER = SESSION_USER);
                           QUERY PLAN                           
----------------------------------------------------------------
 Append
   ->  Result
         Output: async_p1.a, async_p1.b, async_p1.c
         One-Time Filter: (CURRENT_USER = SESSION_USER)
         ->  Foreign Scan on public.async_p1
               Output: async_p1.a, async_p1.b, async_p1.c
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
   ->  Result
         Output: async_p2.a, async_p2.b, async_p2.c
         One-Time Filter: (CURRENT_USER = SESSION_USER)
         ->  Foreign Scan on public.async_p2
               Output: async_p2.a, async_p2.b, async_p2.c
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
(13 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ((SELECT * FROM async_p1 WHERE b < 10) UNION ALL (SELECT * FROM async_p2 WHERE b < 10)) s WHERE CURRENT_USER = SESSION_USER;
                           QUERY PLAN                           
----------------------------------------------------------------
 Append
   ->  Result
         Output: async_p1.a, async_p1.b, async_p1.c
         One-Time Filter: (CURRENT_USER = SESSION_USER)
         ->  Foreign Scan on public.async_p1
               Output: async_p1.a, async_p1.b, async_p1.c
               Filter: (async_p1.b < '10'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
   ->  Result
         Output: async_p2.a, async_p2.b, async_p2.c
         One-Time Filter: (CURRENT_USER = SESSION_USER)
         ->  Foreign Scan on public.async_p2
               Output: async_p2.a, async_p2.b, async_p2.c
               Filter: (async_p2.b < '10'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
(15 rows)

-- Test that pending requests are processed properly
SET enable_mergejoin TO false;
SET enable_hashjoin TO false;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM async_pt t1, async_p2 t2 WHERE t1.a = t2.a AND t1.b === 505;
                           QUERY PLAN                           
----------------------------------------------------------------
 Nested Loop
   Output: t1.a, t1.b, t1.c, t2.a, t2.b, t2.c
   Join Filter: (t1.a = t2.a)
   ->  Append
         ->  Async Foreign Scan on public.async_p1 t1_1
               Output: t1_1.a, t1_1.b, t1_1.c
               Filter: (t1_1.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Async Foreign Scan on public.async_p2 t1_2
               Output: t1_2.a, t1_2.b, t1_2.c
               Filter: (t1_2.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
         ->  Seq Scan on public.async_p3 t1_3
               Output: t1_3.a, t1_3.b, t1_3.c
               Filter: (t1_3.b === '505'::number)
   ->  Materialize
         Output: t2.a, t2.b, t2.c
         ->  Foreign Scan on public.async_p2 t2
               Output: t2.a, t2.b, t2.c
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
(20 rows)

SELECT * FROM async_pt t1, async_p2 t2 WHERE t1.a = t2.a AND t1.b === 505;
  a   |  b  |  c   |  a   |  b  |  c   
------+-----+------+------+-----+------
 2505 | 505 | 0505 | 2505 | 505 | 0505
(1 row)

CREATE TABLE local_tbl (a number(38,0), b number(38,0), c varchar2(1024));
INSERT INTO local_tbl VALUES (1505, 505, 'foo');
ANALYZE local_tbl;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Nested Loop Left Join
   Output: t1.a, t1.b, t1.c, async_pt.a, async_pt.b, async_pt.c, ($0)
   Join Filter: (t1.a = async_pt.a)
   InitPlan 1 (returns $0)
     ->  Aggregate
           Output: count(*)
           ->  Append
                 ->  Async Foreign Scan on public.async_p1 async_pt_4
                       Filter: (async_pt_4.a < '3000'::number)
                       Remote SQL: SELECT a FROM public.base_tbl1
                 ->  Async Foreign Scan on public.async_p2 async_pt_5
                       Filter: (async_pt_5.a < '3000'::number)
                       Remote SQL: SELECT a FROM public.base_tbl2
   ->  Seq Scan on public.local_tbl t1
         Output: t1.a, t1.b, t1.c
   ->  Append
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.a, async_pt_1.b, async_pt_1.c, $0
               Filter: (async_pt_1.a < '3000'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Async Foreign Scan on public.async_p2 async_pt_2
               Output: async_pt_2.a, async_pt_2.b, async_pt_2.c, $0
               Filter: (async_pt_2.a < '3000'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
(24 rows)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Nested Loop Left Join (actual rows=1 loops=1)
   Join Filter: (t1.a = async_pt.a)
   Rows Removed by Join Filter: 399
   InitPlan 1 (returns $0)
     ->  Aggregate (actual rows=1 loops=1)
           ->  Append (actual rows=400 loops=1)
                 ->  Async Foreign Scan on async_p1 async_pt_4 (actual rows=200 loops=1)
                       Filter: (a < '3000'::number)
                 ->  Async Foreign Scan on async_p2 async_pt_5 (actual rows=200 loops=1)
                       Filter: (a < '3000'::number)
   ->  Seq Scan on local_tbl t1 (actual rows=1 loops=1)
   ->  Append (actual rows=400 loops=1)
         ->  Async Foreign Scan on async_p1 async_pt_1 (actual rows=200 loops=1)
               Filter: (a < '3000'::number)
         ->  Async Foreign Scan on async_p2 async_pt_2 (actual rows=200 loops=1)
               Filter: (a < '3000'::number)
(16 rows)

SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;
  a   |  b  |  c  |  a   |  b  |  c   | count 
------+-----+-----+------+-----+------+-------
 1505 | 505 | foo | 1505 | 505 | 0505 |   400
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Limit
   Output: t1.a, t1.b, t1.c
   ->  Append
         ->  Async Foreign Scan on public.async_p1 t1_1
               Output: t1_1.a, t1_1.b, t1_1.c
               Filter: (t1_1.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl1
         ->  Async Foreign Scan on public.async_p2 t1_2
               Output: t1_2.a, t1_2.b, t1_2.c
               Filter: (t1_2.b === '505'::number)
               Remote SQL: SELECT a, b, c FROM public.base_tbl2
         ->  Seq Scan on public.async_p3 t1_3
               Output: t1_3.a, t1_3.b, t1_3.c
               Filter: (t1_3.b === '505'::number)
(14 rows)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Limit (actual rows=1 loops=1)
   ->  Append (actual rows=1 loops=1)
         ->  Async Foreign Scan on async_p1 t1_1 (actual rows=0 loops=1)
               Filter: (b === '505'::number)
         ->  Async Foreign Scan on async_p2 t1_2 (actual rows=0 loops=1)
               Filter: (b === '505'::number)
         ->  Seq Scan on async_p3 t1_3 (actual rows=1 loops=1)
               Filter: (b === '505'::number)
               Rows Removed by Filter: 101
(9 rows)

SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;
  a   |  b  |  c   
------+-----+------
 3505 | 505 | 0505
(1 row)

-- Check with foreign modify
CREATE TABLE base_tbl3 (a number(38,0), b number(38,0), c varchar2(1024));
CREATE FOREIGN TABLE remote_tbl (a number(38,0), b number(38,0), c varchar2(1024))
  SERVER loopback OPTIONS (table_name 'base_tbl3');
INSERT INTO remote_tbl VALUES (2505, 505, 'bar');
CREATE TABLE base_tbl4 (a number(38,0), b number(38,0), c varchar2(1024));
CREATE FOREIGN TABLE insert_tbl (a number(38,0), b number(38,0), c varchar2(1024))
  SERVER loopback OPTIONS (table_name 'base_tbl4');
EXPLAIN (VERBOSE, COSTS OFF)
INSERT INTO insert_tbl (SELECT * FROM local_tbl UNION ALL SELECT * FROM remote_tbl);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Insert on public.insert_tbl
   Remote SQL: INSERT INTO public.base_tbl4(a, b, c) VALUES ($1, $2, $3)
   Batch Size: 1
   ->  Append
         ->  Seq Scan on public.local_tbl
               Output: local_tbl.a, local_tbl.b, local_tbl.c
         ->  Async Foreign Scan on public.remote_tbl
               Output: remote_tbl.a, remote_tbl.b, remote_tbl.c
               Remote SQL: SELECT a, b, c FROM public.base_tbl3
(9 rows)

INSERT INTO insert_tbl (SELECT * FROM local_tbl UNION ALL SELECT * FROM remote_tbl);
SELECT * FROM insert_tbl ORDER BY a;
  a   |  b  |  c  
------+-----+-----
 1505 | 505 | foo
 2505 | 505 | bar
(2 rows)

-- Check with direct modify
EXPLAIN (VERBOSE, COSTS OFF)
WITH t AS (UPDATE remote_tbl SET c = c || c RETURNING *)
INSERT INTO join_tbl SELECT * FROM async_pt LEFT JOIN t ON (async_pt.a = t.a AND async_pt.b = t.b) WHERE async_pt.b === 505;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Insert on public.join_tbl
   CTE t
     ->  Update on public.remote_tbl
           Output: remote_tbl.a, remote_tbl.b, remote_tbl.c
           Remote SQL: UPDATE public.base_tbl3 SET c = $2 WHERE ctid = $1 RETURNING a, b, c
           ->  Foreign Scan on public.remote_tbl
                 Output: ((remote_tbl.c)::text || (remote_tbl.c)::text), remote_tbl.ctid, remote_tbl.*
                 Remote SQL: SELECT a, b, c, ctid FROM public.base_tbl3 FOR UPDATE
   ->  Nested Loop Left Join
         Output: async_pt.a, async_pt.b, async_pt.c, t.a, t.b, t.c
         Join Filter: ((async_pt.a = t.a) AND (async_pt.b = t.b))
         ->  Append
               ->  Async Foreign Scan on public.async_p1 async_pt_1
                     Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
                     Filter: (async_pt_1.b === '505'::number)
                     Remote SQL: SELECT a, b, c FROM public.base_tbl1
               ->  Async Foreign Scan on public.async_p2 async_pt_2
                     Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
                     Filter: (async_pt_2.b === '505'::number)
                     Remote SQL: SELECT a, b, c FROM public.base_tbl2
               ->  Seq Scan on public.async_p3 async_pt_3
                     Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
                     Filter: (async_pt_3.b === '505'::number)
         ->  CTE Scan on t
               Output: t.a, t.b, t.c
(25 rows)

WITH t AS (UPDATE remote_tbl SET c = c || c RETURNING *)
INSERT INTO join_tbl SELECT * FROM async_pt LEFT JOIN t ON (async_pt.a = t.a AND async_pt.b = t.b) WHERE async_pt.b === 505;
SELECT * FROM join_tbl ORDER BY a1;
  a1  | b1  |  c1  |  a2  | b2  |   c2   
------+-----+------+------+-----+--------
 1505 | 505 | 0505 |      |     | 
 2505 | 505 | 0505 | 2505 | 505 | barbar
 3505 | 505 | 0505 |      |     | 
(3 rows)

DELETE FROM join_tbl;
DROP TABLE local_tbl;
DROP FOREIGN TABLE remote_tbl;
DROP FOREIGN TABLE insert_tbl;
DROP TABLE base_tbl3;
DROP TABLE base_tbl4;
RESET enable_mergejoin;
RESET enable_hashjoin;
-- Test that UPDATE/DELETE with inherited target works with async_capable enabled
EXPLAIN (VERBOSE, COSTS OFF)
UPDATE async_pt SET c = c || c WHERE b = 0 RETURNING *;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Update on public.async_pt
   Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
   Foreign Update on public.async_p1 async_pt_1
     Remote SQL: UPDATE public.base_tbl1 SET c = $2 WHERE ctid = $1 RETURNING a, b, c
   Foreign Update on public.async_p2 async_pt_2
     Remote SQL: UPDATE public.base_tbl2 SET c = $2 WHERE ctid = $1 RETURNING a, b, c
   Update on public.async_p3 async_pt_3
   ->  Append
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: ((async_pt_1.c)::text || (async_pt_1.c)::text), async_pt_1.tableoid, async_pt_1.ctid, async_pt_1.*
               Filter: (async_pt_1.b = '0'::number)
               Remote SQL: SELECT a, b, c, ctid FROM public.base_tbl1 FOR UPDATE
         ->  Async Foreign Scan on public.async_p2 async_pt_2
               Output: ((async_pt_2.c)::text || (async_pt_2.c)::text), async_pt_2.tableoid, async_pt_2.ctid, async_pt_2.*
               Filter: (async_pt_2.b = '0'::number)
               Remote SQL: SELECT a, b, c, ctid FROM public.base_tbl2 FOR UPDATE
         ->  Seq Scan on public.async_p3 async_pt_3
               Output: ((async_pt_3.c)::text || (async_pt_3.c)::text), async_pt_3.tableoid, async_pt_3.ctid, NULL::record
               Filter: (async_pt_3.b = '0'::number)
(19 rows)

UPDATE async_pt SET c = c || c WHERE b = 0 RETURNING *;
  a   | b |    c     
------+---+----------
 3000 | 0 | 00000000
 1000 | 0 | 00000000
 2000 | 0 | 00000000
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF)
DELETE FROM async_pt WHERE b = 0 RETURNING *;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Delete on public.async_pt
   Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
   Foreign Delete on public.async_p1 async_pt_1
     Remote SQL: DELETE FROM public.base_tbl1 WHERE ctid = $1 RETURNING a, b, c
   Foreign Delete on public.async_p2 async_pt_2
     Remote SQL: DELETE FROM public.base_tbl2 WHERE ctid = $1 RETURNING a, b, c
   Delete on public.async_p3 async_pt_3
   ->  Append
         ->  Async Foreign Scan on public.async_p1 async_pt_1
               Output: async_pt_1.tableoid, async_pt_1.ctid
               Filter: (async_pt_1.b = '0'::number)
               Remote SQL: SELECT b, ctid FROM public.base_tbl1 FOR UPDATE
         ->  Async Foreign Scan on public.async_p2 async_pt_2
               Output: async_pt_2.tableoid, async_pt_2.ctid
               Filter: (async_pt_2.b = '0'::number)
               Remote SQL: SELECT b, ctid FROM public.base_tbl2 FOR UPDATE
         ->  Seq Scan on public.async_p3 async_pt_3
               Output: async_pt_3.tableoid, async_pt_3.ctid
               Filter: (async_pt_3.b = '0'::number)
(19 rows)

DELETE FROM async_pt WHERE b = 0 RETURNING *;
  a   | b |    c     
------+---+----------
 3000 | 0 | 00000000
 1000 | 0 | 00000000
 2000 | 0 | 00000000
(3 rows)

-- Check EXPLAIN ANALYZE for a query that scans empty partitions asynchronously
DELETE FROM async_p1;
DELETE FROM async_p2;
DELETE FROM async_p3;
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
SELECT * FROM async_pt;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Append (actual rows=0 loops=1)
   ->  Async Foreign Scan on async_p1 async_pt_1 (actual rows=0 loops=1)
   ->  Async Foreign Scan on async_p2 async_pt_2 (actual rows=0 loops=1)
   ->  Seq Scan on async_p3 async_pt_3 (actual rows=0 loops=1)
(4 rows)

-- Clean up
DROP TABLE async_pt;
DROP TABLE base_tbl1;
DROP TABLE base_tbl2;
DROP TABLE result_tbl;
DROP TABLE join_tbl;
-- Test that an asynchronous fetch is processed before restarting the scan in
-- ReScanForeignScan
CREATE TABLE base_tbl (a number(38,0), b number(38,0));
INSERT INTO base_tbl VALUES (1, 11), (2, 22), (3, 33);
CREATE FOREIGN TABLE foreign_tbl (b number(38,0))
  SERVER loopback OPTIONS (table_name 'base_tbl');
CREATE FOREIGN TABLE foreign_tbl2 () INHERITS (foreign_tbl)
  SERVER loopback OPTIONS (table_name 'base_tbl');
EXPLAIN (VERBOSE, COSTS OFF)
SELECT a FROM base_tbl WHERE a IN (SELECT a FROM foreign_tbl);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Seq Scan on public.base_tbl
   Output: base_tbl.a
   Filter: (SubPlan 1)
   SubPlan 1
     ->  Result
           Output: base_tbl.a
           ->  Append
                 ->  Async Foreign Scan on public.foreign_tbl foreign_tbl_1
                       Remote SQL: SELECT NULL FROM public.base_tbl
                 ->  Async Foreign Scan on public.foreign_tbl2 foreign_tbl_2
                       Remote SQL: SELECT NULL FROM public.base_tbl
(11 rows)

SELECT a FROM base_tbl WHERE a IN (SELECT a FROM foreign_tbl);
 a 
---
 1
 2
 3
(3 rows)

-- Clean up
DROP FOREIGN TABLE foreign_tbl CASCADE;
NOTICE:  drop cascades to foreign table foreign_tbl2
DROP TABLE base_tbl;
ALTER SERVER loopback OPTIONS (DROP async_capable);
ALTER SERVER loopback2 OPTIONS (DROP async_capable);
-- ===================================================================
-- test invalid server, foreign table and foreign data wrapper options
-- ===================================================================
-- Invalid fdw_startup_cost option
CREATE SERVER inv_scst FOREIGN DATA WRAPPER postgres_fdw
	OPTIONS(fdw_startup_cost '100$%$#$#');
ERROR:  invalid value for floating point option "fdw_startup_cost": 100$%$#$#
-- Invalid fdw_tuple_cost option
CREATE SERVER inv_scst FOREIGN DATA WRAPPER postgres_fdw
	OPTIONS(fdw_tuple_cost '100$%$#$#');
ERROR:  invalid value for floating point option "fdw_tuple_cost": 100$%$#$#
-- Invalid fetch_size option
CREATE FOREIGN TABLE inv_fsz (c1 number(38,0) )
	SERVER loopback OPTIONS (fetch_size '100$%$#$#');
ERROR:  invalid value for integer option "fetch_size": 100$%$#$#
-- Invalid batch_size option
CREATE FOREIGN TABLE inv_bsz (c1 number(38,0) )
	SERVER loopback OPTIONS (batch_size '100$%$#$#');
ERROR:  invalid value for integer option "batch_size": 100$%$#$#
-- No option is allowed to be specified at foreign data wrapper level
ALTER FOREIGN DATA WRAPPER postgres_fdw OPTIONS (nonexistent 'fdw');
ERROR:  invalid option "nonexistent"
HINT:  There are no valid options in this context.
-- ===================================================================
-- test postgres_fdw.application_name GUC
-- ===================================================================
-- To avoid race conditions in checking the remote session's application_name,
-- use this view to make the remote session itself read its application_name.
CREATE VIEW my_application_name AS
  SELECT application_name FROM pg_stat_activity WHERE pid = pg_backend_pid();
CREATE FOREIGN TABLE remote_application_name (application_name varchar2(1024))
  SERVER loopback2
  OPTIONS (schema_name 'public', table_name 'my_application_name');
SELECT count(*) FROM remote_application_name;
 count 
-------
     1
(1 row)

-- Specify escape sequences in application_name option of a server
-- object so as to test that they are replaced with status information
-- expectedly.  Note that we are also relying on ALTER SERVER to force
-- the remote session to be restarted with its new application name.
--
-- Since pg_stat_activity.application_name may be truncated to less than
-- NAMEDATALEN characters, note that substring() needs to be used
-- at the condition of test query to make sure that the string consisting
-- of database name and process ID is also less than that.
ALTER SERVER loopback2 OPTIONS (application_name 'fdw_%d%p');
SELECT count(*) FROM remote_application_name
  WHERE application_name =
    substring('fdw_' || current_database() || pg_backend_pid() for
      current_setting('max_identifier_length')::number(38,0));
 count 
-------
     1
(1 row)

-- postgres_fdw.application_name overrides application_name option
-- of a server object if both settings are present.
ALTER SERVER loopback2 OPTIONS (SET application_name 'fdw_wrong');
SET postgres_fdw.application_name TO 'fdw_%a%u%%';
SELECT count(*) FROM remote_application_name
  WHERE application_name =
    substring('fdw_' || current_setting('application_name') ||
      CURRENT_USER || '%' for current_setting('max_identifier_length')::number(38,0));
 count 
-------
     1
(1 row)

RESET postgres_fdw.application_name;
-- Test %c (session ID) and %C (cluster name) escape sequences.
ALTER SERVER loopback2 OPTIONS (SET application_name 'fdw_%C%c');
SELECT count(*) FROM remote_application_name
  WHERE application_name =
    substring('fdw_' || current_setting('cluster_name') ||
      to_hex(trunc(EXTRACT(EPOCH FROM (SELECT backend_start FROM
      pg_stat_get_activity(pg_backend_pid()))))::integer) || '.' ||
      to_hex(pg_backend_pid())
      for current_setting('max_identifier_length')::int);
 count 
-------
     1
(1 row)

-- Clean up.
DROP FOREIGN TABLE remote_application_name;
DROP VIEW my_application_name;
-- ===================================================================
-- test parallel commit and parallel abort
-- ===================================================================
ALTER SERVER loopback OPTIONS (ADD parallel_commit 'true');
ALTER SERVER loopback OPTIONS (ADD parallel_abort 'true');
ALTER SERVER loopback2 OPTIONS (ADD parallel_commit 'true');
ALTER SERVER loopback2 OPTIONS (ADD parallel_abort 'true');
CREATE TABLE ploc1 (f1 number(38,0), f2 varchar2(1024));
CREATE FOREIGN TABLE prem1 (f1 number(38,0), f2 varchar2(1024))
  SERVER loopback OPTIONS (table_name 'ploc1');
CREATE TABLE ploc2 (f1 number(38,0), f2 varchar2(1024));
CREATE FOREIGN TABLE prem2 (f1 number(38,0), f2 varchar2(1024))
  SERVER loopback2 OPTIONS (table_name 'ploc2');
BEGIN;
INSERT INTO prem1 VALUES (101, 'foo');
INSERT INTO prem2 VALUES (201, 'bar');
COMMIT;
SELECT * FROM prem1;
 f1  | f2  
-----+-----
 101 | foo
(1 row)

SELECT * FROM prem2;
 f1  | f2  
-----+-----
 201 | bar
(1 row)

BEGIN;
SAVEPOINT s;
INSERT INTO prem1 VALUES (102, 'foofoo');
INSERT INTO prem2 VALUES (202, 'barbar');
RELEASE SAVEPOINT s;
COMMIT;
SELECT * FROM prem1;
 f1  |   f2   
-----+--------
 101 | foo
 102 | foofoo
(2 rows)

SELECT * FROM prem2;
 f1  |   f2   
-----+--------
 201 | bar
 202 | barbar
(2 rows)

-- This tests executing DEALLOCATE ALL against foreign servers in parallel
-- during pre-commit
BEGIN;
SAVEPOINT s;
INSERT INTO prem1 VALUES (103, 'baz');
INSERT INTO prem2 VALUES (203, 'qux');
ROLLBACK TO SAVEPOINT s;
RELEASE SAVEPOINT s;
INSERT INTO prem1 VALUES (104, 'bazbaz');
INSERT INTO prem2 VALUES (204, 'quxqux');
COMMIT;
SELECT * FROM prem1;
 f1  |   f2   
-----+--------
 101 | foo
 102 | foofoo
 104 | bazbaz
(3 rows)

SELECT * FROM prem2;
 f1  |   f2   
-----+--------
 201 | bar
 202 | barbar
 204 | quxqux
(3 rows)

BEGIN;
INSERT INTO prem1 VALUES (105, 'test1');
INSERT INTO prem2 VALUES (205, 'test2');
ABORT;
SELECT * FROM prem1;
 f1  |   f2   
-----+--------
 101 | foo
 102 | foofoo
 104 | bazbaz
(3 rows)

SELECT * FROM prem2;
 f1  |   f2   
-----+--------
 201 | bar
 202 | barbar
 204 | quxqux
(3 rows)

-- This tests executing DEALLOCATE ALL against foreign servers in parallel
-- during post-abort
BEGIN;
SAVEPOINT s;
INSERT INTO prem1 VALUES (105, 'test1');
INSERT INTO prem2 VALUES (205, 'test2');
ROLLBACK TO SAVEPOINT s;
RELEASE SAVEPOINT s;
INSERT INTO prem1 VALUES (105, 'test1');
INSERT INTO prem2 VALUES (205, 'test2');
ABORT;
SELECT * FROM prem1;
 f1  |   f2   
-----+--------
 101 | foo
 102 | foofoo
 104 | bazbaz
(3 rows)

SELECT * FROM prem2;
 f1  |   f2   
-----+--------
 201 | bar
 202 | barbar
 204 | quxqux
(3 rows)

ALTER SERVER loopback OPTIONS (DROP parallel_commit);
ALTER SERVER loopback OPTIONS (DROP parallel_abort);
ALTER SERVER loopback2 OPTIONS (DROP parallel_commit);
ALTER SERVER loopback2 OPTIONS (DROP parallel_abort);
-- ===================================================================
-- test for ANALYZE sampling
-- ===================================================================
CREATE TABLE analyze_table (id number(38,0), a varchar2(1024), b bigint);
CREATE FOREIGN TABLE analyze_ftable (id number(38,0), a varchar2(1024), b bigint)
       SERVER loopback OPTIONS (table_name 'analyze_rtable1');
INSERT INTO analyze_table (SELECT x FROM generate_series(1,1000) x);
ANALYZE analyze_table;
SET default_statistics_target = 10;
ANALYZE analyze_table;
ALTER SERVER loopback OPTIONS (analyze_sampling 'invalid');
ERROR:  invalid value for string option "analyze_sampling": invalid
ALTER SERVER loopback OPTIONS (analyze_sampling 'auto');
ANALYZE analyze_table;
ALTER SERVER loopback OPTIONS (SET analyze_sampling 'system');
ANALYZE analyze_table;
ALTER SERVER loopback OPTIONS (SET analyze_sampling 'bernoulli');
ANALYZE analyze_table;
ALTER SERVER loopback OPTIONS (SET analyze_sampling 'random');
ANALYZE analyze_table;
ALTER SERVER loopback OPTIONS (SET analyze_sampling 'off');
ANALYZE analyze_table;
-- cleanup
DROP FOREIGN TABLE analyze_ftable;
DROP TABLE analyze_table;
RESET ivorysql.enable_emptystring_to_NULL;
