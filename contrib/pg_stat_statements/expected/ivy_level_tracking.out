--
-- Statement level tracking
--
SET pg_stat_statements.track_utility = TRUE;
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

-- DO block - top-level tracking.
CREATE TABLE stats_track_tab (x int);
SET pg_stat_statements.track = 'top';
DELETE FROM stats_track_tab;
DO $$
BEGIN
  DELETE FROM stats_track_tab;
END;
$$ LANGUAGE plpgsql;
SELECT toplevel, calls, query FROM pg_stat_statements
  WHERE query LIKE '%DELETE%' ORDER BY query COLLATE "C", toplevel;
 toplevel | calls |             query              
----------+-------+--------------------------------
 t        |     1 | DELETE FROM stats_track_tab
 t        |     1 | DO $$                         +
          |       | BEGIN                         +
          |       |   DELETE FROM stats_track_tab;+
          |       | END;                          +
          |       | $$ LANGUAGE plpgsql
(2 rows)

SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

-- DO block - all-level tracking.
SET pg_stat_statements.track = 'all';
DELETE FROM stats_track_tab;
DO $$
BEGIN
  DELETE FROM stats_track_tab;
END; $$;
DO LANGUAGE plpgsql $$
BEGIN
  -- this is a SELECT
  PERFORM 'hello world'::TEXT;
END; $$;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C", toplevel;
 toplevel | calls |                       query                        
----------+-------+----------------------------------------------------
 f        |     1 | DELETE FROM stats_track_tab
 t        |     1 | DELETE FROM stats_track_tab
 t        |     1 | DO $$                                             +
          |       | BEGIN                                             +
          |       |   DELETE FROM stats_track_tab;                    +
          |       | END; $$
 t        |     1 | DO LANGUAGE plpgsql $$                            +
          |       | BEGIN                                             +
          |       |   -- this is a SELECT                             +
          |       |   PERFORM 'hello world'::TEXT;                    +
          |       | END; $$
 f        |     1 | SELECT $1::TEXT
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
 t        |     1 | SET pg_stat_statements.track = $1
(7 rows)

-- Explain analyze, all-level tracking.
SET pg_stat_statements.track = 'all';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, BUFFERS OFF) SELECT 100;
            QUERY PLAN             
-----------------------------------
 Result (actual rows=1.00 loops=1)
(1 row)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, BUFFERS OFF)
  DECLARE foocur CURSOR FOR SELECT * FROM stats_track_tab;
                       QUERY PLAN                       
--------------------------------------------------------
 Seq Scan on stats_track_tab (actual rows=0.00 loops=1)
(1 row)

SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                                    query                                     
----------+-------+------------------------------------------------------------------------------
 t        |     1 | EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, BUFFERS OFF)          +
          |       |   DECLARE foocur CURSOR FOR SELECT * FROM stats_track_tab
 t        |     1 | EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, BUFFERS OFF) SELECT $1
 f        |     1 | SELECT $1
 f        |     1 | SELECT * FROM stats_track_tab
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(5 rows)

-- Explain analyze, top tracking.
SET pg_stat_statements.track = 'top';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, BUFFERS OFF) SELECT 100;
            QUERY PLAN             
-----------------------------------
 Result (actual rows=1.00 loops=1)
(1 row)

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, BUFFERS OFF)
  DECLARE foocur CURSOR FOR SELECT * FROM stats_track_tab;
                       QUERY PLAN                       
--------------------------------------------------------
 Seq Scan on stats_track_tab (actual rows=0.00 loops=1)
(1 row)

SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                                    query                                     
----------+-------+------------------------------------------------------------------------------
 t        |     1 | EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, BUFFERS OFF)          +
          |       |   DECLARE foocur CURSOR FOR SELECT * FROM stats_track_tab
 t        |     1 | EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF, BUFFERS OFF) SELECT $1
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(3 rows)

-- Create Materialized View, all-level tracking.
SET pg_stat_statements.track = 'all';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

CREATE MATERIALIZED VIEW pgss_materialized_view AS
  SELECT * FROM generate_series(1, 5) as id;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                       query                        
----------+-------+----------------------------------------------------
 t        |     1 | CREATE MATERIALIZED VIEW pgss_materialized_view AS+
          |       |   SELECT * FROM generate_series($1, $2) as id
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(2 rows)

-- CREATE MATERIALIZED VIEW, top-level tracking.
SET pg_stat_statements.track = 'top';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

CREATE MATERIALIZED VIEW pgss_materialized_view_2 AS
  SELECT * FROM generate_series(1, 5) as id;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                        query                         
----------+-------+------------------------------------------------------
 t        |     1 | CREATE MATERIALIZED VIEW pgss_materialized_view_2 AS+
          |       |   SELECT * FROM generate_series($1, $2) as id
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(2 rows)

-- REFRESH MATERIALIZED VIEW, all-level tracking.
SET pg_stat_statements.track = 'all';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

REFRESH MATERIALIZED VIEW pgss_materialized_view;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                       query                        
----------+-------+----------------------------------------------------
 t        |     1 | REFRESH MATERIALIZED VIEW pgss_materialized_view
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(2 rows)

-- REFRESH MATERIALIZED VIEW, top-level tracking.
SET pg_stat_statements.track = 'top';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

REFRESH MATERIALIZED VIEW pgss_materialized_view;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                       query                        
----------+-------+----------------------------------------------------
 t        |     1 | REFRESH MATERIALIZED VIEW pgss_materialized_view
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(2 rows)

-- CREATE TABLE AS, all-level tracking.
SET pg_stat_statements.track = 'all';
PREPARE test_prepare_pgss AS select generate_series(1, 10);
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

CREATE TEMPORARY TABLE pgss_ctas_1 AS SELECT 1;
CREATE TEMPORARY TABLE pgss_ctas_2 AS EXECUTE test_prepare_pgss;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                              query                              
----------+-------+-----------------------------------------------------------------
 t        |     1 | CREATE TEMPORARY TABLE pgss_ctas_1 AS SELECT $1
 t        |     1 | CREATE TEMPORARY TABLE pgss_ctas_2 AS EXECUTE test_prepare_pgss
 f        |     1 | SELECT $1
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
 f        |     1 | select generate_series($1, $2)
(5 rows)

-- CREATE TABLE AS, top-level tracking.
SET pg_stat_statements.track = 'top';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

CREATE TEMPORARY TABLE pgss_ctas_3 AS SELECT 1;
CREATE TEMPORARY TABLE pgss_ctas_4 AS EXECUTE test_prepare_pgss;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                              query                              
----------+-------+-----------------------------------------------------------------
 t        |     1 | CREATE TEMPORARY TABLE pgss_ctas_3 AS SELECT $1
 t        |     1 | CREATE TEMPORARY TABLE pgss_ctas_4 AS EXECUTE test_prepare_pgss
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(3 rows)

-- EXPLAIN with CREATE TABLE AS - all-level tracking.
SET pg_stat_statements.track = 'all';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

EXPLAIN (COSTS OFF) CREATE TEMPORARY TABLE pgss_explain_ctas AS SELECT 1;
 QUERY PLAN 
------------
 Result
(1 row)

SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                                   query                                   
----------+-------+---------------------------------------------------------------------------
 t        |     1 | EXPLAIN (COSTS OFF) CREATE TEMPORARY TABLE pgss_explain_ctas AS SELECT $1
 f        |     1 | SELECT $1
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(3 rows)

-- EXPLAIN with CREATE TABLE AS - top-level tracking.
SET pg_stat_statements.track = 'top';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

EXPLAIN (COSTS OFF) CREATE TEMPORARY TABLE pgss_explain_ctas AS SELECT 1;
 QUERY PLAN 
------------
 Result
(1 row)

SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                                   query                                   
----------+-------+---------------------------------------------------------------------------
 t        |     1 | EXPLAIN (COSTS OFF) CREATE TEMPORARY TABLE pgss_explain_ctas AS SELECT $1
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(2 rows)

-- DECLARE CURSOR, all-level tracking.
SET pg_stat_statements.track = 'all';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

BEGIN;
DECLARE FOOCUR CURSOR FOR SELECT * from stats_track_tab;
FETCH FORWARD 1 FROM foocur;
 x 
---
(0 rows)

CLOSE foocur;
COMMIT;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                          query                          
----------+-------+---------------------------------------------------------
 t        |     1 | BEGIN
 t        |     1 | CLOSE foocur
 t        |     1 | COMMIT
 t        |     1 | DECLARE FOOCUR CURSOR FOR SELECT * from stats_track_tab
 t        |     1 | FETCH FORWARD 1 FROM foocur
 f        |     1 | SELECT * from stats_track_tab
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(7 rows)

-- DECLARE CURSOR, top-level tracking.
SET pg_stat_statements.track = 'top';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

BEGIN;
DECLARE FOOCUR CURSOR FOR SELECT * FROM stats_track_tab;
FETCH FORWARD 1 FROM foocur;
 x 
---
(0 rows)

CLOSE foocur;
COMMIT;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C";
 toplevel | calls |                          query                          
----------+-------+---------------------------------------------------------
 t        |     1 | BEGIN
 t        |     1 | CLOSE foocur
 t        |     1 | COMMIT
 t        |     1 | DECLARE FOOCUR CURSOR FOR SELECT * FROM stats_track_tab
 t        |     1 | FETCH FORWARD 1 FROM foocur
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(6 rows)

-- DO block - top-level tracking without utility.
SET pg_stat_statements.track = 'top';
SET pg_stat_statements.track_utility = FALSE;
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

DELETE FROM stats_track_tab;
DO $$
BEGIN
  DELETE FROM stats_track_tab;
END; $$;
DO LANGUAGE plpgsql $$
BEGIN
  -- this is a SELECT
  PERFORM 'hello world'::TEXT;
END; $$;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C", toplevel;
 toplevel | calls |                       query                        
----------+-------+----------------------------------------------------
 t        |     1 | DELETE FROM stats_track_tab
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(2 rows)

-- DO block - all-level tracking without utility.
SET pg_stat_statements.track = 'all';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

DELETE FROM stats_track_tab;
DO $$
BEGIN
  DELETE FROM stats_track_tab;
END; $$;
DO LANGUAGE plpgsql $$
BEGIN
  -- this is a SELECT
  PERFORM 'hello world'::TEXT;
END; $$;
SELECT toplevel, calls, query FROM pg_stat_statements
  ORDER BY query COLLATE "C", toplevel;
 toplevel | calls |                       query                        
----------+-------+----------------------------------------------------
 f        |     1 | DELETE FROM stats_track_tab
 t        |     1 | DELETE FROM stats_track_tab
 f        |     1 | SELECT $1::TEXT
 t        |     1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(4 rows)

-- PL/pgSQL function - top-level tracking.
SET pg_stat_statements.track = 'top';
SET pg_stat_statements.track_utility = FALSE;
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

CREATE FUNCTION PLUS_TWO(i INTEGER) RETURNS INTEGER AS $$
DECLARE
  r INTEGER;
BEGIN
  SELECT (i + 1 + 1.0)::INTEGER INTO r;
  RETURN r;
END; $$ LANGUAGE plpgsql;
/
SELECT PLUS_TWO(3);
 plus_two 
----------
        5
(1 row)

SELECT PLUS_TWO(7);
 plus_two 
----------
        9
(1 row)

-- SQL function --- use LIMIT to keep it from being inlined
CREATE FUNCTION PLUS_ONE(i INTEGER) RETURNS INTEGER AS
$$ SELECT (i + 1.0)::INTEGER LIMIT 1 $$ LANGUAGE SQL;
/
SELECT PLUS_ONE(8);
 plus_one 
----------
        9
(1 row)

SELECT PLUS_ONE(10);
 plus_one 
----------
       11
(1 row)

SELECT calls, rows, query FROM pg_stat_statements ORDER BY query COLLATE "C";
 calls | rows |                       query                        
-------+------+----------------------------------------------------
     2 |    2 | SELECT PLUS_ONE($1)
     2 |    2 | SELECT PLUS_TWO($1)
     1 |    1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(3 rows)

-- immutable SQL function --- can be executed at plan time
CREATE FUNCTION PLUS_THREE(i INTEGER) RETURNS INTEGER AS
$$ SELECT i + 3 LIMIT 1 $$ IMMUTABLE LANGUAGE SQL;
/
SELECT PLUS_THREE(8);
 plus_three 
------------
         11
(1 row)

SELECT PLUS_THREE(10);
 plus_three 
------------
         13
(1 row)

SELECT toplevel, calls, rows, query FROM pg_stat_statements ORDER BY query COLLATE "C";
 toplevel | calls | rows |                                    query                                     
----------+-------+------+------------------------------------------------------------------------------
 t        |     2 |    2 | SELECT PLUS_ONE($1)
 t        |     2 |    2 | SELECT PLUS_THREE($1)
 t        |     2 |    2 | SELECT PLUS_TWO($1)
 t        |     1 |    3 | SELECT calls, rows, query FROM pg_stat_statements ORDER BY query COLLATE "C"
 t        |     1 |    1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(5 rows)

-- PL/pgSQL function - all-level tracking.
SET pg_stat_statements.track = 'all';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

-- we drop and recreate the functions to avoid any caching funnies
DROP FUNCTION PLUS_ONE(INTEGER);
DROP FUNCTION PLUS_TWO(INTEGER);
DROP FUNCTION PLUS_THREE(INTEGER);
-- PL/pgSQL function
CREATE FUNCTION PLUS_TWO(i INTEGER) RETURNS INTEGER AS $$
DECLARE
  r INTEGER;
BEGIN
  SELECT (i + 1 + 1.0)::INTEGER INTO r;
  RETURN r;
END; $$ LANGUAGE plpgsql;
/
SELECT PLUS_TWO(-1);
 plus_two 
----------
        1
(1 row)

SELECT PLUS_TWO(2);
 plus_two 
----------
        4
(1 row)

-- SQL function --- use LIMIT to keep it from being inlined
CREATE FUNCTION PLUS_ONE(i INTEGER) RETURNS INTEGER AS
$$ SELECT (i + 1.0)::INTEGER LIMIT 1 $$ LANGUAGE SQL;
/
SELECT PLUS_ONE(3);
 plus_one 
----------
        4
(1 row)

SELECT PLUS_ONE(1);
 plus_one 
----------
        2
(1 row)

SELECT calls, rows, query FROM pg_stat_statements ORDER BY query COLLATE "C";
 calls | rows |                       query                        
-------+------+----------------------------------------------------
     2 |    2 | SELECT (i + $2 + $3)::INTEGER
     2 |    2 | SELECT (i + $2)::INTEGER LIMIT $3
     2 |    2 | SELECT PLUS_ONE($1)
     2 |    2 | SELECT PLUS_TWO($1)
     1 |    1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(5 rows)

-- immutable SQL function --- can be executed at plan time
CREATE FUNCTION PLUS_THREE(i INTEGER) RETURNS INTEGER AS
$$ SELECT i + 3 LIMIT 1 $$ IMMUTABLE LANGUAGE SQL;
/
SELECT PLUS_THREE(8);
 plus_three 
------------
         11
(1 row)

SELECT PLUS_THREE(10);
 plus_three 
------------
         13
(1 row)

SELECT toplevel, calls, rows, query FROM pg_stat_statements ORDER BY query COLLATE "C";
 toplevel | calls | rows |                                    query                                     
----------+-------+------+------------------------------------------------------------------------------
 f        |     2 |    2 | SELECT (i + $2 + $3)::INTEGER
 f        |     2 |    2 | SELECT (i + $2)::INTEGER LIMIT $3
 t        |     2 |    2 | SELECT PLUS_ONE($1)
 t        |     2 |    2 | SELECT PLUS_THREE($1)
 t        |     2 |    2 | SELECT PLUS_TWO($1)
 t        |     1 |    5 | SELECT calls, rows, query FROM pg_stat_statements ORDER BY query COLLATE "C"
 f        |     2 |    2 | SELECT i + $2 LIMIT $3
 t        |     1 |    1 | SELECT pg_stat_statements_reset() IS NOT NULL AS t
(8 rows)

--
-- pg_stat_statements.track = none
--
SET pg_stat_statements.track = 'none';
SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

SELECT 1 AS "one";
 one 
-----
   1
(1 row)

SELECT 1 + 1 AS "two";
 two 
-----
   2
(1 row)

SELECT calls, rows, query FROM pg_stat_statements ORDER BY query COLLATE "C";
 calls | rows | query 
-------+------+-------
(0 rows)

SELECT pg_stat_statements_reset() IS NOT NULL AS t;
 t 
---
 t
(1 row)

