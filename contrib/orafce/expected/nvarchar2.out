\set VERBOSITY terse
SET client_encoding = utf8;
set compatible_mode = 'oracle';
--test for original string type
drop table t2;
ERROR:  table "t2" does not exist
drop table t3;
ERROR:  table "t3" does not exist
drop table t4;
ERROR:  table "t4" does not exist
drop table t22;
ERROR:  table "t22" does not exist
drop table t33;
ERROR:  table "t33" does not exist
drop table t44;
ERROR:  table "t44" does not exist
show nls_length_semantics;
 nls_length_semantics 
----------------------
 none
(1 row)

create table t2 (b varchar(6));
create table t3 (c char(7));
insert into t2 values('你好很快就分散吗');
ERROR:  value too long for type character varying(6)
insert into t2 values('nlsttd');
select * from t2;
   b    
--------
 nlsttd
(1 row)

insert into t3 values('nlsttdl');
insert into t3 values('你好很快就分散吗');
ERROR:  value too long for type character(7)
select * from t3;
    c    
---------
 nlsttdl
(1 row)

drop table t2;
drop table t3;
--
-- test type modifier related rules
--
-- ERROR (typmod >= 1)
CREATE TABLE bar (a NVARCHAR2(0));
ERROR:  length for type varchar must be at least 1 at character 21
-- ERROR (number of typmods = 1)
CREATE TABLE bar (a NVARCHAR2(10, 1));
ERROR:  invalid type modifier at character 21
-- OK
CREATE TABLE bar (a VARCHAR(5000));
CREATE INDEX ON bar(a);
-- cleanup
DROP TABLE bar;
-- OK
CREATE TABLE bar (a NVARCHAR2(5));
--
-- test that no value longer than maxlen is allowed
--
-- ERROR (length > 5)
INSERT INTO bar VALUES ('abcdef');
ERROR:  input value too long for type nvarchar2(5)
-- ERROR (length > 5);
-- NVARCHAR2 does not truncate blank spaces on implicit coercion
INSERT INTO bar VALUES ('abcde  ');
ERROR:  input value too long for type nvarchar2(5)
-- OK
INSERT INTO bar VALUES ('abcde');
-- OK
INSERT INTO bar VALUES ('abcdef'::NVARCHAR2(5));
-- OK
INSERT INTO bar VALUES ('abcde  '::NVARCHAR2(5));
--OK
INSERT INTO bar VALUES ('abc'::NVARCHAR2(5));
--
-- test whitespace semantics on comparison
--
-- equal
SELECT 'abcde   '::NVARCHAR2(10) = 'abcde   '::NVARCHAR2(10);
 ?column? 
----------
 t
(1 row)

-- not equal
SELECT 'abcde  '::NVARCHAR2(10) = 'abcde   '::NVARCHAR2(10);
 ?column? 
----------
 f
(1 row)

-- null safe concat (disabled by default)
SELECT NULL || 'hello'::varchar2 || NULL;
 ?column? 
----------
 
(1 row)

SET orafce.varchar2_null_safe_concat TO true;
SELECT NULL || 'hello'::varchar2 || NULL;
 ?column? 
----------
 hello
(1 row)

--test for nls_length_semantics parameters
set nls_length_semantics to byte;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 byte
(1 row)

create table t2 (b varchar(6));
\d+ t2
                                           Table "public.t2"
 Column |         Type         | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+----------------------+-----------+----------+---------+----------+--------------+-------------
 b      | character varying(6) |           |          |         | extended |              | 

insert into t2 values('nlsttd');
select * from t2;
   b    
--------
 nlsttd
(1 row)

insert into t2 values('n好t');
select * from t2;
   b    
--------
 nlsttd
 n好t
(2 rows)

insert into t2 values('你好');
select * from t2;
   b    
--------
 nlsttd
 n好t
 你好
(3 rows)

insert into t2 values('你好吗');
ERROR:  value too long for type character varying(6 byte)
select * from t2;
   b    
--------
 nlsttd
 n好t
 你好
(3 rows)

create table t3 (c char(7));
\d+ t3
                                       Table "public.t3"
 Column |     Type     | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+--------------+-----------+----------+---------+----------+--------------+-------------
 c      | character(7) |           |          |         | extended |              | 

insert into t3 values('nlsttdl');
select * from t3;
    c    
---------
 nlsttdl
(1 row)

insert into t3 values('你好');
select * from t3;
    c    
---------
 nlsttdl
 你好 
(2 rows)

insert into t3 values('李老师你好吗');
ERROR:  value too long for type character(7 byte)
select * from t3;
    c    
---------
 nlsttdl
 你好 
(2 rows)

create table t4 (d nvarchar2(8));
\d+ t4
                                       Table "public.t4"
 Column |     Type     | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+--------------+-----------+----------+---------+----------+--------------+-------------
 d      | nvarchar2(8) |           |          |         | extended |              | 

insert into t4 values('nlsttdld');
select * from t4;
    d     
----------
 nlsttdld
(1 row)

insert into t4 values('你好');
select * from t4;
    d     
----------
 nlsttdld
 你好
(2 rows)

insert into t4 values('李老师你好吗');
ERROR:  input value too long for type nvarchar2(8 byte)
select * from t4;
    d     
----------
 nlsttdld
 你好
(2 rows)

set nls_length_semantics to char;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 char
(1 row)

insert into t2 values('nlsttd');
select * from t2;
   b    
--------
 nlsttd
 n好t
 你好
 nlsttd
(4 rows)

insert into t2 values('你好吗李老师');
select * from t2;
      b       
--------------
 nlsttd
 n好t
 你好
 nlsttd
 你好吗李老师
(5 rows)

insert into t2 values('你好吗小李老师');
ERROR:  value too long for type character varying(6 char)
insert into t3 values('nlsttdl');
select * from t3;
    c    
---------
 nlsttdl
 你好 
 nlsttdl
(3 rows)

insert into t3 values('小李老师你好吗');
select * from t3;
       c        
----------------
 nlsttdl
 你好 
 nlsttdl
 小李老师你好吗
(4 rows)

insert into t3 values('小李老师你好再见');
ERROR:  value too long for type character(7 char)
insert into t4 values('nlsttdld');
select * from t4;
    d     
----------
 nlsttdld
 你好
 nlsttdld
(3 rows)

insert into t4 values('小张小李老师你好');
select * from t4;
        d         
------------------
 nlsttdld
 你好
 nlsttdld
 小张小李老师你好
(4 rows)

insert into t4 values('小张小李老师你好吗');
ERROR:  input value too long for type nvarchar2(8 char)
select * from t4;
        d         
------------------
 nlsttdld
 你好
 nlsttdld
 小张小李老师你好
(4 rows)

drop table t2;
drop table t3;
drop table t4;
set nls_length_semantics to byte;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 byte
(1 row)

create table t2 (b varchar(1));
\d t2
                       Table "public.t2"
 Column |         Type         | Collation | Nullable | Default 
--------+----------------------+-----------+----------+---------
 b      | character varying(1) |           |          | 

insert into t2 values('李');
ERROR:  value too long for type character varying(1 byte)
insert into t2 values('李老');
ERROR:  value too long for type character varying(1 byte)
select * from t2;
 b 
---
(0 rows)

create table t3 (c char(1));
\d t3
                   Table "public.t3"
 Column |     Type     | Collation | Nullable | Default 
--------+--------------+-----------+----------+---------
 c      | character(1) |           |          | 

insert into t3 values('李');
ERROR:  value too long for type character(1 byte)
insert into t3 values('李老');
ERROR:  value too long for type character(1 byte)
select * from t3;
 c 
---
(0 rows)

create table t4 (d nvarchar2(1));
\d t4
                   Table "public.t4"
 Column |     Type     | Collation | Nullable | Default 
--------+--------------+-----------+----------+---------
 d      | nvarchar2(1) |           |          | 

insert into t4 values('李');
ERROR:  input value too long for type nvarchar2(1 byte)
insert into t4 values('李老');
ERROR:  input value too long for type nvarchar2(1 byte)
select * from t4;
 d 
---
(0 rows)

set nls_length_semantics to char;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 char
(1 row)

insert into t2 values('李');
insert into t2 values('李老');
ERROR:  value too long for type character varying(1 char)
select * from t2;
 b  
----
 李
(1 row)

insert into t3 values('李');
insert into t3 values('李老');
ERROR:  value too long for type character(1 char)
select * from t3;
 c  
----
 李
(1 row)

insert into t4 values('李');
insert into t4 values('李老');
ERROR:  input value too long for type nvarchar2(1 char)
select * from t4;
 d  
----
 李
(1 row)

drop table t2;
drop table t3;
drop table t4;
set nls_length_semantics to none;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 none
(1 row)

create table t2 (b varchar(6));
create table t3 (c char(7));
create table t22 (bb varchar(20));
insert into t22 values ('你今天上学迟到');
CREATE OR REPLACE FUNCTION test2()
RETURNS varchar
AS $$
insert into t2 select bb from t22;
select * from t2;
$$ LANGUAGE sql;
select test2();
ERROR:  value too long for type character varying(6)
DO LANGUAGE PLPGSQL $$
DECLARE
	str varchar(6);
BEGIN
	insert into t2 select bb from t22;
	select b from t2 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character varying(6)
create table t33 (cc char(20));
insert into t33 values ('你今天上学迟到了');
CREATE OR REPLACE FUNCTION test3()
RETURNS char(20)
AS $$
insert into t3 select cc from t33;
select * from t3;
$$ LANGUAGE sql;
select test3();
ERROR:  value too long for type character(7)
DO LANGUAGE PLPGSQL $$
DECLARE
	str char(7);
BEGIN
	insert into t3 select cc from t33;
	select c from t3 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character(7)
drop table t2;
drop table t3;
set nls_length_semantics to byte;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 byte
(1 row)

create table t2 (b varchar(6));
create table t3 (c char(7));
create table t4 (d nvarchar2(8));
select test2();
ERROR:  value too long for type character varying(6 byte)
select test3();
ERROR:  value too long for type character(7 byte)
create table t44 (dd nvarchar2(20));
insert into t44 values ('今天什么天气');
CREATE OR REPLACE FUNCTION test4()
RETURNS nvarchar2(20)
AS $$
insert into t4 select dd from t44;
select * from t4;
$$ LANGUAGE sql;
select test4();
ERROR:  input value too long for type nvarchar2(8 byte)
DO LANGUAGE PLPGSQL $$
DECLARE
	str varchar(6);
BEGIN
	insert into t2 select bb from t22;
	select b from t2 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character varying(6 byte)
DO LANGUAGE PLPGSQL $$
DECLARE
	str char(7);
BEGIN
	insert into t3 select cc from t33;
	select c from t3 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character(7 byte)
DO LANGUAGE PLPGSQL $$
DECLARE
	str nvarchar2(8);
BEGIN
	insert into t4 select dd from t44;
	select d from t4 into str;
	raise notice '%', str;
END$$;
ERROR:  input value too long for type nvarchar2(8 byte)
set nls_length_semantics to char;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 char
(1 row)

delete from t22;
delete from t33;
delete from t44;
insert into t22 values ('今天的天气不好');
insert into t33 values ('今天的天气好不好');
insert into t44 values ('今天的天气好不好呢');
select test2();
ERROR:  value too long for type character varying(6 char)
select test3();
ERROR:  value too long for type character(7 char)
select test4();
ERROR:  input value too long for type nvarchar2(8 char)
DO LANGUAGE PLPGSQL $$
DECLARE
	str varchar(6);
BEGIN
	insert into t2 select bb from t22;
	select b from t2 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character varying(6 char)
DO LANGUAGE PLPGSQL $$
DECLARE
	str char(7);
BEGIN
	insert into t3 select cc from t33;
	select c from t3 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character(7 char)
DO LANGUAGE PLPGSQL $$
DECLARE
	str nvarchar2(8);
BEGIN
	insert into t4 select dd from t44;
	select d from t4 into str;
	raise notice '%', str;
END$$;
ERROR:  input value too long for type nvarchar2(8 char)
drop table t2;
drop table t3;
drop table t4;
drop table t22;
drop table t33;
drop table t44;
drop function test2();
drop function test3();
drop function test4();
create domain domainchar char(5);
ERROR:  type "domainchar" already exists
create domain domainvarchar varchar(5);
ERROR:  type "domainvarchar" already exists
create domain domainnvarchar2 nvarchar2(5);
-- Test tables using domains
create table basictestchar
           ( testchar domainchar
           );
ERROR:  relation "basictestchar" already exists
-- Test tables using domains
create table basictestvarchar
           ( testchar domainvarchar
           );
ERROR:  relation "basictestvarchar" already exists
-- Test tables using domains
create table basictestnvarchar2
           ( testchar domainnvarchar2
           );
-- Test copy
set nls_length_semantics to char;
COPY basictestchar (testchar) FROM stdin;
COPY basictestchar (testchar) FROM stdin;
ERROR:  value too long for type character(5 char)
select * from basictestchar;
 testchar 
----------
 张老师  
 张    
 张老师  
(3 rows)

set nls_length_semantics to byte;
COPY basictestchar (testchar) FROM stdin;
COPY basictestchar (testchar) FROM stdin;
ERROR:  value too long for type character(5 byte)
select * from basictestchar;
 testchar 
----------
 张老师  
 张    
 张老师  
 张    
(4 rows)

-- Test copy
set nls_length_semantics to char;
COPY basictestvarchar (testchar) FROM stdin;
COPY basictestvarchar (testchar) FROM stdin;
ERROR:  value too long for type character varying(5 char)
select * from basictestvarchar;
 testchar 
----------
 张老师
 张
 张老师
(3 rows)

set nls_length_semantics to byte;
COPY basictestvarchar (testchar) FROM stdin;
COPY basictestvarchar (testchar) FROM stdin;
ERROR:  value too long for type character varying(5 byte)
select * from basictestvarchar;
 testchar 
----------
 张老师
 张
 张老师
 张
(4 rows)

-- Test copy
set nls_length_semantics to char;
COPY basictestnvarchar2 (testchar) FROM stdin;
COPY basictestnvarchar2 (testchar) FROM stdin;
ERROR:  input value too long for type nvarchar2(5 char)
select * from basictestnvarchar2;
 testchar 
----------
 张老师
(1 row)

set nls_length_semantics to byte;
COPY basictestnvarchar2 (testchar) FROM stdin;
COPY basictestnvarchar2 (testchar) FROM stdin;
ERROR:  input value too long for type nvarchar2(5 byte)
select * from basictestnvarchar2;
 testchar 
----------
 张老师
 张
(2 rows)

