\set VERBOSITY terse
SET client_encoding = utf8;
--test for nls_length_semantics and varchar2 type
drop table t1;
ERROR:  table "t1" does not exist
drop table t2;
ERROR:  table "t2" does not exist
drop table t3;
ERROR:  table "t3" does not exist
drop table t11;
ERROR:  table "t11" does not exist
drop table t22;
ERROR:  table "t22" does not exist
drop table t33;
ERROR:  table "t33" does not exist
show nls_length_semantics;
 nls_length_semantics 
----------------------
 none
(1 row)

create table t1 (a varchar2(5));
ERROR:  type "varchar2" does not exist at character 20
create table t2 (b varchar(6));
create table t3 (c char(7));
insert into t2 values('你好很快就分散吗');
ERROR:  value too long for type character varying(6)
insert into t2 values('nlsttd');
select * from t2;
   b    
--------
 nlsttd
(1 row)

insert into t3 values('nlsttdl');
insert into t3 values('你好很快就分散吗');
ERROR:  value too long for type character(7)
select * from t3;
    c    
---------
 nlsttdl
(1 row)

drop table t2;
drop table t3;
set search_path to "$user", public, oracle ;
show search_path ;
       search_path       
-------------------------
 "$user", public, oracle
(1 row)

--
-- test type modifier related rules
--
-- ERROR (typmod >= 1)
CREATE TABLE foo (a VARCHAR2(0));
ERROR:  length for type varchar must be at least 1 at character 21
-- ERROR (number of typmods = 1)
CREATE TABLE foo (a VARCHAR2(10, 1));
ERROR:  invalid type modifier at character 21
-- OK
CREATE TABLE foo (a VARCHAR(5000));
-- cleanup
DROP TABLE foo;
-- OK
CREATE TABLE foo (a VARCHAR2(5));
CREATE INDEX ON foo(a);
--
-- test that no value longer than maxlen is allowed
--
-- ERROR (length > 5)
INSERT INTO foo VALUES ('abcdef');
ERROR:  value too long for type varchar2(5)
-- ERROR (length > 5);
-- VARCHAR2 does not truncate blank spaces on implicit coercion
INSERT INTO foo VALUES ('abcde  ');
ERROR:  value too long for type varchar2(5)
-- OK
INSERT INTO foo VALUES ('abcde');
-- OK
INSERT INTO foo VALUES ('abcdef'::VARCHAR2(5));
-- OK
INSERT INTO foo VALUES ('abcde  '::VARCHAR2(5));
--OK
INSERT INTO foo VALUES ('abc'::VARCHAR2(5));
--
-- test whitespace semantics on comparison
--
-- equal
SELECT 'abcde   '::VARCHAR2(10) = 'abcde   '::VARCHAR2(10);
 ?column? 
----------
 t
(1 row)

-- not equal
SELECT 'abcde  '::VARCHAR2(10) = 'abcde   '::VARCHAR2(10);
 ?column? 
----------
 f
(1 row)

--
-- test string functions created for varchar2
--
-- substrb(varchar2, int, int)
SELECT substrb('ABCありがとう'::VARCHAR2, 7, 6);
 substrb 
---------
 りが
(1 row)

-- returns 'f' (emtpy string is not NULL)
SELECT substrb('ABCありがとう'::VARCHAR2, 7, 0) IS NULL;
 ?column? 
----------
 f
(1 row)

-- If the starting position is zero or less, then return from the start
-- of the string adjusting the length to be consistent with the "negative start"
-- per SQL.
SELECT substrb('ABCありがとう'::VARCHAR2, 0, 4);
 substrb 
---------
 ABC
(1 row)

-- substrb(varchar2, int)
SELECT substrb('ABCありがとう', 5);
 substrb  
----------
 りがとう
(1 row)

-- strposb(varchar2, varchar2)
SELECT strposb('ABCありがとう', 'りが');
 strposb 
---------
       7
(1 row)

-- returns 1 (start of the source string)
SELECT strposb('ABCありがとう', '');
 strposb 
---------
       1
(1 row)

-- returns 0
SELECT strposb('ABCありがとう', 'XX');
 strposb 
---------
       0
(1 row)

-- returns 't'
SELECT strposb('ABCありがとう', NULL) IS NULL;
 ?column? 
----------
 t
(1 row)

-- lengthb(varchar2)
SELECT lengthb('ABCありがとう');
 lengthb 
---------
      18
(1 row)

-- returns 0
SELECT lengthb('');
 lengthb 
---------
       0
(1 row)

-- returs 't'
SELECT lengthb(NULL) IS NULL;
 ?column? 
----------
 t
(1 row)

-- null safe concat (disabled by default)
SELECT NULL || 'hello'::varchar2 || NULL;
 ?column? 
----------
 
(1 row)

SET orafce.varchar2_null_safe_concat TO true;
SELECT NULL || 'hello'::varchar2 || NULL;
 ?column? 
----------
 hello
(1 row)

--test for nls_length_semantics parameters
set nls_length_semantics to byte;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 byte
(1 row)

create table t1 (a varchar2(5));
\d+ t1
                                       Table "public.t1"
 Column |    Type     | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+-------------+-----------+----------+---------+----------+--------------+-------------
 a      | varchar2(5) |           |          |         | extended |              | 

insert into t1 values('nlstt');
select * from t1;
   a   
-------
 nlstt
(1 row)

insert into t1 values('你');
select * from t1;
   a   
-------
 nlstt
 你
(2 rows)

insert into t1 values('你好吗');
ERROR:  value too long for type varchar2(5 byte)
select * from t1;
   a   
-------
 nlstt
 你
(2 rows)

create table t2 (b varchar(6));
\d+ t2
                                           Table "public.t2"
 Column |         Type         | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+----------------------+-----------+----------+---------+----------+--------------+-------------
 b      | character varying(6) |           |          |         | extended |              | 

insert into t2 values('nlsttd');
select * from t2;
   b    
--------
 nlsttd
(1 row)

insert into t2 values('n好t');
select * from t2;
   b    
--------
 nlsttd
 n好t
(2 rows)

insert into t2 values('你好');
select * from t2;
   b    
--------
 nlsttd
 n好t
 你好
(3 rows)

insert into t2 values('你好吗');
ERROR:  value too long for type character varying(6 byte)
select * from t2;
   b    
--------
 nlsttd
 n好t
 你好
(3 rows)

create table t3 (c char(7));
\d+ t3
                                       Table "public.t3"
 Column |     Type     | Collation | Nullable | Default | Storage  | Stats target | Description 
--------+--------------+-----------+----------+---------+----------+--------------+-------------
 c      | character(7) |           |          |         | extended |              | 

insert into t3 values('nlsttdl');
select * from t3;
    c    
---------
 nlsttdl
(1 row)

insert into t3 values('你好');
select * from t3;
    c    
---------
 nlsttdl
 你好 
(2 rows)

insert into t3 values('李老师你好吗');
ERROR:  value too long for type character(7 byte)
select * from t3;
    c    
---------
 nlsttdl
 你好 
(2 rows)

set nls_length_semantics to char;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 char
(1 row)

insert into t1 values('nlstt');
select * from t1;
   a   
-------
 nlstt
 你
 nlstt
(3 rows)

insert into t1 values('你好吗老师');
select * from t1;
     a      
------------
 nlstt
 你
 nlstt
 你好吗老师
(4 rows)

insert into t1 values('你好吗李老师');
ERROR:  value too long for type varchar2(5 char)
insert into t2 values('nlsttd');
select * from t2;
   b    
--------
 nlsttd
 n好t
 你好
 nlsttd
(4 rows)

insert into t2 values('你好吗李老师');
select * from t2;
      b       
--------------
 nlsttd
 n好t
 你好
 nlsttd
 你好吗李老师
(5 rows)

insert into t2 values('你好吗小李老师');
ERROR:  value too long for type character varying(6 char)
insert into t3 values('nlsttdl');
select * from t3;
    c    
---------
 nlsttdl
 你好 
 nlsttdl
(3 rows)

insert into t3 values('小李老师你好吗');
select * from t3;
       c        
----------------
 nlsttdl
 你好 
 nlsttdl
 小李老师你好吗
(4 rows)

insert into t3 values('小李老师你好再见');
ERROR:  value too long for type character(7 char)
drop table t1;
drop table t2;
drop table t3;
set nls_length_semantics to byte;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 byte
(1 row)

create table t1 (a varchar2(1));
\d t1
                   Table "public.t1"
 Column |    Type     | Collation | Nullable | Default 
--------+-------------+-----------+----------+---------
 a      | varchar2(1) |           |          | 

insert into t1 values('李');
ERROR:  value too long for type varchar2(1 byte)
insert into t1 values('李老');
ERROR:  value too long for type varchar2(1 byte)
select * from t1;
 a 
---
(0 rows)

create table t2 (b varchar(1));
\d t2
                       Table "public.t2"
 Column |         Type         | Collation | Nullable | Default 
--------+----------------------+-----------+----------+---------
 b      | character varying(1) |           |          | 

insert into t2 values('李');
ERROR:  value too long for type character varying(1 byte)
insert into t2 values('李老');
ERROR:  value too long for type character varying(1 byte)
select * from t2;
 b 
---
(0 rows)

create table t3 (c char(1));
\d t3
                   Table "public.t3"
 Column |     Type     | Collation | Nullable | Default 
--------+--------------+-----------+----------+---------
 c      | character(1) |           |          | 

insert into t3 values('李');
ERROR:  value too long for type character(1 byte)
insert into t3 values('李老');
ERROR:  value too long for type character(1 byte)
select * from t3;
 c 
---
(0 rows)

set nls_length_semantics to char;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 char
(1 row)

insert into t1 values('李');
insert into t1 values('李老');
ERROR:  value too long for type varchar2(1 char)
select * from t1;
 a  
----
 李
(1 row)

insert into t2 values('李');
insert into t2 values('李老');
ERROR:  value too long for type character varying(1 char)
select * from t2;
 b  
----
 李
(1 row)

insert into t3 values('李');
insert into t3 values('李老');
ERROR:  value too long for type character(1 char)
select * from t3;
 c  
----
 李
(1 row)

drop table t1;
drop table t2;
drop table t3;
set search_path to "$user", public ;
show search_path ;
   search_path   
-----------------
 "$user", public
(1 row)

set nls_length_semantics to none;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 none
(1 row)

create table t1 (a varchar2(5));
ERROR:  type "varchar2" does not exist at character 20
create table t2 (b varchar(6));
create table t3 (c char(7));
create table t22 (bb varchar(20));
insert into t22 values ('你今天上学迟到');
CREATE OR REPLACE FUNCTION test2()
RETURNS varchar
AS $$
insert into t2 select bb from t22;
select * from t2;
$$ LANGUAGE sql;
select test2();
ERROR:  value too long for type character varying(6)
DO LANGUAGE PLPGSQL $$
DECLARE
	str varchar(6);
BEGIN
	insert into t2 select bb from t22;
	select b from t2 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character varying(6)
create table t33 (cc char(20));
insert into t33 values ('你今天上学迟到了');
CREATE OR REPLACE FUNCTION test3()
RETURNS char(20)
AS $$
insert into t3 select cc from t33;
select * from t3;
$$ LANGUAGE sql;
select test3();
ERROR:  value too long for type character(7)
DO LANGUAGE PLPGSQL $$
DECLARE
	str char(7);
BEGIN
	insert into t3 select cc from t33;
	select c from t3 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character(7)
drop table t2;
drop table t3;
set search_path to "$user", public, oracle ;
show search_path ;
       search_path       
-------------------------
 "$user", public, oracle
(1 row)

set nls_length_semantics to byte;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 byte
(1 row)

create table t1 (a varchar2(5));
create table t2 (b varchar(6));
create table t3 (c char(7));
create table t11 (aa varchar2(20));
insert into t11 values ('今天的天气');
CREATE OR REPLACE FUNCTION test1()
RETURNS varchar2
AS $$
insert into t1 select aa from t11;
select * from t1;
$$ LANGUAGE sql;
select test1();
ERROR:  value too long for type varchar2(5 byte)
select test2();
ERROR:  value too long for type character varying(6 byte)
select test3();
ERROR:  value too long for type character(7 byte)
DO LANGUAGE PLPGSQL $$
DECLARE
	str varchar2(5);
BEGIN
	insert into t1 select aa from t11;
	select a from t1 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type varchar2(5 byte)
DO LANGUAGE PLPGSQL $$
DECLARE
	str varchar(6);
BEGIN
	insert into t2 select bb from t22;
	select b from t2 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character varying(6 byte)
DO LANGUAGE PLPGSQL $$
DECLARE
	str char(7);
BEGIN
	insert into t3 select cc from t33;
	select c from t3 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character(7 byte)
set nls_length_semantics to char;
show nls_length_semantics;
 nls_length_semantics 
----------------------
 char
(1 row)

delete from t11;
delete from t22;
delete from t33;
insert into t11 values ('今天的天气好');
insert into t22 values ('今天的天气不好');
insert into t33 values ('今天的天气好不好');
select test1();
ERROR:  value too long for type varchar2(5 char)
select test2();
ERROR:  value too long for type character varying(6 char)
select test3();
ERROR:  value too long for type character(7 char)
DO LANGUAGE PLPGSQL $$
DECLARE
	str varchar2(5);
BEGIN
	insert into t1 select aa from t11;
	select a from t1 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type varchar2(5 char)
DO LANGUAGE PLPGSQL $$
DECLARE
	str varchar(6);
BEGIN
	insert into t2 select bb from t22;
	select b from t2 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character varying(6 char)
DO LANGUAGE PLPGSQL $$
DECLARE
	str char(7);
BEGIN
	insert into t3 select cc from t33;
	select c from t3 into str;
	raise notice '%', str;
END$$;
ERROR:  value too long for type character(7 char)
drop table t1;
drop table t2;
drop table t3;
drop table t11;
drop table t22;
drop table t33;
drop function test1();
drop function test2();
drop function test3();
create domain domainchar char(5);
create domain domainvarchar varchar(5);
create domain domainvarchar2 varchar2(5);
-- Test tables using domains
create table basictestchar
           ( testchar domainchar
           );
-- Test tables using domains
create table basictestvarchar
           ( testchar domainvarchar
           );
-- Test tables using domains
create table basictestvarchar2
           ( testchar domainvarchar2
           );
-- Test copy
set nls_length_semantics to char;
COPY basictestchar (testchar) FROM stdin;
COPY basictestchar (testchar) FROM stdin;
ERROR:  value too long for type character(5 char)
select * from basictestchar;
 testchar 
----------
 张老师  
(1 row)

set nls_length_semantics to byte;
COPY basictestchar (testchar) FROM stdin;
COPY basictestchar (testchar) FROM stdin;
ERROR:  value too long for type character(5 byte)
select * from basictestchar;
 testchar 
----------
 张老师  
 张    
(2 rows)

-- Test copy
set nls_length_semantics to char;
COPY basictestvarchar (testchar) FROM stdin;
COPY basictestvarchar (testchar) FROM stdin;
ERROR:  value too long for type character varying(5 char)
select * from basictestvarchar;
 testchar 
----------
 张老师
(1 row)

set nls_length_semantics to byte;
COPY basictestvarchar (testchar) FROM stdin;
COPY basictestvarchar (testchar) FROM stdin;
ERROR:  value too long for type character varying(5 byte)
select * from basictestvarchar;
 testchar 
----------
 张老师
 张
(2 rows)

-- Test copy
set nls_length_semantics to char;
COPY basictestvarchar2 (testchar) FROM stdin;
COPY basictestvarchar2 (testchar) FROM stdin;
ERROR:  value too long for type varchar2(5 char)
select * from basictestvarchar2;
 testchar 
----------
 张老师
(1 row)

set nls_length_semantics to byte;
COPY basictestvarchar2 (testchar) FROM stdin;
COPY basictestvarchar2 (testchar) FROM stdin;
ERROR:  value too long for type varchar2(5 byte)
select * from basictestvarchar2;
 testchar 
----------
 张老师
 张
(2 rows)

