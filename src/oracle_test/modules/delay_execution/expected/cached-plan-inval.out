Parsed test spec with 2 sessions

starting permutation: s1prep s2lock s1exec s2dropi s2unlock
step s1prep: SET plan_cache_mode = force_generic_plan;
		  PREPARE q AS SELECT * FROM foov WHERE a = $1 FOR UPDATE;
		  EXPLAIN (COSTS OFF) EXECUTE q (1);
QUERY PLAN                                           
-----------------------------------------------------
LockRows                                             
  ->  Append                                         
        Subplans Removed: 2                          
        ->  Index Scan using foo1_1_a on foo1_1 foo_1
              Index Cond: (a = $1)                   
(5 rows)

step s2lock: SELECT pg_advisory_lock(12345);
pg_advisory_lock
----------------
                
(1 row)

step s1exec: LOAD 'delay_execution';
		  SET delay_execution.executor_start_lock_id = 12345;
		  EXPLAIN (COSTS OFF) EXECUTE q (1); <waiting ...>
step s2dropi: DROP INDEX foo1_1_a;
step s2unlock: SELECT pg_advisory_unlock(12345);
pg_advisory_unlock
------------------
t                 
(1 row)

step s1exec: <... completed>
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is not valid
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
QUERY PLAN                          
------------------------------------
LockRows                            
  ->  Append                        
        Subplans Removed: 2         
        ->  Seq Scan on foo1_1 foo_1
              Filter: (a = $1)      
(5 rows)


starting permutation: s1prep2 s2lock s1exec2 s2dropi s2unlock
step s1prep2: SET plan_cache_mode = force_generic_plan;
		  PREPARE q2 AS SELECT * FROM foov WHERE a = one() or a = two();
		  EXPLAIN (COSTS OFF) EXECUTE q2;
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
QUERY PLAN                                         
---------------------------------------------------
Append                                             
  Subplans Removed: 1                              
  ->  Index Scan using foo1_1_a on foo1_1 foo_1    
        Index Cond: (a = ANY (ARRAY[one(), two()]))
  ->  Seq Scan on foo1_2 foo_2                     
        Filter: ((a = one()) OR (a = two()))       
(6 rows)

step s2lock: SELECT pg_advisory_lock(12345);
pg_advisory_lock
----------------
                
(1 row)

step s1exec2: LOAD 'delay_execution';
		  SET delay_execution.executor_start_lock_id = 12345;
		  EXPLAIN (COSTS OFF) EXECUTE q2; <waiting ...>
step s2dropi: DROP INDEX foo1_1_a;
step s2unlock: SELECT pg_advisory_unlock(12345);
pg_advisory_unlock
------------------
t                 
(1 row)

step s1exec2: <... completed>
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is not valid
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
QUERY PLAN                                  
--------------------------------------------
Append                                      
  Subplans Removed: 1                       
  ->  Seq Scan on foo1_1 foo_1              
        Filter: ((a = one()) OR (a = two()))
  ->  Seq Scan on foo1_2 foo_2              
        Filter: ((a = one()) OR (a = two()))
(6 rows)


starting permutation: s1prep3 s2lock s1exec3 s2dropi s2unlock
step s1prep3: SET plan_cache_mode = force_generic_plan;
		  PREPARE q3 AS UPDATE foov SET a = a WHERE a = one() or a = two();
		  EXPLAIN (COSTS OFF) EXECUTE q3;
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
QUERY PLAN                                                     
---------------------------------------------------------------
Nested Loop                                                    
  ->  Append                                                   
        Subplans Removed: 1                                    
        ->  Index Only Scan using foo1_1_a on foo1_1 foo_1     
              Index Cond: (a = ANY (ARRAY[one(), two()]))      
        ->  Seq Scan on foo1_2 foo_2                           
              Filter: ((a = one()) OR (a = two()))             
  ->  Materialize                                              
        ->  Append                                             
              Subplans Removed: 1                              
              ->  Seq Scan on bar1 bar_1                       
                    Filter: (a = one())                        
                                                               
Update on bar                                                  
  Update on bar1 bar_1                                         
  ->  Nested Loop                                              
        ->  Append                                             
              Subplans Removed: 1                              
              ->  Index Scan using foo1_1_a on foo1_1 foo_1    
                    Index Cond: (a = ANY (ARRAY[one(), two()]))
              ->  Seq Scan on foo1_2 foo_2                     
                    Filter: ((a = one()) OR (a = two()))       
        ->  Materialize                                        
              ->  Append                                       
                    Subplans Removed: 1                        
                    ->  Seq Scan on bar1 bar_1                 
                          Filter: (a = one())                  
                                                               
Update on foo                                                  
  Update on foo1_1 foo_1                                       
  Update on foo1_2 foo_2                                       
  ->  Append                                                   
        Subplans Removed: 1                                    
        ->  Index Scan using foo1_1_a on foo1_1 foo_1          
              Index Cond: (a = ANY (ARRAY[one(), two()]))      
        ->  Seq Scan on foo1_2 foo_2                           
              Filter: ((a = one()) OR (a = two()))             
(37 rows)

step s2lock: SELECT pg_advisory_lock(12345);
pg_advisory_lock
----------------
                
(1 row)

step s1exec3: LOAD 'delay_execution';
		  SET delay_execution.executor_start_lock_id = 12345;
		  EXPLAIN (COSTS OFF) EXECUTE q3; <waiting ...>
step s2dropi: DROP INDEX foo1_1_a;
step s2unlock: SELECT pg_advisory_unlock(12345);
pg_advisory_unlock
------------------
t                 
(1 row)

step s1exec3: <... completed>
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is not valid
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
QUERY PLAN                                              
--------------------------------------------------------
Nested Loop                                             
  ->  Append                                            
        Subplans Removed: 1                             
        ->  Seq Scan on foo1_1 foo_1                    
              Filter: ((a = one()) OR (a = two()))      
        ->  Seq Scan on foo1_2 foo_2                    
              Filter: ((a = one()) OR (a = two()))      
  ->  Materialize                                       
        ->  Append                                      
              Subplans Removed: 1                       
              ->  Seq Scan on bar1 bar_1                
                    Filter: (a = one())                 
                                                        
Update on bar                                           
  Update on bar1 bar_1                                  
  ->  Nested Loop                                       
        ->  Append                                      
              Subplans Removed: 1                       
              ->  Seq Scan on foo1_1 foo_1              
                    Filter: ((a = one()) OR (a = two()))
              ->  Seq Scan on foo1_2 foo_2              
                    Filter: ((a = one()) OR (a = two()))
        ->  Materialize                                 
              ->  Append                                
                    Subplans Removed: 1                 
                    ->  Seq Scan on bar1 bar_1          
                          Filter: (a = one())           
                                                        
Update on foo                                           
  Update on foo1_1 foo_1                                
  Update on foo1_2 foo_2                                
  ->  Append                                            
        Subplans Removed: 1                             
        ->  Seq Scan on foo1_1 foo_1                    
              Filter: ((a = one()) OR (a = two()))      
        ->  Seq Scan on foo1_2 foo_2                    
              Filter: ((a = one()) OR (a = two()))      
(37 rows)


starting permutation: s1prep4 s2lock s1exec4 s2dropi s2unlock
step s1prep4: SET plan_cache_mode = force_generic_plan;
		  PREPARE q4 AS SELECT * FROM generate_series(1, 1) WHERE EXISTS (SELECT * FROM foov WHERE a = $1 FOR UPDATE);
		  EXPLAIN (COSTS OFF) EXECUTE q4 (1);
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
QUERY PLAN                                                   
-------------------------------------------------------------
Result                                                       
  One-Time Filter: (InitPlan 1).col1                         
  InitPlan 1                                                 
    ->  LockRows                                             
          ->  Append                                         
                Subplans Removed: 2                          
                ->  Index Scan using foo1_1_a on foo1_1 foo_1
                      Index Cond: (a = $1)                   
  ->  Function Scan on generate_series                       
(9 rows)

step s2lock: SELECT pg_advisory_lock(12345);
pg_advisory_lock
----------------
                
(1 row)

step s1exec4: LOAD 'delay_execution';
		  SET delay_execution.executor_start_lock_id = 12345;
		  EXPLAIN (COSTS OFF) EXECUTE q4 (1); <waiting ...>
step s2dropi: DROP INDEX foo1_1_a;
step s2unlock: SELECT pg_advisory_unlock(12345);
pg_advisory_unlock
------------------
t                 
(1 row)

step s1exec4: <... completed>
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is not valid
s1: NOTICE:  Finished ExecutorStart(): CachedPlan is valid
QUERY PLAN                                  
--------------------------------------------
Result                                      
  One-Time Filter: (InitPlan 1).col1        
  InitPlan 1                                
    ->  LockRows                            
          ->  Append                        
                Subplans Removed: 2         
                ->  Seq Scan on foo1_1 foo_1
                      Filter: (a = $1)      
  ->  Function Scan on generate_series      
(9 rows)

