-- sanity check of system catalog
CREATE TABLE identity_aways (
	id NUMBER GENERATED ALWAYS AS IDENTITY,
	description text
);
INSERT INTO identity_aways (description) VALUES ('Just DESCRIPTION');--ok
INSERT INTO identity_aways (id, description) VALUES (NULL, 'ID=NULL and DESCRIPTION');--error
ERROR:  cannot insert a generated always identity column "id"
DETAIL:  Column "id" is an identity column defined as GENERATED ALWAYS.
INSERT INTO identity_aways (id, description) VALUES (999, 'ID=999 and DESCRIPTION');--error
ERROR:  cannot insert a generated always identity column "id"
DETAIL:  Column "id" is an identity column defined as GENERATED ALWAYS.
UPDATE identity_aways SET ID=2 WHERE ID=1;--error
ERROR:  cannot update a generated always identity column "id"
DETAIL:  Column "id" is an identity column defined as GENERATED ALWAYS.
SELECT * FROM identity_aways;
 id |   description    
----+------------------
 1  | Just DESCRIPTION
(1 row)

DROP TABLE identity_aways;
--by default
CREATE TABLE identity_default (
	id NUMBER GENERATED BY DEFAULT AS IDENTITY,
	description text
);
INSERT INTO identity_default (description) VALUES ('Just DESCRIPTION');--ok
INSERT INTO identity_default (id, description) VALUES (999, 'ID=999 and DESCRIPTION');--ok
INSERT INTO identity_default (id, description) VALUES (NULL, 'ID=NULL and DESCRIPTION');--error
ERROR:  cannot insert NULL into ( "identity_default"."id" )
DETAIL:  Column "id" is an identity column defined as GENERATED BY DEFAULT.
UPDATE identity_default SET ID=2 WHERE ID=1;--ok
UPDATE identity_default SET ID=NULL WHERE ID=2;--error
ERROR:  cannot update ("IDENTITY_DEFAULT"."id") to null
DETAIL:  Column "id" is an identity column defined as BY DEFAULT
SELECT * FROM identity_default;
 id  |      description       
-----+------------------------
 999 | ID=999 and DESCRIPTION
 2   | Just DESCRIPTION
(2 rows)

DROP TABLE identity_default;
--BY DEFAULT ON NULL
CREATE TABLE identity_default_null (
	id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
	description text
);
INSERT INTO identity_default_null (description) VALUES ('Just DESCRIPTION');
INSERT INTO identity_default_null (id, description) VALUES (999, 'ID=999 and DESCRIPTION');
INSERT INTO identity_default_null (id, description) VALUES (NULL, 'ID=NULL and DESCRIPTION');
UPDATE identity_default_null SET ID=3 WHERE ID=1;
UPDATE identity_default_null SET ID=NULL WHERE ID=3;--error
ERROR:  cannot update ("IDENTITY_DEFAULT"."id") to null
DETAIL:  Column "id" is an identity column defined as BY DEFAULT
SELECT * FROM identity_default_null;
 id  |       description       
-----+-------------------------
 999 | ID=999 and DESCRIPTION
 2   | ID=NULL and DESCRIPTION
 3   | Just DESCRIPTION
(3 rows)

DROP TABLE identity_default_null;
--test identity_option clause
CREATE TABLE identity_3(
	id		  int GENERATED BY DEFAULT AS IDENTITY INCREMENT by 2,
	description text
);
INSERT INTO identity_3 (description) VALUES ('one DESCRIPTION');
INSERT INTO identity_3 (description) VALUES ('second DESCRIPTION');
SELECT * FROM identity_3;
 id |    description     
----+--------------------
  1 | one DESCRIPTION
  3 | second DESCRIPTION
(2 rows)

DROP TABLE identity_3;
--test mutiple identity column
CREATE TABLE itest1 (a int generated by default as identity start with 1 increment by 2,
							b text generated always as identity start with 1);--error
ERROR:  table can have only one identity column
--more data type support
CREATE TABLE itest_float (a float generated by default on null as identity start with 1 increment by 2, b text);
CREATE TABLE itest_double (a double precision generated by default on null as identity start with 1 increment by 2, b text);
CREATE TABLE itest_real (a real generated by default on null as identity start with 1 increment by 2, b text);
CREATE TABLE itest_numeric (a numeric generated by default on null as identity start with 1 increment by 2, b text);
CREATE TABLE itest_decimal (a decimal generated by default on null as identity start with 1 increment by 2, b text);
drop table itest_float;
drop table itest_double;
drop table itest_real;
drop table itest_numeric;
drop table itest_decimal;
--test ALTER TABLE
CREATE TABLE itest13 (a int);
ALTER TABLE itest13 ADD (b int GENERATED BY DEFAULT AS IDENTITY);
ALTER TABLE itest13 modify (b DROP IDENTITY);
drop table itest13;
CREATE TABLE itest_alter (a int);
-- add column to empty table
ALTER TABLE itest_alter ADD (b int GENERATED BY DEFAULT AS IDENTITY);
ALTER TABLE itest_alter MODIFY (b GENERATED BY DEFAULT ON NULL AS IDENTITY
(START WITH 1000
INCREMENT BY 3
MAXVALUE 5000
CACHE 20
CYCLE)
);
ALTER TABLE itest_alter MODIFY(b DROP IDENTITY);
insert into itest_alter(a) values (1);
drop table itest_alter;
--Test column type conversion
CREATE TABLE t2 (id smallint GENERATED BY DEFAULT AS IDENTITY START WITH 100 INCREMENT BY 10);
INSERT INTO t2 VALUES(32768);--ok
DROP TABLE t2;
--test partition table
CREATE TABLE pagg_tab1(x int GENERATED ALWAYS AS IDENTITY START WITH 2 INCREMENT BY 10, y int) PARTITION BY RANGE(x);
CREATE TABLE pagg_tab1_p1 PARTITION OF pagg_tab1 FOR VALUES FROM (0) TO (10);
CREATE TABLE pagg_tab1_p2 PARTITION OF pagg_tab1 FOR VALUES FROM (10) TO (20);
insert into pagg_tab1(y) values (1);
insert into pagg_tab1(y) values (1);
SELECT * FROM pagg_tab1_p1;
 x | y 
---+---
 2 | 1
(1 row)

SELECT * FROM pagg_tab1_p2;
 x  | y 
----+---
 12 | 1
(1 row)

DROP TABLE pagg_tab1;
--test the order/noodrer
CREATE TABLE itest_order (a int generated by default on null as identity start with 1 increment by 2 order, b text);--ok
CREATE TABLE itest_order_noorder (a int generated by default on null as identity start with 1 increment by 2 order noorder, b text);--error
ERROR:  dumplicate or conflicting ORDER/NOORDER specifications
LINE 1: ...ull as identity start with 1 increment by 2 order noorder, b...
                                                             ^
CREATE TABLE itest_muti_order (a int generated by default on null as identity start with 1 increment by 2 order order, b text);--error
ERROR:  dumplicate or conflicting ORDER/NOORDER specifications
LINE 1: ...ull as identity start with 1 increment by 2 order order, b t...
                                                             ^
CREATE TABLE itest_muti_order (a int generated by default on null as identity start with 1 increment by 2 noorder noorder, b text);--error
ERROR:  dumplicate or conflicting ORDER/NOORDER specifications
LINE 1: ...l as identity start with 1 increment by 2 noorder noorder, b...
                                                             ^
DROP TABLE itest_order;
create table cycle2(userid number generated always as identity maxvalue -5 minvalue -10 start with -7  increment by -2 cycle nocache,uname varchar2(20));
create table cycle3(userid number generated BY DEFAULT as identity maxvalue -5 minvalue -10 start with -7  increment by -2 cycle nocache,uname varchar2(20));
create table cycle4(userid number generated BY DEFAULT ON NULL as identity maxvalue -5 minvalue -10 start with -7  increment by -2 cycle nocache,uname varchar2(20));
DROP TABLE cycle2;
DROP TABLE cycle3;
DROP TABLE cycle4;
CREATE TABLE idcol_alter2(userid number generated always as identity  start with 2,uname varchar2(20));
INSERT INTO idcol_alter2 (uname) VALUES ('xiaodong');
ALTER TABLE idcol_alter2 modify userid drop identity;
INSERT INTO idcol_alter2 (uname) VALUES ('xiaohong');
create table idcol_alter4 (userid number generated always as identity  (start with 20 maxvalue 22),uname varchar2(20));
create table idcol_alter5 (userid number generated BY DEFAULT as identity  (start with 20 maxvalue 22),uname varchar2(20));
create table idcol_alter6 (userid number generated BY DEFAULT ON NULL as identity  (start with 20 maxvalue 22),uname varchar2(20));
DROP TABLE idcol_alter4;
DROP TABLE idcol_alter5;
DROP TABLE idcol_alter6;
create table idcol_alter5(userid int generated by default as identity  (start with 20 maxvalue 22),uname varchar2(20));
alter table idcol_alter5 modify userid generated by default  on null as identity (start with 30 maxvalue 32 increment by 3);
insert into idcol_alter5 (userid,uname) values (null,'xiaoming');
select * from idcol_alter5;
 userid |  uname   
--------+----------
     30 | xiaoming
(1 row)

DROP TABLE idcol_alter5;
create table maxval4(userid number generated by default as identity  start with 11 maxvalue 10,uname varchar2(20));
insert into maxval4 (uname) values ('xiaoming');
ERROR:  sequence maxval4_userid_seq.nextval exceeds MAXVALUE and cannot be instantiated
DROP TABLE maxval4;
create table other_stx1(userid number generated always as identity increment 2,uname varchar2(20));
ERROR:  missing BY keyword
create table other_stx2(userid number generated always as identity start  2,uname varchar2(20));
ERROR:  missing WITH keyword
create table other_start_max1(userid number generated always as identity start with 9999999999999999999999999999,uname varchar2(20));
WARNING:  Start value is out of range for data type bigint
create table other_max1(userid number generated always as identity  maxvalue 9999999999999999999999999999,uname varchar2(20));
WARNING:  Maxvalue is out of range for data type bigint
DROP TABLE other_start_max1;
DROP TABLE other_max1;
create table other_max2(userid number(8) generated always as identity  start with 99999999 increment by 2,uname varchar2(20));
insert into other_max2 (uname) values ('xiaodong');
insert into other_max2 (uname) values ('xiaodong');    --error
ERROR:  numeric field overflow
DETAIL:  A field with precision 8, scale 0 must round to an absolute value less than 10^8.
DROP TABLE other_max2;
create table number_null(userid number(8) generated by default on null as identity  start with 1 increment by 2,uname varchar2(20));
insert into number_null (userid,uname) values (null,'aaa');
select * from number_null;
 userid | uname 
--------+-------
 1      | aaa
(1 row)

DROP TABLE number_null;
create table id_t(s_key number generated as identity primary key, data varchar2(30));
insert into id_t (data) values ('identity');
insert into id_t (data) values ('column');
select * from id_t;
 s_key |   data   
-------+----------
 1     | identity
 2     | column
(2 rows)

insert into id_t values(3, 'test');--error
ERROR:  cannot insert a generated always identity column "s_key"
DETAIL:  Column "s_key" is an identity column defined as GENERATED ALWAYS.
DROP TABLE id_t;
CREATE TABLE identity_3(
	id		  int GENERATED BY DEFAULT AS IDENTITY INCREMENT by 2,
	description varchar2(10),
	primary key(id,description)
);
insert into identity_3(description) values (2);
insert into identity_3(description) values (2);
insert into identity_3(id,description) values (4,2);
insert into identity_3(id,description) values (4,2);
ERROR:  duplicate key value violates unique constraint "identity_3_pkey"
DETAIL:  Key (id, description)=(4, 2) already exists.
DROP TABLE identity_3;
create table id_t(s_key number generated as identity primary key, data varchar2(30));
insert into id_t (data) values ('identity');
insert into id_t (data) values ('column');
alter table id_t modify(s_key varchar(10) generated by default as identity);	--error
ERROR:  identity column type must be a numeric type
alter table id_t modify(s_key int generated by default as identity);
insert into id_t values(3, 'test');
select * from id_t;
 s_key |   data   
-------+----------
     1 | identity
     2 | column
     3 | test
(3 rows)

\d id_t
                                Table "public.id_t"
 Column |      Type       | Collation | Nullable |             Default              
--------+-----------------+-----------+----------+----------------------------------
 s_key  | pg_catalog.int4 |           | not null | generated by default as identity
 data   | varchar2(30)    |           |          | 
Indexes:
    "id_t_pkey" PRIMARY KEY, btree (s_key)

DROP TABLE id_t;
create table id_t1(s_key int generated as identity primary key, data varchar2(30));
insert into id_t1 (data) values ('identity');
insert into id_t1 (data) values ('column');
alter table id_t1 modify(s_key number generated by default as identity);
insert into id_t1 values(3, 'test');
select * from id_t1;
 s_key |   data   
-------+----------
 1     | identity
 2     | column
 3     | test
(3 rows)

\d id_t1
                              Table "public.id_t1"
 Column |     Type     | Collation | Nullable |             Default              
--------+--------------+-----------+----------+----------------------------------
 s_key  | number       |           | not null | generated by default as identity
 data   | varchar2(30) |           |          | 
Indexes:
    "id_t1_pkey" PRIMARY KEY, btree (s_key)

DROP TABLE id_t1;
create table id_t2(s_key int generated always as identity start with 10000, data varchar2(30));
insert into id_t2 (data) values ('identity');
insert into id_t2 (data) values ('column');
alter table id_t2 modify(s_key number(3) generated by default as identity);	--error
ERROR:  numeric field overflow
DETAIL:  A field with precision 3, scale 0 must round to an absolute value less than 10^3.
DROP TABLE id_t2;
create table other_max1(userid number generated always as identity  start with -9999999999999999999999999999 increment by -1,uname varchar2(20));
WARNING:  Start value is out of range for data type bigint
insert into other_max1 (uname) values ('aaa');
insert into other_max1 (uname) values ('aaa');	--error
ERROR:  nextval: reached minimum value of sequence "other_max1_userid_seq" (-9223372036854775808)
DROP TABLE other_max1;
create table other_max1(userid number generated always as identity  increment by -9999999999999999999999999999,uname varchar2(20));
WARNING:  Increment value is out of range for data type bigint
insert into other_max1 (uname) values ('aa');
insert into other_max1 (uname) values ('aa');	--error
ERROR:  nextval: reached maximum value of sequence "other_max1_userid_seq" (9223372036854775807)
DROP TABLE other_max1;
create table other_max1(userid number generated always as identity	increment by 9999999999999999999999999999,uname varchar2(20));
WARNING:  Increment value is out of range for data type bigint
insert into other_max1 (uname) values ('aa');
insert into other_max1 (uname) values ('aa');	--error
ERROR:  nextval: reached maximum value of sequence "other_max1_userid_seq" (9223372036854775807)
DROP TABLE other_max1;
create table cache_max1(userid number generated always as identity  increment by 1 cache 999999999999999999999,uname varchar2(20));
WARNING:  Cache value is out of range for data type bigint
DROP TABLE cache_max1;
